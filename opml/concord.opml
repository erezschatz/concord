<?xml version="1.0" encoding="ISO-8859-1"?>
<opml version="2.0">
	<head>
		<title>concord.js</title>
		<dateModified>&lt;%dateModified%></dateModified>
		<expansionState></expansionState>
		<vertScrollState>1</vertScrollState>
		<windowTop>300</windowTop>
		<windowLeft>700</windowLeft>
		<windowBottom>900</windowBottom>
		<windowRight>1500</windowRight>
		</head>
	<body text="concord.js">
		<outline text="// Copyright 2020-2021, Dave Winer"></outline>
		<outline text="// Copyright 2013, Small Picture, Inc."></outline>
		<outline text=""></outline>
		<outline text="$(function () {">
			<outline text="if($.fn.tooltip !== undefined){">
				<outline text="$(&quot;a[rel=tooltip]&quot;).tooltip({">
					<outline text="live: true"></outline>
					<outline text="})"></outline>
					</outline>
				<outline text="}"></outline>
				</outline>
			<outline text="})"></outline>
			</outline>
		<outline text="$(function () {">
			<outline text="if($.fn.popover !== undefined){">
				<outline text="$(&quot;a[rel=popover]&quot;).on(&quot;mouseenter mouseleave&quot;, function(){$(this).popover(&quot;toggle&quot;)})"></outline>
				<outline text="}"></outline>
				</outline>
			<outline text="})"></outline>
			</outline>
		<outline text="if (!Array.prototype.indexOf) {">
			<outline text="Array.prototype.indexOf = function(obj, start) {">
				<outline text="for (var i = (start || 0), j = this.length; i &lt; j; i++) {">
					<outline text="if (this[i] === obj) { return i; }"></outline>
					<outline text="}"></outline>
					</outline>
				<outline text="return -1;"></outline>
				<outline text="}"></outline>
				</outline>
			<outline text="}"></outline>
			</outline>
		<outline text="var concord = {">
			<outline text="version: &quot;3.0.5&quot;,"></outline>
			<outline text="mobile: /Android|webOS|iPhone|iPad|iPod|BlackBerry/i.test(navigator.userAgent),"></outline>
			<outline text="ready: false,"></outline>
			<outline text="handleEvents: true,"></outline>
			<outline text="resumeCallbacks: [],"></outline>
			<outline text="onResume: function(cb){">
				<outline text="this.resumeCallbacks.push(cb);"></outline>
				<outline text="},"></outline>
				</outline>
			<outline text="resumeListening: function(){">
				<outline text="if(!this.handleEvents){">
					<outline text="this.handleEvents=true;"></outline>
					<outline text="var r = this.getFocusRoot();"></outline>
					<outline text="if(r!=null){">
						<outline text="var c = new ConcordOutline(r.parent());"></outline>
						<outline text="if(c.op.inTextMode()){">
							<outline text="c.op.focusCursor();"></outline>
							<outline text="c.editor.restoreSelection();"></outline>
							<outline text="}else{">
								<outline text="c.pasteBinFocus();"></outline>
								<outline text="}"></outline>
								</outline>
							</outline>
						<outline text="for(var i in this.resumeCallbacks){">
							<outline text="var cb = this.resumeCallbacks[i];"></outline>
							<outline text="cb();"></outline>
							<outline text="}"></outline>
							</outline>
						<outline text="this.resumeCallbacks=[];"></outline>
						<outline text="}"></outline>
						</outline>
					<outline text="}"></outline>
					</outline>
				<outline text="},"></outline>
				</outline>
			<outline text="stopListening: function(){">
				<outline text="if(this.handleEvents){">
					<outline text="this.handleEvents=false;"></outline>
					<outline text="var r = this.getFocusRoot();"></outline>
					<outline text="if(r!=null){">
						<outline text="var c = new ConcordOutline(r.parent());"></outline>
						<outline text="if(c.op.inTextMode()){">
							<outline text="c.editor.saveSelection();"></outline>
							<outline text="}"></outline>
							</outline>
						<outline text="}"></outline>
						</outline>
					<outline text="}"></outline>
					</outline>
				<outline text="},"></outline>
				</outline>
			<outline text="focusRoot: null,"></outline>
			<outline text="getFocusRoot: function(){">
				<outline text="if($(&quot;.concord-root:visible&quot;).length==1){">
					<outline text="return this.setFocusRoot($(&quot;.concord-root:visible:first&quot;));"></outline>
					<outline text="}"></outline>
					</outline>
				<outline text="if($(&quot;.modal&quot;).is(&quot;:visible&quot;)){">
					<outline text="if($(&quot;.modal&quot;).find(&quot;.concord-root:visible:first&quot;).length==1){">
						<outline text="return this.setFocusRoot($(&quot;.modal&quot;).find(&quot;.concord-root:visible:first&quot;));"></outline>
						<outline text="}"></outline>
						</outline>
					<outline text="}"></outline>
					</outline>
				<outline text="if(this.focusRoot==null){">
					<outline text="if($(&quot;.concord-root:visible&quot;).length&gt;0){">
						<outline text="return this.setFocusRoot($(&quot;.concord-root:visible:first&quot;));"></outline>
						<outline text="}else{">
							<outline text="return null;"></outline>
							<outline text="}"></outline>
							</outline>
						</outline>
					<outline text="}"></outline>
					</outline>
				<outline text="if(!this.focusRoot.is(&quot;:visible&quot;)){">
					<outline text="return this.setFocusRoot($(&quot;.concord-root:visible:first&quot;));"></outline>
					<outline text="}"></outline>
					</outline>
				<outline text="return this.focusRoot;"></outline>
				<outline text="},"></outline>
				</outline>
			<outline text="setFocusRoot: function(root){">
				<outline text="var origRoot = this.focusRoot;"></outline>
				<outline text="var concordInstance = new ConcordOutline(root.parent());"></outline>
				<outline text="if((origRoot!=null) &amp;&amp; !(origRoot[0]===root[0])){">
					<outline text="var origConcordInstance = new ConcordOutline(origRoot.parent());"></outline>
					<outline text="origConcordInstance.editor.hideContextMenu();"></outline>
					<outline text="origConcordInstance.editor.dragModeExit();"></outline>
					<outline text="if(concordInstance.op.inTextMode()){">
						<outline text="concordInstance.op.focusCursor();"></outline>
						<outline text="}"></outline>
						</outline>
					<outline text="else {">
						<outline text="concordInstance.pasteBinFocus();"></outline>
						<outline text="}"></outline>
						</outline>
					<outline text="}"></outline>
					</outline>
				<outline text="this.focusRoot = root;"></outline>
				<outline text="return this.focusRoot;"></outline>
				<outline text="},"></outline>
				</outline>
			<outline text="updateFocusRootEvent: function(event){">
				<outline text="var root = $(event.target).parents(&quot;.concord-root:first&quot;);"></outline>
				<outline text="if(root.length==1){">
					<outline text="concord.setFocusRoot(root);"></outline>
					<outline text="}"></outline>
					</outline>
				<outline text="}"></outline>
				</outline>
			<outline text="};"></outline>
			</outline>
		<outline text="var concordEnvironment = {">
			<outline text="&quot;version&quot; : concord.version"></outline>
			<outline text="};"></outline>
			</outline>
		<outline text="var concordClipboard = undefined;"></outline>
		<outline text="var flConcordScrollEnabled = true; //6/24/14 by DW"></outline>
		<outline text="var ctPixelsAboveOutlineArea = 0; //6/24/14 by DW"></outline>
		<outline text=""></outline>
		<outline text="jQuery.fn.reverse = [].reverse;"></outline>
		<outline text=""></outline>
		<outline text="//Constants">
			<outline text="var nil = null;"></outline>
			<outline text="var infinity = Number.MAX_VALUE;"></outline>
			<outline text="var down = &quot;down&quot;;"></outline>
			<outline text="var left = &quot;left&quot;;"></outline>
			<outline text="var right = &quot;right&quot;;"></outline>
			<outline text="var up = &quot;up&quot;;"></outline>
			<outline text="var flatup = &quot;flatup&quot;;"></outline>
			<outline text="var flatdown = &quot;flatdown&quot;;"></outline>
			<outline text="var nodirection = &quot;nodirection&quot;;"></outline>
			</outline>
		<outline text="var XML_CHAR_MAP = {">
			<outline text="'&lt;': '&amp;lt;',"></outline>
			<outline created="Wed, 11 Aug 2021 15:10:12 GMT" isComment="true" text="'\'': '&amp;apos;', //8/11/21 by DW"></outline>
			<outline text="'&gt;': '&amp;gt;',"></outline>
			<outline text="'&amp;': '&amp;amp;',"></outline>
			<outline text="'&quot;': '&amp;'+'quot;'"></outline>
			<outline text="};"></outline>
			</outline>
		<outline text="var ConcordUtil = {">
			<outline text="escapeXml: function(s) {">
				<outline text="s = s.toString();"></outline>
				<outline text="s = s.replace(/\u00A0/g, &quot; &quot;);"></outline>
				<outline text="var escaped = s.replace(/[&lt;&gt;&amp;&quot;]/g, function(ch) {">
					<outline text="return XML_CHAR_MAP[ch];"></outline>
					<outline text="});"></outline>
					</outline>
				<outline text="return escaped;"></outline>
				<outline text="},"></outline>
				</outline>
			<outline text="stringMid: function (s, ix, len) { //1/27/20 by DW">
				<outline text="return (s.substr (ix-1, len));"></outline>
				<outline text="},"></outline>
				</outline>
			<outline text="stringDelete: function (s, ix, ct) { //1/27/20 by DW">
				<outline text="var start = ix - 1;"></outline>
				<outline text="var end = (ix + ct) - 1;"></outline>
				<outline text="var s1 = s.substr (0, start);"></outline>
				<outline text="var s2 = s.substr (end);"></outline>
				<outline text="return (s1 + s2);"></outline>
				<outline text="},"></outline>
				</outline>
			<outline text="endsWith: function (s, possibleEnding, flUnicase) { //1/27/20 by DW">
				<outline text="function stringLower (s) {">
					<outline text="return (s.toLowerCase ());"></outline>
					<outline text="}"></outline>
					</outline>
				<outline created="Wed, 01 Jan 2014 23:29:44 GMT" pgfnum="35184" text="if ((s === undefined) || (s.length == 0)) { ">
					<outline created="Wed, 01 Jan 2014 23:29:49 GMT" pgfnum="35185" text="return (false);"></outline>
					<outline created="Wed, 01 Jan 2014 23:29:52 GMT" pgfnum="35186" text="}"></outline>
					</outline>
				<outline created="Wed, 27 Nov 2013 22:09:56 GMT" pgfnum="32496" text="var ixstring = s.length - 1;"></outline>
				<outline created="Wed, 27 Nov 2013 21:59:59 GMT" pgfnum="32482" text="if (flUnicase === undefined) {">
					<outline created="Wed, 27 Nov 2013 22:00:10 GMT" pgfnum="32483" text="flUnicase = true;"></outline>
					<outline created="Wed, 27 Nov 2013 22:00:14 GMT" pgfnum="32484" text="}"></outline>
					</outline>
				<outline created="Wed, 27 Nov 2013 22:00:49 GMT" pgfnum="32485" text="if (flUnicase) {">
					<outline created="Wed, 27 Nov 2013 21:58:48 GMT" pgfnum="32476" text="for (var i = possibleEnding.length - 1; i &gt;= 0; i--) {">
						<outline created="Wed, 27 Nov 2013 21:59:05 GMT" pgfnum="32478" text="if (stringLower (s [ixstring--]) != stringLower (possibleEnding [i])) {">
							<outline created="Wed, 27 Nov 2013 21:59:34 GMT" pgfnum="32479" text="return (false);"></outline>
							<outline created="Wed, 27 Nov 2013 21:59:38 GMT" pgfnum="32480" text="}"></outline>
							</outline>
						<outline created="Wed, 27 Nov 2013 21:59:01 GMT" pgfnum="32477" text="}"></outline>
						</outline>
					<outline created="Wed, 27 Nov 2013 22:00:58 GMT" pgfnum="32486" text="}"></outline>
					</outline>
				<outline created="Wed, 27 Nov 2013 22:01:08 GMT" pgfnum="32487" text="else {">
					<outline created="Wed, 27 Nov 2013 21:58:48 GMT" pgfnum="32476" text="for (var i = possibleEnding.length - 1; i &gt;= 0; i--) {">
						<outline created="Wed, 27 Nov 2013 21:59:05 GMT" pgfnum="32478" text="if (s [ixstring--] != possibleEnding [i]) {">
							<outline created="Wed, 27 Nov 2013 21:59:34 GMT" pgfnum="32479" text="return (false);"></outline>
							<outline created="Wed, 27 Nov 2013 21:59:38 GMT" pgfnum="32480" text="}"></outline>
							</outline>
						<outline created="Wed, 27 Nov 2013 21:59:01 GMT" pgfnum="32477" text="}"></outline>
						</outline>
					<outline created="Wed, 27 Nov 2013 22:01:15 GMT" pgfnum="32488" text="}"></outline>
					</outline>
				<outline created="Wed, 27 Nov 2013 21:59:44 GMT" pgfnum="32481" text="return (true);"></outline>
				<outline text="},"></outline>
				</outline>
			<outline text="speakerBeep: function () { //1/27/20 by DW">
				<outline text="try {">
					<outline text="speakerBeep ();"></outline>
					<outline text="}"></outline>
					</outline>
				<outline text="catch (err) {">
					<outline text="console.log (&quot;beep&quot;);"></outline>
					<outline text="}"></outline>
					</outline>
				<outline text="},"></outline>
				</outline>
			<outline text="getIconHtml: function (iconName) { //1/30/20 by DW ">
				<outline text="var faClass = &quot;far&quot;;"></outline>
				<outline text="if (iconName == &quot;caret-right&quot;) {">
					<outline text="faClass = &quot;fas&quot;;"></outline>
					<outline text="}"></outline>
					</outline>
				<outline text="if (iconName == &quot;twitter&quot;) {">
					<outline text="faClass = &quot;fab&quot;;"></outline>
					<outline text="}"></outline>
					</outline>
				<outline text="if (iconName == &quot;markdown&quot;) {">
					<outline text="faClass = &quot;fab&quot;;"></outline>
					<outline text="}"></outline>
					</outline>
				<outline text="return (&quot;&lt;i class=\&quot;node-icon &quot; + faClass + &quot; fa-&quot;+ iconName +&quot;\&quot;&gt;&lt;/i&gt;&quot;);"></outline>
				<outline isComment="true" text="return (&quot;&lt;i class=\&quot;node-icon far fa-&quot;+ iconName +&quot;\&quot;&gt;&lt;/i&gt;&quot;);"></outline>
				<outline text="},"></outline>
				</outline>
			<outline text="getKeystroke: function (event) { //2/12/20 by DW">
				<outline text="var concordKeystrokes = {">
					<outline text="&quot;backspace&quot;: &quot;backspace&quot;, "></outline>
					<outline text="&quot;tab&quot;: &quot;tab&quot;,"></outline>
					<outline text="&quot;return&quot;: &quot;return&quot;,"></outline>
					<outline text="&quot;delete&quot;: &quot;delete&quot;,"></outline>
					<outline text="&quot;uparrow&quot;: &quot;cursor-up&quot;,"></outline>
					<outline text="&quot;downarrow&quot;: &quot;cursor-down&quot;,"></outline>
					<outline text="&quot;leftarrow&quot;: &quot;cursor-left&quot;,"></outline>
					<outline text="&quot;rightarrow&quot;: &quot;cursor-right&quot;,"></outline>
					<outline text=""></outline>
					<outline text="&quot;meta-A&quot;: &quot;select-all&quot;,"></outline>
					<outline text="&quot;meta-B&quot;: &quot;bolden&quot;,"></outline>
					<outline text="&quot;meta-C&quot;: &quot;copy&quot;,"></outline>
					<outline text="&quot;meta-D&quot;: &quot;reorg-down&quot;,"></outline>
					<outline text="&quot;meta-F&quot;: &quot;find&quot;, //9/19/13 by DW"></outline>
					<outline text="&quot;meta-I&quot;: &quot;italicize&quot;,"></outline>
					<outline text="&quot;meta-L&quot;: &quot;reorg-left&quot;,"></outline>
					<outline text="&quot;meta-R&quot;: &quot;reorg-right&quot;,"></outline>
					<outline text="&quot;meta-U&quot;: &quot;reorg-up&quot;,"></outline>
					<outline text="&quot;meta-V&quot;: &quot;paste&quot;,"></outline>
					<outline text="&quot;meta-X&quot;: &quot;cut&quot;,"></outline>
					<outline text="&quot;meta-Z&quot;: &quot;undo&quot;,"></outline>
					<outline text=""></outline>
					<outline text="&quot;meta-[&quot;: &quot;promote&quot;,"></outline>
					<outline text="&quot;meta-]&quot;: &quot;demote&quot;,"></outline>
					<outline text=""></outline>
					<outline text="&quot;meta-\\&quot;: &quot;toggle-comment&quot;,"></outline>
					<outline text="&quot;meta-/&quot;: &quot;run-selection&quot;,"></outline>
					<outline text="&quot;meta-`&quot;: &quot;toggle-render&quot;,"></outline>
					<outline text="&quot;meta-,&quot;: &quot;toggle-expand&quot;"></outline>
					<outline text="}"></outline>
					</outline>
				<outline text="function concordMetaizeKeystroke (event) { //9/17/13 by DW">
					<outline isComment="true" text="Changes">
						<outline text="2/17/20; 12:30:26 PM by DW">
							<outline text="Added cases for pageup, pagedown, home and end. "></outline>
							</outline>
						<outline text="2/6/20; 2:01:26 PM by DW">
							<outline text="Add &quot;meta-&quot; if the meta key is down, in all cases. previously we'd only add them for A through Z"></outline>
							</outline>
						</outline>
					<outline text="var flmeta = event.metaKey || event.ctrlKey;"></outline>
					<outline text="function checkspecials (ch) {">
						<outline text="switch (ch) {">
							<outline text="case 8:">
								<outline text="return (&quot;backspace&quot;);"></outline>
								</outline>
							<outline text="case 9:">
								<outline text="return (&quot;tab&quot;);"></outline>
								</outline>
							<outline text="case 13:">
								<outline text="return (&quot;return&quot;);"></outline>
								</outline>
							<outline text="case 33: ">
								<outline text="return (&quot;pageup&quot;);"></outline>
								</outline>
							<outline text="case 34: ">
								<outline text="return (&quot;pagedown&quot;);"></outline>
								</outline>
							<outline text="case 35: ">
								<outline text="return (&quot;end&quot;);"></outline>
								</outline>
							<outline text="case 36: ">
								<outline text="return (&quot;home&quot;);"></outline>
								</outline>
							<outline text="case 37:">
								<outline text="return (&quot;leftarrow&quot;);"></outline>
								</outline>
							<outline text="case 38:">
								<outline text="return (&quot;uparrow&quot;);"></outline>
								</outline>
							<outline text="case 39:">
								<outline text="return (&quot;rightarrow&quot;);"></outline>
								</outline>
							<outline text="case 40:">
								<outline text="return (&quot;downarrow&quot;);"></outline>
								</outline>
							<outline text="case 46:">
								<outline text="return (&quot;delete&quot;);"></outline>
								</outline>
							<outline text="case 188:">
								<outline text="return (&quot;,&quot;);"></outline>
								</outline>
							<outline text="case 190:">
								<outline text="return (&quot;.&quot;);"></outline>
								</outline>
							<outline text="case 191:">
								<outline text="return (&quot;/&quot;);"></outline>
								</outline>
							<outline text="case 192:">
								<outline text="return (&quot;`&quot;);"></outline>
								</outline>
							<outline text="case 219:">
								<outline text="return (&quot;[&quot;);"></outline>
								</outline>
							<outline text="case 220:">
								<outline text="return (&quot;\\&quot;);"></outline>
								</outline>
							<outline text="case 221:">
								<outline text="return (&quot;]&quot;);"></outline>
								</outline>
							<outline text="}"></outline>
							</outline>
						<outline isComment="true" text="switch (ch) {">
							<outline text="case 8:">
								<outline text="return (&quot;backspace&quot;);"></outline>
								</outline>
							<outline text="case 9:">
								<outline text="return (&quot;tab&quot;);"></outline>
								</outline>
							<outline text="case 13:">
								<outline text="return (&quot;return&quot;);"></outline>
								</outline>
							<outline text="case 33: //2/17/20 by DW">
								<outline text="return (&quot;pageup&quot;);"></outline>
								</outline>
							<outline text="case 34: //2/17/20 by DW">
								<outline text="return (&quot;pagedown&quot;);"></outline>
								</outline>
							<outline text="case 35: //2/17/20 by DW">
								<outline text="return (&quot;end&quot;);"></outline>
								</outline>
							<outline text="case 36: //2/17/20 by DW">
								<outline text="return (&quot;home&quot;);"></outline>
								</outline>
							<outline text="case 37:">
								<outline text="return (&quot;leftarrow&quot;);"></outline>
								</outline>
							<outline text="case 38:">
								<outline text="return (&quot;uparrow&quot;);"></outline>
								</outline>
							<outline text="case 39:">
								<outline text="return (&quot;rightarrow&quot;);"></outline>
								</outline>
							<outline text="case 40:">
								<outline text="return (&quot;downarrow&quot;);"></outline>
								</outline>
							<outline text="case 46:">
								<outline text="return (&quot;delete&quot;);"></outline>
								</outline>
							<outline text="case 188:">
								<outline text="if (flmeta) {">
									<outline text="return (&quot;meta-,&quot;);"></outline>
									<outline text="}"></outline>
									</outline>
								</outline>
							<outline text="case 190:">
								<outline text="if (flmeta) {">
									<outline text="return (&quot;meta-.&quot;);"></outline>
									<outline text="}"></outline>
									</outline>
								</outline>
							<outline text="case 191:">
								<outline text="if (flmeta) {">
									<outline text="return (&quot;meta-/&quot;);"></outline>
									<outline text="}"></outline>
									</outline>
								</outline>
							<outline text="case 192:">
								<outline text="if (flmeta) {">
									<outline text="return (&quot;meta-`&quot;);"></outline>
									<outline text="}"></outline>
									</outline>
								</outline>
							<outline text="case 219:">
								<outline text="if (flmeta) {">
									<outline text="return (&quot;meta-[&quot;);"></outline>
									<outline text="}"></outline>
									</outline>
								</outline>
							<outline text="case 220:">
								<outline text="if (flmeta) {">
									<outline text="return (&quot;meta-\\&quot;);"></outline>
									<outline text="}"></outline>
									</outline>
								</outline>
							<outline text="case 221:">
								<outline text="if (flmeta) {">
									<outline text="return (&quot;meta-]&quot;);"></outline>
									<outline text="}"></outline>
									</outline>
								</outline>
							<outline text="}"></outline>
							</outline>
						<outline text="return (ch);"></outline>
						<outline text="}"></outline>
						</outline>
					<outline text="var ch = event.which;"></outline>
					<outline created="Tue, 17 Sep 2013 22:10:20 GMT" pgfnum="30346" text="if ((ch &gt;= 65) &amp;&amp; (ch &lt;= 90)) { //meta-A through meta-Z">
						<outline created="Tue, 17 Sep 2013 22:12:11 GMT" pgfnum="30350" text="if (flmeta) {">
							<outline created="Tue, 17 Sep 2013 22:12:22 GMT" pgfnum="30352" text="return (&quot;meta-&quot; + String.fromCharCode (ch));"></outline>
							<outline created="Tue, 17 Sep 2013 22:12:18 GMT" pgfnum="30351" text="}"></outline>
							</outline>
						<outline created="Tue, 17 Sep 2013 22:10:45 GMT" pgfnum="30349" text="}"></outline>
						</outline>
					<outline created="Tue, 20 Apr 2021 16:51:30 GMT" text="else {">
						<outline created="Tue, 17 Sep 2013 22:10:20 GMT" pgfnum="30346" text="if ((ch &gt;= 48) &amp;&amp; (ch &lt;= 57)) { //meta-0 through meta-9 -- 4/20/21 by DW">
							<outline created="Tue, 17 Sep 2013 22:12:11 GMT" pgfnum="30350" text="if (flmeta) {">
								<outline created="Tue, 17 Sep 2013 22:12:22 GMT" pgfnum="30352" text="return (&quot;meta-&quot; + String.fromCharCode (ch));"></outline>
								<outline created="Tue, 17 Sep 2013 22:12:18 GMT" pgfnum="30351" text="}"></outline>
								</outline>
							<outline created="Tue, 17 Sep 2013 22:10:45 GMT" pgfnum="30349" text="}"></outline>
							</outline>
						<outline created="Tue, 20 Apr 2021 16:51:32 GMT" text="}"></outline>
						</outline>
					<outline text="var s = checkspecials (ch);"></outline>
					<outline text="if (flmeta) {">
						<outline text="return (&quot;meta-&quot; + s);"></outline>
						<outline text="}"></outline>
						</outline>
					<outline text="else {">
						<outline text="return (s);"></outline>
						<outline text="}"></outline>
						</outline>
					<outline text="}"></outline>
					</outline>
				<outline text="var s = concordMetaizeKeystroke (event);"></outline>
				<outline text="if (concordKeystrokes [s] !== undefined) {">
					<outline text="var val = concordKeystrokes [s];"></outline>
					<outline text="if (val.length &gt; 0) { //2/23/14 by DW">
						<outline text="return (val);"></outline>
						<outline text="}"></outline>
						</outline>
					<outline text="}"></outline>
					</outline>
				<outline text="return (s);"></outline>
				<outline text="}"></outline>
				</outline>
			<outline text="};"></outline>
			</outline>
		<outline text="function ConcordOutline(container, options) {">
			<outline text="this.container = container;"></outline>
			<outline text="this.options = options;"></outline>
			<outline text="this.id = null;"></outline>
			<outline text="this.root = null;"></outline>
			<outline text="this.editor = null;"></outline>
			<outline text="this.op = null;"></outline>
			<outline text="this.script = null;"></outline>
			<outline text="this.pasteBin = null;"></outline>
			<outline text="this.pasteBinFocus = function(){">
				<outline text="if(!concord.ready){">
					<outline text="return;"></outline>
					<outline text="}"></outline>
					</outline>
				<outline text="if(concord.mobile){">
					<outline text="return;"></outline>
					<outline text="}"></outline>
					</outline>
				<outline text="if(this.root.is(&quot;:visible&quot;)){">
					<outline text="var node = this.op.getCursor();"></outline>
					<outline text="var nodeOffset = node.offset();"></outline>
					<outline text="this.pasteBin.offset(nodeOffset);"></outline>
					<outline text="this.pasteBin.css(&quot;z-index&quot;,&quot;1000&quot;);"></outline>
					<outline text="if((this.pasteBin.text()==&quot;&quot;)||(this.pasteBin.text()==&quot;\n&quot;)){">
						<outline text="this.pasteBin.text(&quot;...&quot;);"></outline>
						<outline text="}"></outline>
						</outline>
					<outline text="this.op.focusCursor();"></outline>
					<outline text="this.pasteBin.focus();"></outline>
					<outline text="if(this.pasteBin[0] === document.activeElement){">
						<outline text="document.execCommand(&quot;selectAll&quot;);"></outline>
						<outline text="}"></outline>
						</outline>
					<outline text="}"></outline>
					</outline>
				<outline text="};"></outline>
				</outline>
			<outline text="this.callbacks = function(callbacks) {">
				<outline text="if(callbacks) {">
					<outline text="this.root.data(&quot;callbacks&quot;, callbacks);"></outline>
					<outline text="return callbacks;"></outline>
					</outline>
				<outline text="} else {">
					<outline text="if(this.root.data(&quot;callbacks&quot;)) {">
						<outline text="return this.root.data(&quot;callbacks&quot;);"></outline>
						<outline text="} else {">
							<outline text="return {};"></outline>
							<outline text="}"></outline>
							</outline>
						</outline>
					<outline text="}"></outline>
					</outline>
				<outline text="};"></outline>
				</outline>
			<outline text="this.fireCallback = function(name, value) {">
				<outline text="var cb = this.callbacks()[name]"></outline>
				<outline text="if(cb) {">
					<outline text="cb(value);"></outline>
					<outline text="}"></outline>
					</outline>
				<outline text="};"></outline>
				</outline>
			<outline text="this.prefs = function(newprefs) {">
				<outline text="var prefs = this.root.data(&quot;prefs&quot;);"></outline>
				<outline text="if(prefs == undefined){">
					<outline text="prefs = {};"></outline>
					<outline text="}"></outline>
					</outline>
				<outline text="if(newprefs) {">
					<outline text="for(var key in newprefs){">
						<outline text="prefs[key] = newprefs[key];"></outline>
						<outline text="}"></outline>
						</outline>
					<outline text="this.root.data(&quot;prefs&quot;, prefs);"></outline>
					<outline text="if(prefs.readonly){">
						<outline text="this.root.addClass(&quot;readonly&quot;);"></outline>
						<outline text="}"></outline>
						</outline>
					<outline text="if(prefs.renderMode!==undefined){">
						<outline text="this.root.data(&quot;renderMode&quot;, prefs.renderMode);"></outline>
						<outline text="}"></outline>
						</outline>
					<outline text="if(prefs.contextMenu){">
						<outline text="$(prefs.contextMenu).hide();"></outline>
						<outline text="}"></outline>
						</outline>
					<outline text="var style = {};"></outline>
					<outline text="if(prefs.outlineFont) {">
						<outline text="style[&quot;font-family&quot;] = prefs.outlineFont;"></outline>
						<outline text="}"></outline>
						</outline>
					<outline text="if(prefs.outlineFontSize) {">
						<outline text="prefs.outlineFontSize = parseInt(prefs.outlineFontSize);"></outline>
						<outline text="style[&quot;font-size&quot;] = prefs.outlineFontSize + &quot;px&quot;;"></outline>
						<outline text="style[&quot;min-height&quot;] = (prefs.outlineFontSize + 6) + &quot;px&quot;;"></outline>
						<outline text="style[&quot;line-height&quot;] = (prefs.outlineFontSize + 6) + &quot;px&quot;;"></outline>
						<outline text="}"></outline>
						</outline>
					<outline text="if(prefs.outlineLineHeight) {">
						<outline text="prefs.outlineLineHeight = parseInt(prefs.outlineLineHeight);"></outline>
						<outline text="style[&quot;min-height&quot;] = prefs.outlineLineHeight + &quot;px&quot;;"></outline>
						<outline text="style[&quot;line-height&quot;] = prefs.outlineLineHeight + &quot;px&quot;;"></outline>
						<outline text="}"></outline>
						</outline>
					<outline text="this.root.parent().find(&quot;style.prefsStyle&quot;).remove();"></outline>
					<outline text="var css = '&lt;style type=&quot;text/css&quot; class=&quot;prefsStyle&quot;&gt;\n';"></outline>
					<outline text="var cssId=&quot;&quot;;"></outline>
					<outline text="if(this.root.parent().attr(&quot;id&quot;)){">
						<outline text="cssId=&quot;#&quot;+this.root.parent().attr(&quot;id&quot;);"></outline>
						<outline text="}"></outline>
						</outline>
					<outline text="css += cssId + ' .concord .concord-node .concord-wrapper .concord-text {';"></outline>
					<outline text="for(var attribute in style) {">
						<outline text="css += attribute + ': ' + style[attribute] + ';';"></outline>
						<outline text="}"></outline>
						</outline>
					<outline text="css += '}\n';"></outline>
					<outline text="css += cssId + ' .concord .concord-node .concord-wrapper .node-icon {';"></outline>
					<outline text="for(var attribute in style) {">
						<outline text="if(attribute!=&quot;font-family&quot;){">
							<outline text="css += attribute + ': ' + style[attribute] + ';';"></outline>
							<outline text="}"></outline>
							</outline>
						<outline text="}"></outline>
						</outline>
					<outline text="css += '}\n'"></outline>
					<outline text="var wrapperPaddingLeft = prefs.outlineLineHeight;"></outline>
					<outline text="if(wrapperPaddingLeft===undefined){">
						<outline text="wrapperPaddingLeft = prefs.outlineFontSize;"></outline>
						<outline text="}"></outline>
						</outline>
					<outline text="if(wrapperPaddingLeft!== undefined){">
						<outline text="css += cssId + ' .concord .concord-node .concord-wrapper {';"></outline>
						<outline text="css += &quot;padding-left: &quot; + wrapperPaddingLeft + &quot;px&quot;;"></outline>
						<outline text="css += &quot;}\n&quot;;"></outline>
						<outline text="css += cssId + ' .concord ol {';"></outline>
						<outline text="css += &quot;padding-left: &quot; + wrapperPaddingLeft + &quot;px&quot;;"></outline>
						<outline text="css += &quot;}\n&quot;;"></outline>
						<outline text="}"></outline>
						</outline>
					<outline text="css += '&lt;/style&gt;\n';"></outline>
					<outline text="this.root.before(css);"></outline>
					<outline text="if(newprefs.css){">
						<outline text="this.op.setStyle(newprefs.css);"></outline>
						<outline text="}"></outline>
						</outline>
					<outline text="}"></outline>
					</outline>
				<outline text="return prefs;"></outline>
				<outline text="};"></outline>
				</outline>
			<outline text="this.afterInit = function() {">
				<outline text="this.editor = new ConcordEditor(this.root, this);"></outline>
				<outline text="this.op = new ConcordOp(this.root, this);"></outline>
				<outline text="this.script = new ConcordScript(this.root, this);"></outline>
				<outline text="if(options) {">
					<outline text="if(options.prefs) {">
						<outline text="this.prefs(options.prefs);"></outline>
						<outline text="}"></outline>
						</outline>
					<outline text="if(options.open) {">
						<outline text="this.root.data(&quot;open&quot;, options.open);"></outline>
						<outline text="}"></outline>
						</outline>
					<outline text="if(options.save) {">
						<outline text="this.root.data(&quot;save&quot;, options.save);"></outline>
						<outline text="}"></outline>
						</outline>
					<outline text="if(options.callbacks) {">
						<outline text="this.callbacks(options.callbacks);"></outline>
						<outline text="}"></outline>
						</outline>
					<outline text="if(options.id) {">
						<outline text="this.root.data(&quot;id&quot;, options.id);"></outline>
						<outline text="this.open();"></outline>
						<outline text="}"></outline>
						</outline>
					<outline text="}"></outline>
					</outline>
				<outline text="};"></outline>
				</outline>
			<outline text="this.init = function() {">
				<outline text="if($(container).find(&quot;.concord-root:first&quot;).length &gt; 0) {">
					<outline text="this.root = $(container).find(&quot;.concord-root:first&quot;);"></outline>
					<outline text="this.pasteBin = $(container).find(&quot;.pasteBin:first&quot;);"></outline>
					<outline text="this.afterInit();"></outline>
					<outline text="return;"></outline>
					<outline text="}"></outline>
					</outline>
				<outline text="var root = $(&quot;&lt;ol&gt;&lt;/ol&gt;&quot;);"></outline>
				<outline text="root.addClass(&quot;concord concord-root&quot;);"></outline>
				<outline text="root.appendTo(container);"></outline>
				<outline text="this.root = root;"></outline>
				<outline text="var pasteBin = $('&lt;div class=&quot;pasteBin&quot; contenteditable=&quot;true&quot; style=&quot;position: absolute; height: 1px; width:1px; outline:none; overflow:hidden;&quot;&gt;&lt;/div&gt;');"></outline>
				<outline text="pasteBin.appendTo(container);"></outline>
				<outline text="this.pasteBin = pasteBin;"></outline>
				<outline text="this.afterInit();"></outline>
				<outline text="this.events = new ConcordEvents(this.root, this.editor, this.op, this);"></outline>
				<outline text="};"></outline>
				</outline>
			<outline text="this[&quot;new&quot;] = function() {">
				<outline text="this.op.wipe();"></outline>
				<outline text="};"></outline>
				</outline>
			<outline text="this.open = function(cb) {">
				<outline text="var opmlId = this.root.data(&quot;id&quot;);"></outline>
				<outline text="if(!opmlId) {">
					<outline text="return;"></outline>
					<outline text="}"></outline>
					</outline>
				<outline text="var root = this.root;"></outline>
				<outline text="var editor = this.editor;"></outline>
				<outline text="var op = this.op;"></outline>
				<outline text="var openUrl = &quot;http://concord.smallpicture.com/open&quot;;"></outline>
				<outline text="if(root.data(&quot;open&quot;)) {">
					<outline text="openUrl = root.data(&quot;open&quot;);"></outline>
					<outline text="}"></outline>
					</outline>
				<outline text="params = {}"></outline>
				<outline text="if(opmlId.match(/^http.+$/)) {">
					<outline text="params[&quot;url&quot;] = opmlId"></outline>
					<outline text="} else {">
						<outline text="params[&quot;id&quot;] = opmlId"></outline>
						<outline text="}"></outline>
						</outline>
					</outline>
				<outline text="$.ajax({">
					<outline text="type: 'POST',"></outline>
					<outline text="url: openUrl,"></outline>
					<outline text="data: params,"></outline>
					<outline text="dataType: &quot;xml&quot;,"></outline>
					<outline text="success: function(opml) {">
						<outline text="if(opml) {">
							<outline text="op.xmlToOutline(opml);"></outline>
							<outline text="if(cb) {">
								<outline text="cb();"></outline>
								<outline text="}"></outline>
								</outline>
							<outline text="}"></outline>
							</outline>
						<outline text="},"></outline>
						</outline>
					<outline text="error: function() {">
						<outline text="if(root.find(&quot;.concord-node&quot;).length == 0) {">
							<outline text="op.wipe();"></outline>
							<outline text="}"></outline>
							</outline>
						<outline text="}"></outline>
						</outline>
					<outline text="});"></outline>
					</outline>
				<outline text="};"></outline>
				</outline>
			<outline text="this.save = function(cb) {">
				<outline text="var opmlId = this.root.data(&quot;id&quot;);"></outline>
				<outline text="if(opmlId &amp;&amp; this.op.changed()) {">
					<outline text="var saveUrl = &quot;http://concord.smallpicture.com/save&quot;;"></outline>
					<outline text="if(this.root.data(&quot;save&quot;)) {">
						<outline text="saveUrl = this.root.data(&quot;save&quot;);"></outline>
						<outline text="}"></outline>
						</outline>
					<outline text="var concordInstance = this;"></outline>
					<outline text="var opml = this.op.outlineToXml();"></outline>
					<outline text="$.ajax({">
						<outline text="type: 'POST',"></outline>
						<outline text="url: saveUrl,"></outline>
						<outline text="data: {">
							<outline text="&quot;opml&quot;: opml,"></outline>
							<outline text="&quot;id&quot;: opmlId"></outline>
							<outline text="},"></outline>
							</outline>
						<outline text="dataType: &quot;json&quot;,"></outline>
						<outline text="success: function(json) {">
							<outline text="concordInstance.op.clearChanged();"></outline>
							<outline text="if(cb) {">
								<outline text="cb(json);"></outline>
								<outline text="}"></outline>
								</outline>
							<outline text="}"></outline>
							</outline>
						<outline text="});"></outline>
						</outline>
					<outline text="}"></outline>
					</outline>
				<outline text="};"></outline>
				</outline>
			<outline text="this[&quot;import&quot;] = function(opmlId, cb) {">
				<outline text="var openUrl = &quot;http://concordold.smallpicture.com/open&quot;;"></outline>
				<outline text="var root = this.root;"></outline>
				<outline text="var concordInstance = this;"></outline>
				<outline text="if(root.data(&quot;open&quot;)) {">
					<outline text="openUrl = root.data(&quot;open&quot;);"></outline>
					<outline text="}"></outline>
					</outline>
				<outline text="params = {}"></outline>
				<outline text="if(opmlId.match(/^http.+$/)) {">
					<outline text="params[&quot;url&quot;] = opmlId;"></outline>
					<outline text="} else {">
						<outline text="params[&quot;id&quot;] = opmlId;"></outline>
						<outline text="}"></outline>
						</outline>
					</outline>
				<outline text="$.ajax({">
					<outline text="type: 'POST',"></outline>
					<outline text="url: openUrl,"></outline>
					<outline text="data: params,"></outline>
					<outline text="dataType: &quot;xml&quot;,"></outline>
					<outline text="success: function(opml) {">
						<outline text="if(opml) {">
							<outline text="var cursor = root.find(&quot;.concord-cursor:first&quot;);"></outline>
							<outline text="$(opml).find(&quot;body&quot;).children(&quot;outline&quot;).each(function() {">
								<outline text="var node = concordInstance.editor.build($(this));"></outline>
								<outline text="cursor.after(node);"></outline>
								<outline text="cursor = node;"></outline>
								<outline text="});"></outline>
								</outline>
							<outline text="concordInstance.op.markChanged();"></outline>
							<outline text="if(cb) {">
								<outline text="cb();"></outline>
								<outline text="}"></outline>
								</outline>
							<outline text="}"></outline>
							</outline>
						<outline text="},"></outline>
						</outline>
					<outline text="error: function() {">
						<outline text="}"></outline>
						</outline>
					<outline text="});"></outline>
					</outline>
				<outline text="};"></outline>
				</outline>
			<outline text="this[&quot;export&quot;] = function() {">
				<outline text="var context = this.root.find(&quot;.concord-cursor:first&quot;);"></outline>
				<outline text="if(context.length == 0) {">
					<outline text="context = this.root.find(&quot;.concord-root:first&quot;);"></outline>
					<outline text="}"></outline>
					</outline>
				<outline text="return this.editor.opml(context);"></outline>
				<outline text="};"></outline>
				</outline>
			<outline text="this.init();"></outline>
			<outline text="}"></outline>
			</outline>
		<outline text="function ConcordEditor(root, concordInstance) {">
			<outline text="this.makeNode = function(){">
				<outline text="var node = $(&quot;&lt;li&gt;&lt;/li&gt;&quot;);"></outline>
				<outline text="node.addClass(&quot;concord-node&quot;);"></outline>
				<outline text="var wrapper = $(&quot;&lt;div class='concord-wrapper'&gt;&lt;/div&gt;&quot;);"></outline>
				<outline text="var iconName=&quot;caret-right&quot;;"></outline>
				<outline text="var icon = ConcordUtil.getIconHtml (iconName);"></outline>
				<outline text="wrapper.append(icon);"></outline>
				<outline text="wrapper.addClass(&quot;type-icon&quot;);"></outline>
				<outline text="var text = $(&quot;&lt;div class='concord-text' contenteditable='true'&gt;&lt;/div&gt;&quot;);"></outline>
				<outline text="var outline = $(&quot;&lt;ol&gt;&lt;/ol&gt;&quot;);"></outline>
				<outline text="text.appendTo(wrapper);"></outline>
				<outline text="wrapper.appendTo(node);"></outline>
				<outline text="outline.appendTo(node);"></outline>
				<outline text="return node;"></outline>
				<outline text="};"></outline>
				</outline>
			<outline text="this.dragMode = function() {">
				<outline text="root.data(&quot;draggingChange&quot;, root.children().clone(true, true));"></outline>
				<outline text="root.addClass(&quot;dragging&quot;);"></outline>
				<outline text="root.data(&quot;dragging&quot;, true);"></outline>
				<outline text="};"></outline>
				</outline>
			<outline text="this.dragModeExit = function() {">
				<outline text="if(root.data(&quot;dragging&quot;)) {">
					<outline text="concordInstance.op.markChanged();"></outline>
					<outline text="root.data(&quot;change&quot;, root.data(&quot;draggingChange&quot;));"></outline>
					<outline text="root.data(&quot;changeTextMode&quot;, false);"></outline>
					<outline text="root.data(&quot;changeRange&quot;, undefined);"></outline>
					<outline text="}"></outline>
					</outline>
				<outline text="root.find(&quot;.draggable&quot;).removeClass(&quot;draggable&quot;);"></outline>
				<outline text="root.find(&quot;.drop-sibling&quot;).removeClass(&quot;drop-sibling&quot;);"></outline>
				<outline text="root.find(&quot;.drop-child&quot;).removeClass(&quot;drop-child&quot;);"></outline>
				<outline text="root.removeClass(&quot;dragging&quot;);"></outline>
				<outline text="root.data(&quot;dragging&quot;, false);"></outline>
				<outline text="root.data(&quot;mousedown&quot;, false);"></outline>
				<outline text="};"></outline>
				</outline>
			<outline text="this.edit = function(node, empty) {">
				<outline text="var text = node.children(&quot;.concord-wrapper:first&quot;).children(&quot;.concord-text:first&quot;);"></outline>
				<outline text="if(empty) {">
					<outline text="text.html(&quot;&quot;);"></outline>
					<outline text="}"></outline>
					</outline>
				<outline text="text.focus();"></outline>
				<outline text="var el = text.get(0);"></outline>
				<outline text="if(el &amp;&amp; el.childNodes &amp;&amp; el.childNodes[0]){">
					<outline text="if (typeof window.getSelection != &quot;undefined&quot; &amp;&amp; typeof document.createRange != &quot;undefined&quot;) {">
						<outline text="        var range = document.createRange();"></outline>
						<outline text="        range.selectNodeContents(el);"></outline>
						<outline text="        range.collapse(false);"></outline>
						<outline text="        var sel = window.getSelection();"></outline>
						<outline text="        sel.removeAllRanges();"></outline>
						<outline text="        sel.addRange(range);"></outline>
						<outline text="    } else if (typeof document.body.createTextRange != &quot;undefined&quot;) {">
							<outline text="var textRange = document.body.createTextRange();"></outline>
							<outline text="textRange.moveToElementText(el);"></outline>
							<outline text="textRange.collapse(false);"></outline>
							<outline text="        textRange.select();"></outline>
							</outline>
						<outline text="    }"></outline>
						</outline>
					<outline text="}"></outline>
					</outline>
				<outline text="text.addClass(&quot;editing&quot;);"></outline>
				<outline text="if(!empty){">
					<outline text="if(root.find(&quot;.concord-node.dirty&quot;).length&gt;0){">
						<outline text="concordInstance.op.markChanged();"></outline>
						<outline text="}"></outline>
						</outline>
					<outline text="}"></outline>
					</outline>
				<outline text="};"></outline>
				</outline>
			<outline text="this.editable = function(target) {">
				<outline text="var editable = false;"></outline>
				<outline text="if(!target.hasClass(&quot;concord-text&quot;)) {">
					<outline text="target = target.parents(&quot;.concord-text:first&quot;);"></outline>
					<outline text="}"></outline>
					</outline>
				<outline text="if(target.length == 1) {">
					<outline text="editable = target.hasClass(&quot;concord-text&quot;) &amp;&amp; target.hasClass(&quot;editing&quot;);"></outline>
					<outline text="}"></outline>
					</outline>
				<outline text="return editable;"></outline>
				<outline text="};"></outline>
				</outline>
			<outline text="this.editorMode = function() {">
				<outline text="root.find(&quot;.selected&quot;).removeClass(&quot;selected&quot;);"></outline>
				<outline text="root.find(&quot;.editing&quot;).each(function() {">
					<outline text="//$(this).blur();"></outline>
					<outline text="$(this).removeClass(&quot;editing&quot;);"></outline>
					<outline text="});"></outline>
					</outline>
				<outline text="root.find(&quot;.selection-toolbar&quot;).remove();"></outline>
				<outline text="};"></outline>
				</outline>
			<outline text="this.opml = function(_root, flsubsonly) {">
				<outline text=""></outline>
				<outline text="if (flsubsonly == undefined) { //8/5/13 by DW">
					<outline text="flsubsonly = false;"></outline>
					<outline text="}"></outline>
					</outline>
				<outline text=""></outline>
				<outline text="if(_root) {">
					<outline text="root = _root;"></outline>
					<outline text="}"></outline>
					</outline>
				<outline text="var title = root.data(&quot;title&quot;);"></outline>
				<outline text="if(!title) {">
					<outline text="if(root.hasClass(&quot;concord-node&quot;)) {">
						<outline text="title = root.children(&quot;.concord-wrapper:first&quot;).children(&quot;.concord-text:first&quot;).text();"></outline>
						<outline text="}"></outline>
						</outline>
					<outline text="else {">
						<outline text="title = &quot;&quot;;"></outline>
						<outline text="}"></outline>
						</outline>
					<outline text="}"></outline>
					</outline>
				<outline text="var opml = '&lt;?xml version=&quot;1.0&quot;?&gt;\n';"></outline>
				<outline text="opml += '&lt;opml version=&quot;2.0&quot;&gt;\n';"></outline>
				<outline text="opml += '&lt;head&gt;\n';"></outline>
				<outline text="opml += '&lt;title&gt;' + ConcordUtil.escapeXml(title) + '&lt;/title&gt;\n';"></outline>
				<outline text="opml += '&lt;/head&gt;\n';"></outline>
				<outline text="opml += '&lt;body&gt;\n';"></outline>
				<outline text="if(root.hasClass(&quot;concord-cursor&quot;)) {">
					<outline text="opml += this.opmlLine(root, 0, flsubsonly);"></outline>
					<outline text="} else {">
						<outline text="var editor = this;"></outline>
						<outline text="root.children(&quot;.concord-node&quot;).each(function() {">
							<outline text="opml += editor.opmlLine($(this));"></outline>
							<outline text="});"></outline>
							</outline>
						<outline text="}"></outline>
						</outline>
					</outline>
				<outline text="opml += '&lt;/body&gt;\n';"></outline>
				<outline text="opml += '&lt;/opml&gt;\n';"></outline>
				<outline text="return opml;"></outline>
				<outline text="};"></outline>
				</outline>
			<outline text="this.opmlLine = function(node, indent, flsubsonly) {">
				<outline text="if(indent==undefined){">
					<outline text="indent=0;"></outline>
					<outline text="}"></outline>
					</outline>
				<outline text=""></outline>
				<outline text="if (flsubsonly == undefined) { //8/5/13 by DW">
					<outline text="flsubsonly = false;"></outline>
					<outline text="}"></outline>
					</outline>
				<outline text=""></outline>
				<outline text="var text = this.unescape(node.children(&quot;.concord-wrapper:first&quot;).children(&quot;.concord-text:first&quot;).html());"></outline>
				<outline text="var textMatches = text.match(/^(.+)&lt;br&gt;\s*$/);"></outline>
				<outline text="if(textMatches){">
					<outline text="text = textMatches[1];"></outline>
					<outline text="}"></outline>
					</outline>
				<outline text="var opml = '';"></outline>
				<outline text="for(var i=0; i &lt; indent;i++){">
					<outline text="opml += '\t';"></outline>
					<outline text="}"></outline>
					</outline>
				<outline text=""></outline>
				<outline text="var subheads; "></outline>
				<outline text="if (!flsubsonly) { //8/5/13 by DW">
					<outline text="opml += '&lt;outline text=&quot;' + ConcordUtil.escapeXml(text) + '&quot;';"></outline>
					<outline text="var attributes = node.data(&quot;attributes&quot;);"></outline>
					<outline text="if(attributes===undefined){">
						<outline text="attributes={};"></outline>
						<outline text="}"></outline>
						</outline>
					<outline text="for(var name in attributes){">
						<outline text="if((name!==undefined) &amp;&amp; (name!=&quot;&quot;) &amp;&amp; (name != &quot;text&quot;)) {">
							<outline text="if(attributes[name]!==undefined){">
								<outline text="opml += ' ' + name + '=&quot;' + ConcordUtil.escapeXml(attributes[name]) + '&quot;';"></outline>
								<outline text="}"></outline>
								</outline>
							<outline text="}"></outline>
							</outline>
						<outline text="}"></outline>
						</outline>
					<outline text="subheads = node.children(&quot;ol&quot;).children(&quot;.concord-node&quot;);"></outline>
					<outline text="if(subheads.length==0){">
						<outline text="opml+=&quot;/&gt;\n&quot;;"></outline>
						<outline text="return opml;"></outline>
						<outline text="}"></outline>
						</outline>
					<outline text="opml += &quot;&gt;\n&quot;;"></outline>
					<outline text="}"></outline>
					</outline>
				<outline text="else {">
					<outline text="subheads = node.children(&quot;ol&quot;).children(&quot;.concord-node&quot;);"></outline>
					<outline text="}"></outline>
					</outline>
				<outline text=""></outline>
				<outline text="var editor = this;"></outline>
				<outline text="indent++;"></outline>
				<outline text="subheads.each(function() {">
					<outline text="opml += editor.opmlLine($(this), indent);"></outline>
					<outline text="});"></outline>
					</outline>
				<outline text=""></outline>
				<outline text="if (!flsubsonly) { //8/5/13 by DW">
					<outline text="for(var i=0; i &lt; indent;i++){">
						<outline text="opml += '\t';"></outline>
						<outline text="}"></outline>
						</outline>
					<outline text="opml += '&lt;/outline&gt;\n';"></outline>
					<outline text="}"></outline>
					</outline>
				<outline text=""></outline>
				<outline text="return opml;"></outline>
				<outline text="};"></outline>
				</outline>
			<outline text="this.textLine = function(node, indent){">
				<outline text="if(!indent){">
					<outline text="indent = 0;"></outline>
					<outline text="}"></outline>
					</outline>
				<outline text="var text = &quot;&quot;;"></outline>
				<outline text="for(var i=0; i &lt; indent;i++){">
					<outline text="text += &quot;\t&quot;;"></outline>
					<outline text="}"></outline>
					</outline>
				<outline text="text += this.unescape(node.children(&quot;.concord-wrapper:first&quot;).children(&quot;.concord-text:first&quot;).html());"></outline>
				<outline text="text += &quot;\n&quot;;"></outline>
				<outline text="var editor = this;"></outline>
				<outline text="node.children(&quot;ol&quot;).children(&quot;.concord-node&quot;).each(function() {">
					<outline text="text += editor.textLine($(this), indent+1);"></outline>
					<outline text="});"></outline>
					</outline>
				<outline text="return text;"></outline>
				<outline text="};"></outline>
				</outline>
			<outline text="this.select = function(node, multiple, multipleRange) {">
				<outline text="if(multiple == undefined) {">
					<outline text="multiple = false;"></outline>
					<outline text="}"></outline>
					</outline>
				<outline text="if(multipleRange == undefined) {">
					<outline text="multipleRange = false;"></outline>
					<outline text="}"></outline>
					</outline>
				<outline text="if(node.length == 1) {">
					<outline text="this.selectionMode(multiple);"></outline>
					<outline text="if(multiple){">
						<outline text="node.parents(&quot;.concord-node.selected&quot;).removeClass(&quot;selected&quot;);"></outline>
						<outline text="node.find(&quot;.concord-node.selected&quot;).removeClass(&quot;selected&quot;);"></outline>
						<outline text="}"></outline>
						</outline>
					<outline text="if(multiple &amp;&amp; multipleRange) {">
						<outline text="var prevNodes = node.prevAll(&quot;.selected&quot;);"></outline>
						<outline text="if(prevNodes.length &gt; 0) {">
							<outline text="var stamp = false;"></outline>
							<outline text="node.prevAll().reverse().each(function() {">
								<outline text="if($(this).hasClass(&quot;selected&quot;)) {">
									<outline text="stamp = true;"></outline>
									<outline text="} else if(stamp) {">
										<outline text="$(this).addClass(&quot;selected&quot;);"></outline>
										<outline text="}"></outline>
										</outline>
									</outline>
								<outline text="});"></outline>
								</outline>
							<outline text="} else {">
								<outline text="var nextNodes = node.nextAll(&quot;.selected&quot;);"></outline>
								<outline text="if(nextNodes.length &gt; 0) {">
									<outline text="var stamp = true;"></outline>
									<outline text="node.nextAll().each(function() {">
										<outline text="if($(this).hasClass(&quot;selected&quot;)) {">
											<outline text="stamp = false;"></outline>
											<outline text="} else if(stamp) {">
												<outline text="$(this).addClass(&quot;selected&quot;);"></outline>
												<outline text="}"></outline>
												</outline>
											</outline>
										<outline text="});"></outline>
										</outline>
									<outline text="}"></outline>
									</outline>
								<outline text="}"></outline>
								</outline>
							</outline>
						<outline text="}"></outline>
						</outline>
					<outline text="var text = node.children(&quot;.concord-wrapper:first&quot;).children(&quot;.concord-text:first&quot;);"></outline>
					<outline text="if(text.hasClass(&quot;editing&quot;)) {">
						<outline text="text.removeClass(&quot;editing&quot;);"></outline>
						<outline text="}"></outline>
						</outline>
					<outline text="//text.blur();"></outline>
					<outline text="node.addClass(&quot;selected&quot;);"></outline>
					<outline text="if(text.text().length&gt;0){">
						<outline text="//root.data(&quot;currentChange&quot;, root.children().clone());"></outline>
						<outline text="}"></outline>
						</outline>
					<outline text="this.dragModeExit();"></outline>
					<outline text="}"></outline>
					</outline>
				<outline text="if(root.find(&quot;.concord-node.dirty&quot;).length&gt;0){">
					<outline text="concordInstance.op.markChanged();"></outline>
					<outline text="}"></outline>
					</outline>
				<outline text="};"></outline>
				</outline>
			<outline text="this.selectionMode = function(multiple) {">
				<outline text="if(multiple == undefined) {">
					<outline text="multiple = false;"></outline>
					<outline text="}"></outline>
					</outline>
				<outline text="var node = root.find(&quot;.concord-cursor&quot;);"></outline>
				<outline text="if(node.length == 1) {">
					<outline text="var text = node.children(&quot;.concord-wrapper:first&quot;).children(&quot;.concord-text:first&quot;);"></outline>
					<outline text="if(text.length == 1) {">
						<outline text="//text.blur();"></outline>
						<outline text="}"></outline>
						</outline>
					<outline text="}"></outline>
					</outline>
				<outline text="if(!multiple) {">
					<outline text="root.find(&quot;.selected&quot;).removeClass(&quot;selected&quot;);"></outline>
					<outline text="}"></outline>
					</outline>
				<outline text="root.find(&quot;.selection-toolbar&quot;).remove();"></outline>
				<outline text="};"></outline>
				</outline>
			<outline text="this.build = function(outline,collapsed, level, flInsertRawHtml) { //9/18/20 by DW -- new optional param, flInsertRawHtml">
				<outline text="if(!level){">
					<outline text="level = 1;"></outline>
					<outline text="}"></outline>
					</outline>
				<outline text="var node = $(&quot;&lt;li&gt;&lt;/li&gt;&quot;);"></outline>
				<outline text="node.addClass(&quot;concord-node&quot;);"></outline>
				<outline text="node.addClass(&quot;concord-level-&quot;+level);"></outline>
				<outline text="var attributes = {};"></outline>
				<outline text="$(outline[0].attributes).each(function() {">
					<outline text="if(this.name != 'text') {">
						<outline text="attributes[this.name] = this.value;"></outline>
						<outline text="if(this.name==&quot;type&quot;){">
							<outline text="node.attr(&quot;opml-&quot; + this.name, this.value);"></outline>
							<outline text="}"></outline>
							</outline>
						<outline text="}"></outline>
						</outline>
					<outline text="});"></outline>
					</outline>
				<outline text="node.data(&quot;attributes&quot;, attributes);"></outline>
				<outline text="var wrapper = $(&quot;&lt;div class='concord-wrapper'&gt;&lt;/div&gt;&quot;);"></outline>
				<outline text="var nodeIcon = attributes[&quot;icon&quot;];"></outline>
				<outline text="if(!nodeIcon){">
					<outline text="nodeIcon = attributes[&quot;type&quot;];"></outline>
					<outline text="}"></outline>
					</outline>
				<outline text="var iconName=&quot;caret-right&quot;;"></outline>
				<outline text="if(nodeIcon){">
					<outline text="if((nodeIcon==node.attr(&quot;opml-type&quot;)) &amp;&amp; concordInstance.prefs() &amp;&amp; concordInstance.prefs().typeIcons &amp;&amp; concordInstance.prefs().typeIcons[nodeIcon]){">
						<outline text="iconName = concordInstance.prefs().typeIcons[nodeIcon];"></outline>
						<outline text="}else if (nodeIcon==attributes[&quot;icon&quot;]){">
							<outline text="iconName = nodeIcon;"></outline>
							<outline text="}"></outline>
							</outline>
						</outline>
					<outline text="}"></outline>
					</outline>
				<outline text="var icon = ConcordUtil.getIconHtml (iconName);"></outline>
				<outline isComment="true" text="var icon = &quot;&lt;i&quot;+&quot; class=\&quot;node-icon fa fa-&quot;+ iconName +&quot;\&quot;&gt;&lt;&quot;+&quot;/i&gt;&quot;;"></outline>
				<outline text="wrapper.append(icon);"></outline>
				<outline text="wrapper.addClass(&quot;type-icon&quot;);"></outline>
				<outline text="if(attributes[&quot;isComment&quot;]==&quot;true&quot;){">
					<outline text="node.addClass(&quot;concord-comment&quot;);"></outline>
					<outline text="}"></outline>
					</outline>
				<outline text="var text = $(&quot;&lt;div class='concord-text' contenteditable='true'&gt;&lt;/div&gt;&quot;);"></outline>
				<outline text="text.addClass(&quot;concord-level-&quot;+level+&quot;-text&quot;);"></outline>
				<outline text=""></outline>
				<outline text="//9/18/20 by DW -- option to insert without escaping">
					<outline text="var textToInsert;"></outline>
					<outline text="if (flInsertRawHtml) {">
						<outline text="textToInsert = outline.attr ('text'); "></outline>
						<outline text="}"></outline>
						</outline>
					<outline text="else {">
						<outline text="textToInsert = this.escape (outline.attr ('text')); "></outline>
						<outline text="}"></outline>
						</outline>
					<outline text="text.html (textToInsert);"></outline>
					</outline>
				<outline text=""></outline>
				<outline text="if(attributes[&quot;cssTextClass&quot;]!==undefined){">
					<outline text="var cssClasses = attributes[&quot;cssTextClass&quot;].split(/\s+/);"></outline>
					<outline text="for(var c in cssClasses){">
						<outline text="var newClass = cssClasses[c];"></outline>
						<outline text="text.addClass(newClass);"></outline>
						<outline text="}"></outline>
						</outline>
					<outline text="}"></outline>
					</outline>
				<outline text="var children = $(&quot;&lt;ol&gt;&lt;/ol&gt;&quot;);"></outline>
				<outline text="var editor = this;"></outline>
				<outline text="outline.children(&quot;outline&quot;).each(function() {">
					<outline text="var child = editor.build($(this), collapsed, level+1, flInsertRawHtml);"></outline>
					<outline text="child.appendTo(children);"></outline>
					<outline text="});"></outline>
					</outline>
				<outline text="if(collapsed){">
					<outline text="if(outline.children(&quot;outline&quot;).size()&gt;0){">
						<outline text="node.addClass(&quot;collapsed&quot;);"></outline>
						<outline text="}"></outline>
						</outline>
					<outline text="}"></outline>
					</outline>
				<outline text="text.appendTo(wrapper);"></outline>
				<outline text="wrapper.appendTo(node);"></outline>
				<outline text="children.appendTo(node);"></outline>
				<outline text="return node;"></outline>
				<outline text="};"></outline>
				</outline>
			<outline text="this.hideContextMenu = function(){">
				<outline text="if(root.data(&quot;dropdown&quot;)){">
					<outline text="root.data(&quot;dropdown&quot;).hide();"></outline>
					<outline text="root.data(&quot;dropdown&quot;).remove();"></outline>
					<outline text="root.removeData(&quot;dropdown&quot;);"></outline>
					<outline text="}"></outline>
					</outline>
				<outline text="};"></outline>
				</outline>
			<outline text="this.showContextMenu = function(x,y){">
				<outline text="if(concordInstance.prefs().contextMenu){">
					<outline text="this.hideContextMenu();"></outline>
					<outline text="root.data(&quot;dropdown&quot;, $(concordInstance.prefs().contextMenu).clone().appendTo(concordInstance.container));"></outline>
					<outline text="var editor = this;"></outline>
					<outline text="root.data(&quot;dropdown&quot;).on(&quot;click&quot;, &quot;a&quot;, function(event){">
						<outline text="editor.hideContextMenu();"></outline>
						<outline text="});"></outline>
						</outline>
					<outline text="root.data(&quot;dropdown&quot;).css({&quot;position&quot; : &quot;absolute&quot;, &quot;top&quot; : y +&quot;px&quot;, &quot;left&quot; : x + &quot;px&quot;, &quot;cursor&quot; : &quot;default&quot;});"></outline>
					<outline text="root.data(&quot;dropdown&quot;).show();"></outline>
					<outline text="}"></outline>
					</outline>
				<outline text="};"></outline>
				</outline>
			<outline text="this.sanitize = function(){">
				<outline text="var editor = this;"></outline>
				<outline text="root.find(&quot;.concord-text.paste&quot;).each(function(){">
					<outline text="var concordText = $(this);"></outline>
					<outline text="if(concordInstance.pasteBin.text()==&quot;...&quot;){">
						<outline text="return;"></outline>
						<outline text="}"></outline>
						</outline>
					<outline text="var h = concordInstance.pasteBin.html();"></outline>
					<outline text="h = h.replace(new RegExp(&quot;&lt;(div|p|blockquote|pre|li|br|dd|dt|code|h\\d)[^&gt;]*(/)?&gt;&quot;,&quot;gi&quot;),&quot;\n&quot;);"></outline>
					<outline text="h = $(&quot;&lt;div/&gt;&quot;).html(h).text();"></outline>
					<outline text="var clipboardMatch = false;"></outline>
					<outline text="if(concordClipboard !== undefined){">
						<outline text="var trimmedClipboardText = concordClipboard.text.replace(/^[\s\r\n]+|[\s\r\n]+$/g,'');"></outline>
						<outline text="var trimmedPasteText = h.replace(/^[\s\r\n]+|[\s\r\n]+$/g,'');"></outline>
						<outline text="if(trimmedClipboardText==trimmedPasteText){">
							<outline text="var clipboardNodes = concordClipboard.data;"></outline>
							<outline text="if(clipboardNodes){">
								<outline text="var collapseNode = function(node){">
									<outline text="node.find(&quot;ol&quot;).each(function() {">
										<outline text="if($(this).children().length &gt; 0) {">
											<outline text="$(this).parent().addClass(&quot;collapsed&quot;);"></outline>
											<outline text="}"></outline>
											</outline>
										<outline text="});"></outline>
										</outline>
									<outline text="};"></outline>
									</outline>
								<outline text="clipboardNodes.each(function(){">
									<outline text="collapseNode($(this));"></outline>
									<outline text="});"></outline>
									</outline>
								<outline text="root.data(&quot;clipboard&quot;, clipboardNodes);"></outline>
								<outline text="concordInstance.op.setTextMode(false);"></outline>
								<outline text="concordInstance.op.paste();"></outline>
								<outline text="clipboardMatch = true;"></outline>
								<outline text="}"></outline>
								</outline>
							<outline text="}"></outline>
							</outline>
						<outline text="}"></outline>
						</outline>
					<outline text="if(!clipboardMatch){">
						<outline text="concordClipboard = undefined;"></outline>
						<outline text="var numberoflines = 0;"></outline>
						<outline text="var lines = h.split(&quot;\n&quot;);"></outline>
						<outline text="for(var i = 0; i &lt; lines.length; i++){">
							<outline text="var line = lines[i];"></outline>
							<outline text="if((line!=&quot;&quot;) &amp;&amp; !line.match(/^\s+$/)){">
								<outline text="numberoflines++;"></outline>
								<outline text="}"></outline>
								</outline>
							<outline text="}"></outline>
							</outline>
						<outline text="if(!concordInstance.op.inTextMode() || (numberoflines &gt; 1)){">
							<outline text="concordInstance.op.insertText(h);"></outline>
							<outline text="}else{">
								<outline text="concordInstance.op.saveState();"></outline>
								<outline text="concordText.focus();"></outline>
								<outline text="var range = concordText.parents(&quot;.concord-node:first&quot;).data(&quot;range&quot;);"></outline>
								<outline text="if(range){">
									<outline text="try{">
										<outline text="var sel = window.getSelection();"></outline>
										<outline text="sel.removeAllRanges();"></outline>
										<outline text="sel.addRange(range);"></outline>
										<outline text="}"></outline>
										</outline>
									<outline text="catch(e){">
										<outline text="console.log(e);"></outline>
										<outline text="}"></outline>
										</outline>
									<outline text="finally {">
										<outline text="concordText.parents(&quot;.concord-node:first&quot;).removeData(&quot;range&quot;);"></outline>
										<outline text="}"></outline>
										</outline>
									<outline text="}"></outline>
									</outline>
								<outline text="document.execCommand(&quot;insertText&quot;,null,h);"></outline>
								<outline text="concordInstance.root.removeData(&quot;clipboard&quot;);"></outline>
								<outline text="concordInstance.op.markChanged();"></outline>
								<outline text="}"></outline>
								</outline>
							</outline>
						<outline text="}"></outline>
						</outline>
					<outline text="concordText.removeClass(&quot;paste&quot;);"></outline>
					<outline text="});"></outline>
					</outline>
				<outline text="};"></outline>
				</outline>
			<outline text="this.escape = function(s){">
				<outline text="var h = $(&quot;&lt;div/&gt;&quot;).text(s).html();"></outline>
				<outline text="h = h.replace(/\u00A0/g, &quot; &quot;);"></outline>
				<outline text="if(concordInstance.op.getRenderMode()){ // Render HTML if op.getRenderMode() returns true - 2/17/13 by KS">
					<outline text="var allowedTags = [&quot;b&quot;,&quot;strong&quot;,&quot;i&quot;,&quot;em&quot;,&quot;a&quot;,&quot;img&quot;,&quot;strike&quot;,&quot;del&quot;];"></outline>
					<outline text="for(var tagIndex in allowedTags){">
						<outline text="var tag = allowedTags[tagIndex];"></outline>
						<outline text="if (tag == &quot;img&quot;){">
							<outline text="h = h.replace(new RegExp(&quot;&amp;lt;&quot;+tag+&quot;((?!&amp;gt;).+)(/)?&amp;gt;&quot;,&quot;gi&quot;),&quot;&lt;&quot;+tag+&quot;$1&quot;+&quot;/&gt;&quot;);"></outline>
							<outline text="}"></outline>
							</outline>
						<outline text="else if (tag==&quot;a&quot;){">
							<outline text="h = h.replace(new RegExp(&quot;&amp;lt;&quot;+tag+&quot;((?!&amp;gt;).*?)&amp;gt;((?!&amp;lt;/&quot;+tag+&quot;&amp;gt;).+?)&amp;lt;/&quot;+tag+&quot;&amp;gt;&quot;,&quot;gi&quot;),&quot;&lt;&quot;+tag+&quot;$1&quot;+&quot;&gt;$2&quot;+&quot;&lt;&quot;+&quot;/&quot;+tag+&quot;&gt;&quot;);"></outline>
							<outline text="}"></outline>
							</outline>
						<outline text="else {">
							<outline text="h = h.replace(new RegExp(&quot;&amp;lt;&quot;+tag+&quot;&amp;gt;((?!&amp;lt;/&quot;+tag+&quot;&amp;gt;).+?)&amp;lt;/&quot;+tag+&quot;&amp;gt;&quot;,&quot;gi&quot;),&quot;&lt;&quot;+tag+&quot;&gt;$1&quot;+&quot;&lt;&quot;+&quot;/&quot;+tag+&quot;&gt;&quot;);"></outline>
							<outline text="}"></outline>
							</outline>
						<outline text="}"></outline>
						</outline>
					<outline text="}"></outline>
					</outline>
				<outline text="return h;"></outline>
				<outline text="};"></outline>
				</outline>
			<outline text="this.unescape = function(s){">
				<outline text="var h = s.replace(/&lt;/g,&quot;&amp;lt;&quot;).replace(/&gt;/g,&quot;&amp;gt;&quot;);"></outline>
				<outline text="h = $(&quot;&lt;div/&gt;&quot;).html(h).text();"></outline>
				<outline text="return h;"></outline>
				<outline text="};"></outline>
				</outline>
			<outline text="this.getSelection = function(){">
				<outline text="var range = undefined;"></outline>
				<outline text="if(window.getSelection){">
					<outline text="sel = window.getSelection();"></outline>
					<outline text="if(sel.getRangeAt &amp;&amp; sel.rangeCount){">
						<outline text="range = sel.getRangeAt(0);"></outline>
						<outline text="if($(range.startContainer).parents(&quot;.concord-node:first&quot;).length==0){">
							<outline text="range = undefined;"></outline>
							<outline text="}"></outline>
							</outline>
						<outline text="}"></outline>
						</outline>
					<outline text="}"></outline>
					</outline>
				<outline text="return range;"></outline>
				<outline text="};"></outline>
				</outline>
			<outline text="this.saveSelection = function(){">
				<outline text="var range = this.getSelection();"></outline>
				<outline text="if(range !== undefined){">
					<outline text="concordInstance.op.getCursor().data(&quot;range&quot;, range.cloneRange());"></outline>
					<outline text="}"></outline>
					</outline>
				<outline text="return range;"></outline>
				<outline text="};"></outline>
				</outline>
			<outline text="this.restoreSelection = function(range){">
				<outline text="var cursor = concordInstance.op.getCursor();"></outline>
				<outline text="if(range===undefined){">
					<outline text="range = cursor.data(&quot;range&quot;);"></outline>
					<outline text="}"></outline>
					</outline>
				<outline text="if(range !== undefined){">
					<outline text="if(window.getSelection){">
						<outline text="var concordText = cursor.children(&quot;.concord-wrapper&quot;).children(&quot;.concord-text&quot;);"></outline>
						<outline text="try{">
							<outline text="var cloneRanger = range.cloneRange();"></outline>
							<outline text="var sel = window.getSelection();"></outline>
							<outline text="sel.removeAllRanges();"></outline>
							<outline text="sel.addRange(cloneRanger);"></outline>
							<outline text="}"></outline>
							</outline>
						<outline text="catch(e){">
							<outline text="console.log(e);"></outline>
							<outline text="}"></outline>
							</outline>
						<outline text="finally {">
							<outline text="cursor.removeData(&quot;range&quot;);"></outline>
							<outline text="}"></outline>
							</outline>
						<outline text="}"></outline>
						</outline>
					<outline text="}"></outline>
					</outline>
				<outline text="return range;"></outline>
				<outline text="};"></outline>
				</outline>
			<outline text="this.recalculateLevels = function(context){">
				<outline text="if(!context){">
					<outline text="context = root.find(&quot;.concord-node&quot;);"></outline>
					<outline text="}"></outline>
					</outline>
				<outline text="context.each(function(){">
					<outline text="var text = $(this).children(&quot;.concord-wrapper&quot;).children(&quot;.concord-text&quot;);"></outline>
					<outline text="var levelMatch = $(this).attr(&quot;class&quot;).match(/.*concord-level-(\d+).*/);"></outline>
					<outline text="if(levelMatch){">
						<outline text="$(this).removeClass(&quot;concord-level-&quot;+levelMatch[1]);"></outline>
						<outline text="text.removeClass(&quot;concord-level-&quot;+levelMatch[1]+&quot;-text&quot;);"></outline>
						<outline text="}"></outline>
						</outline>
					<outline text="var level = $(this).parents(&quot;.concord-node&quot;).length+1;"></outline>
					<outline text="$(this).addClass(&quot;concord-level-&quot;+level);"></outline>
					<outline text="text.addClass(&quot;concord-level-&quot;+level+&quot;-text&quot;);"></outline>
					<outline text="});"></outline>
					</outline>
				<outline text="};"></outline>
				</outline>
			<outline text="}"></outline>
			</outline>
		<outline text="function ConcordEvents(root, editor, op, concordInstance) {">
			<outline text="var instance = this;"></outline>
			<outline text="this.wrapperDoubleClick = function(event) {">
				<outline text="if(!concord.handleEvents){">
					<outline text="return;"></outline>
					<outline text="}"></outline>
					</outline>
				<outline text="if(root.data(&quot;dropdown&quot;)){">
					<outline text="editor.hideContextMenu();"></outline>
					<outline text="return;"></outline>
					<outline text="}"></outline>
					</outline>
				<outline text="if(!editor.editable($(event.target))) {">
					<outline text="var wrapper = $(event.target);"></outline>
					<outline text="if(wrapper.hasClass(&quot;node-icon&quot;)){">
						<outline text="wrapper = wrapper.parent();"></outline>
						<outline text="}"></outline>
						</outline>
					<outline text="if(wrapper.hasClass(&quot;concord-wrapper&quot;)) {">
						<outline text="event.stopPropagation();"></outline>
						<outline text="var node = wrapper.parents(&quot;.concord-node:first&quot;);"></outline>
						<outline text="op.setTextMode(false);"></outline>
						<outline text="if(op.subsExpanded()) {">
							<outline text="op.collapse();"></outline>
							<outline text="} else {">
								<outline text="op.expand();"></outline>
								<outline text="}"></outline>
								</outline>
							</outline>
						<outline text="}"></outline>
						</outline>
					<outline text="}"></outline>
					</outline>
				<outline text="};"></outline>
				</outline>
			<outline text="this.clickSelect = function(event) {">
				<outline text="if(!concord.handleEvents){">
					<outline text="return;"></outline>
					<outline text="}"></outline>
					</outline>
				<outline text="if(root.data(&quot;dropdown&quot;)){">
					<outline text="event.stopPropagation();"></outline>
					<outline text="editor.hideContextMenu();"></outline>
					<outline text="return;"></outline>
					<outline text="}"></outline>
					</outline>
				<outline text="if(concord.mobile){">
					<outline text="var node = $(event.target);"></outline>
					<outline text="if(concordInstance.op.getCursor()[0]===node[0]){">
						<outline text="instance.doubleClick(event);"></outline>
						<outline text="return;"></outline>
						<outline text="}"></outline>
						</outline>
					<outline text="}"></outline>
					</outline>
				<outline text="if((event.which==1) &amp;&amp; !editor.editable($(event.target))) {">
					<outline text="var node = $(event.target);"></outline>
					<outline text="if(!node.hasClass(&quot;concord-node&quot;)){">
						<outline text="return;"></outline>
						<outline text="}"></outline>
						</outline>
					<outline text="if(node.length==1) {">
						<outline text="event.stopPropagation();"></outline>
						<outline text="if(event.shiftKey &amp;&amp; (node.parents(&quot;.concord-node.selected&quot;).length&gt;0)){">
							<outline text="return;"></outline>
							<outline text="}"></outline>
							</outline>
						<outline text="op.setTextMode(false);"></outline>
						<outline text="op.setCursor(node, event.shiftKey || event.metaKey, event.shiftKey);"></outline>
						<outline text="}"></outline>
						</outline>
					<outline text="}"></outline>
					</outline>
				<outline text="};"></outline>
				</outline>
			<outline text="this.doubleClick = function(event) {">
				<outline text="if(!concord.handleEvents){">
					<outline text="return;"></outline>
					<outline text="}"></outline>
					</outline>
				<outline text="if(root.data(&quot;dropdown&quot;)){">
					<outline text="editor.hideContextMenu();"></outline>
					<outline text="return;"></outline>
					<outline text="}"></outline>
					</outline>
				<outline text="if(!editor.editable($(event.target))) {">
					<outline text="var node = $(event.target);"></outline>
					<outline text="if(node.hasClass(&quot;concord-node&quot;) &amp;&amp; node.hasClass(&quot;concord-cursor&quot;)) {">
						<outline text="event.stopPropagation();"></outline>
						<outline text="op.setTextMode(false);"></outline>
						<outline text="op.setCursor(node);"></outline>
						<outline text="if(op.subsExpanded()) {">
							<outline text="op.collapse();"></outline>
							<outline text="} else {">
								<outline text="op.expand();"></outline>
								<outline text="}"></outline>
								</outline>
							</outline>
						<outline text="}"></outline>
						</outline>
					<outline text="}"></outline>
					</outline>
				<outline text="};"></outline>
				</outline>
			<outline text="this.wrapperClickSelect = function(event) {">
				<outline text="if(!concord.handleEvents){">
					<outline text="return;"></outline>
					<outline text="}"></outline>
					</outline>
				<outline text="if(root.data(&quot;dropdown&quot;)){">
					<outline text="editor.hideContextMenu();"></outline>
					<outline text="return;"></outline>
					<outline text="}"></outline>
					</outline>
				<outline text="if(concord.mobile){">
					<outline text="var target = $(event.target);"></outline>
					<outline text="var node = target.parents(&quot;.concord-node:first&quot;);"></outline>
					<outline text="if(concordInstance.op.getCursor()[0]===node[0]){">
						<outline text="instance.wrapperDoubleClick(event);"></outline>
						<outline text="return;"></outline>
						<outline text="}"></outline>
						</outline>
					<outline text="}"></outline>
					</outline>
				<outline text="if((event.which==1) &amp;&amp; !editor.editable($(event.target))) {">
					<outline text="var wrapper = $(event.target);"></outline>
					<outline text="if(wrapper.hasClass(&quot;node-icon&quot;)){">
						<outline text="wrapper = wrapper.parent();"></outline>
						<outline text="}"></outline>
						</outline>
					<outline text="if(wrapper.hasClass(&quot;concord-wrapper&quot;)) {">
						<outline text="var node = wrapper.parents(&quot;.concord-node:first&quot;);"></outline>
						<outline text="if(event.shiftKey &amp;&amp; (node.parents(&quot;.concord-node.selected&quot;).length&gt;0)){">
							<outline text="return;"></outline>
							<outline text="}"></outline>
							</outline>
						<outline text="op.setTextMode(false);"></outline>
						<outline text="op.setCursor(node, event.shiftKey || event.metaKey, event.shiftKey);"></outline>
						<outline text="}"></outline>
						</outline>
					<outline text="}"></outline>
					</outline>
				<outline text="};"></outline>
				</outline>
			<outline text="this.contextmenu = function(event){">
				<outline text="if(!concord.handleEvents){">
					<outline text="return;"></outline>
					<outline text="}"></outline>
					</outline>
				<outline text="event.preventDefault();"></outline>
				<outline text="event.stopPropagation();"></outline>
				<outline text="var node = $(event.target);"></outline>
				<outline text="if(node.hasClass(&quot;concord-wrapper&quot;) || node.hasClass(&quot;node-icon&quot;)){">
					<outline text="op.setTextMode(false);"></outline>
					<outline text="}"></outline>
					</outline>
				<outline text="if(!node.hasClass(&quot;concord-node&quot;)){">
					<outline text="node = node.parents(&quot;.concord-node:first&quot;);"></outline>
					<outline text="}"></outline>
					</outline>
				<outline text="concordInstance.fireCallback(&quot;opContextMenu&quot;, op.setCursorContext(node));"></outline>
				<outline text="op.setCursor(node);"></outline>
				<outline text="editor.showContextMenu(event.pageX, event.pageY);"></outline>
				<outline text="};"></outline>
				</outline>
			<outline text="root.on(&quot;dblclick&quot;, &quot;.concord-wrapper&quot;, this.wrapperDoubleClick);"></outline>
			<outline text="root.on(&quot;dblclick&quot;, &quot;.concord-node&quot;, this.doubleClick);"></outline>
			<outline text="root.on(&quot;dblclick&quot;, &quot;.concord-text&quot;, function(event){">
				<outline text="if(!concord.handleEvents){">
					<outline text="return;"></outline>
					<outline text="}"></outline>
					</outline>
				<outline text="if(concordInstance.prefs()[&quot;readonly&quot;]==true){">
					<outline text="event.preventDefault();"></outline>
					<outline text="event.stopPropagation();"></outline>
					<outline text="var node = $(event.target).parents(&quot;.concord-node:first&quot;);"></outline>
					<outline text="op.setCursor(node);"></outline>
					<outline text="if(op.subsExpanded()) {">
						<outline text="op.collapse();"></outline>
						<outline text="} else {">
							<outline text="op.expand();"></outline>
							<outline text="}"></outline>
							</outline>
						</outline>
					<outline text="}"></outline>
					</outline>
				<outline text="});"></outline>
				</outline>
			<outline text="root.on(&quot;click&quot;, &quot;.concord-wrapper&quot;, this.wrapperClickSelect);"></outline>
			<outline text="root.on(&quot;click&quot;, &quot;.concord-node&quot;, this.clickSelect);"></outline>
			<outline text="root.on(&quot;mouseover&quot;, &quot;.concord-wrapper&quot;, function(event){">
				<outline text="if(!concord.handleEvents){">
					<outline text="return;"></outline>
					<outline text="}"></outline>
					</outline>
				<outline text="var node = $(event.target).parents(&quot;.concord-node:first&quot;);"></outline>
				<outline text="concordInstance.fireCallback(&quot;opHover&quot;, op.setCursorContext(node));"></outline>
				<outline text="});"></outline>
				</outline>
			<outline text="if(concordInstance.prefs.contextMenu){">
				<outline text="root.on(&quot;contextmenu&quot;, &quot;.concord-text&quot;, this.contextmenu);"></outline>
				<outline text="root.on(&quot;contextmenu&quot;, &quot;.concord-node&quot;, this.contextmenu);"></outline>
				<outline text="root.on(&quot;contextmenu&quot;, &quot;.concord-wrapper&quot;, this.contextmenu);"></outline>
				<outline text="}"></outline>
				</outline>
			<outline text="root.on(&quot;blur&quot;, &quot;.concord-text&quot;, function(event){">
				<outline text="if(!concord.handleEvents){">
					<outline text="return;"></outline>
					<outline text="}"></outline>
					</outline>
				<outline text="if(concordInstance.prefs()[&quot;readonly&quot;]==true){">
					<outline text="return;"></outline>
					<outline text="}"></outline>
					</outline>
				<outline text="if($(this).html().match(/^\s*&lt;br&gt;\s*$/)){">
					<outline text="$(this).html(&quot;&quot;);"></outline>
					<outline text="}"></outline>
					</outline>
				<outline text="var concordText = $(this);"></outline>
				<outline text="var node = $(this).parents(&quot;.concord-node:first&quot;);"></outline>
				<outline text="if(concordInstance.op.inTextMode()){">
					<outline text="editor.saveSelection();"></outline>
					<outline text="}"></outline>
					</outline>
				<outline text="if(concordInstance.op.inTextMode() &amp;&amp; node.hasClass(&quot;dirty&quot;)){">
					<outline text="node.removeClass(&quot;dirty&quot;);"></outline>
					<outline text="}"></outline>
					</outline>
				<outline text="});"></outline>
				</outline>
			<outline text="root.on(&quot;paste&quot;, &quot;.concord-text&quot;, function(event){">
				<outline text="if(!concord.handleEvents){">
					<outline text="return;"></outline>
					<outline text="}"></outline>
					</outline>
				<outline text="if(concordInstance.prefs()[&quot;readonly&quot;]==true){">
					<outline text="return;"></outline>
					<outline text="}"></outline>
					</outline>
				<outline text="$(this).addClass(&quot;paste&quot;);"></outline>
				<outline text="concordInstance.editor.saveSelection();"></outline>
				<outline text="concordInstance.pasteBin.html(&quot;&quot;);"></outline>
				<outline text="concordInstance.pasteBin.focus();"></outline>
				<outline text="setTimeout(editor.sanitize,10);"></outline>
				<outline text="});"></outline>
				</outline>
			<outline text="concordInstance.pasteBin.on(&quot;copy&quot;, function(){">
				<outline text="if(!concord.handleEvents){">
					<outline text="return;"></outline>
					<outline text="}"></outline>
					</outline>
				<outline text="var copyText = &quot;&quot;;"></outline>
				<outline text="root.find(&quot;.selected&quot;).each(function(){">
					<outline text="copyText+= concordInstance.editor.textLine($(this));"></outline>
					<outline text="});"></outline>
					</outline>
				<outline text="if((copyText!=&quot;&quot;) &amp;&amp; (copyText!=&quot;\n&quot;)){">
					<outline text="concordClipboard = {text: copyText, data: root.find(&quot;.selected&quot;).clone(true, true)};"></outline>
					<outline text="concordInstance.pasteBin.html(&quot;&lt;pre&gt;&quot;+$(&quot;&lt;div/&gt;&quot;).text(copyText).html()+&quot;&lt;/pre&gt;&quot;);"></outline>
					<outline text="concordInstance.pasteBin.focus();"></outline>
					<outline text="document.execCommand(&quot;selectAll&quot;);"></outline>
					<outline text="}"></outline>
					</outline>
				<outline text="});"></outline>
				</outline>
			<outline text="concordInstance.pasteBin.on(&quot;paste&quot;, function(event){">
				<outline text="if(!concord.handleEvents){">
					<outline text="return;"></outline>
					<outline text="}"></outline>
					</outline>
				<outline text="if(concordInstance.prefs()[&quot;readonly&quot;]==true){">
					<outline text="return;"></outline>
					<outline text="}"></outline>
					</outline>
				<outline text="var concordText = concordInstance.op.getCursor().children(&quot;.concord-wrapper&quot;).children(&quot;.concord-text&quot;);"></outline>
				<outline text="concordText.addClass(&quot;paste&quot;);"></outline>
				<outline text="concordInstance.pasteBin.html(&quot;&quot;);"></outline>
				<outline text="setTimeout(editor.sanitize,10);"></outline>
				<outline text="});"></outline>
				</outline>
			<outline text="concordInstance.pasteBin.on(&quot;cut&quot;, function(){">
				<outline text="if(!concord.handleEvents){">
					<outline text="return;"></outline>
					<outline text="}"></outline>
					</outline>
				<outline text="if(concordInstance.prefs()[&quot;readonly&quot;]==true){">
					<outline text="return;"></outline>
					<outline text="}"></outline>
					</outline>
				<outline text="var copyText = &quot;&quot;;"></outline>
				<outline text="root.find(&quot;.selected&quot;).each(function(){">
					<outline text="copyText+= concordInstance.editor.textLine($(this));"></outline>
					<outline text="});"></outline>
					</outline>
				<outline text="if((copyText!=&quot;&quot;) &amp;&amp; (copyText!=&quot;\n&quot;)){">
					<outline text="concordClipboard = {text: copyText, data: root.find(&quot;.selected&quot;).clone(true, true)};"></outline>
					<outline text="concordInstance.pasteBin.html(&quot;&lt;pre&gt;&quot;+$(&quot;&lt;div/&gt;&quot;).text(copyText).html()+&quot;&lt;/pre&gt;&quot;);"></outline>
					<outline text="concordInstance.pasteBinFocus();"></outline>
					<outline text="}"></outline>
					</outline>
				<outline text="concordInstance.op.deleteLine();"></outline>
				<outline text="setTimeout(function(){concordInstance.pasteBinFocus()}, 200);"></outline>
				<outline text="});"></outline>
				</outline>
			<outline text="root.on(&quot;mousedown&quot;, function(event) {">
				<outline text="if(!concord.handleEvents){">
					<outline text="return;"></outline>
					<outline text="}"></outline>
					</outline>
				<outline text="var target = $(event.target);"></outline>
				<outline text="if(target.is(&quot;a&quot;)){">
					<outline text="if(target.attr(&quot;href&quot;)){">
						<outline text="event.preventDefault();"></outline>
						<outline text="window.open(target.attr(&quot;href&quot;));"></outline>
						<outline text="}"></outline>
						</outline>
					<outline text="return;"></outline>
					<outline text="}"></outline>
					</outline>
				<outline text="if(concordInstance.prefs()[&quot;readonly&quot;]==true){">
					<outline text="event.preventDefault();"></outline>
					<outline text="var target = $(event.target);"></outline>
					<outline text="if(target.parents(&quot;.concord-text:first&quot;).length==1){">
						<outline text="target = target.parents(&quot;.concord-text:first&quot;);"></outline>
						<outline text="}"></outline>
						</outline>
					<outline text="if(target.hasClass(&quot;concord-text&quot;)){">
						<outline text="var node = target.parents(&quot;.concord-node:first&quot;);"></outline>
						<outline text="if(node.length==1){">
							<outline text="op.setCursor(node);"></outline>
							<outline text="}"></outline>
							</outline>
						<outline text="}"></outline>
						</outline>
					<outline text="return;"></outline>
					<outline text="}"></outline>
					</outline>
				<outline text="if(event.which==1) {">
					<outline text="if(root.data(&quot;dropdown&quot;)){">
						<outline text="editor.hideContextMenu();"></outline>
						<outline text="return;"></outline>
						<outline text="}"></outline>
						</outline>
					<outline text="if(target.parents(&quot;.concord-text:first&quot;).length==1){">
						<outline text="target = target.parents(&quot;.concord-text:first&quot;);"></outline>
						<outline text="}"></outline>
						</outline>
					<outline text="if(target.hasClass(&quot;concord-text&quot;)){">
						<outline text="var node = target.parents(&quot;.concord-node:first&quot;);"></outline>
						<outline text="if(node.length==1){">
							<outline text="if(!root.hasClass(&quot;textMode&quot;)){">
								<outline text="root.find(&quot;.selected&quot;).removeClass(&quot;selected&quot;);"></outline>
								<outline text="root.addClass(&quot;textMode&quot;);"></outline>
								<outline text="}"></outline>
								</outline>
							<outline text="if(node.children(&quot;.concord-wrapper&quot;).children(&quot;.concord-text&quot;).hasClass(&quot;editing&quot;)){">
								<outline text="root.find(&quot;.editing&quot;).removeClass(&quot;editing&quot;);"></outline>
								<outline text="node.children(&quot;.concord-wrapper&quot;).children(&quot;.concord-text&quot;).addClass(&quot;editing&quot;);"></outline>
								<outline text="}"></outline>
								</outline>
							<outline text="if(!node.hasClass(&quot;concord-cursor&quot;)){">
								<outline text="root.find(&quot;.concord-cursor&quot;).removeClass(&quot;concord-cursor&quot;);"></outline>
								<outline text="node.addClass(&quot;concord-cursor&quot;);"></outline>
								<outline text="concordInstance.fireCallback(&quot;opCursorMoved&quot;, op.setCursorContext(node));"></outline>
								<outline text="}"></outline>
								</outline>
							<outline text="}"></outline>
							</outline>
						<outline text="}else{">
							<outline text="event.preventDefault();"></outline>
							<outline text="root.data(&quot;mousedown&quot;, true);"></outline>
							<outline text="}"></outline>
							</outline>
						</outline>
					<outline text="}"></outline>
					</outline>
				<outline text="});"></outline>
				</outline>
			<outline text="root.on(&quot;mousemove&quot;, function(event) {">
				<outline text="if(!concord.handleEvents){">
					<outline text="return;"></outline>
					<outline text="}"></outline>
					</outline>
				<outline text="if(concordInstance.prefs()[&quot;readonly&quot;]==true){">
					<outline text="return;"></outline>
					<outline text="}"></outline>
					</outline>
				<outline text="if(!editor.editable($(event.target))) {">
					<outline text="event.preventDefault();"></outline>
					<outline text="if(root.data(&quot;mousedown&quot;) &amp;&amp; !root.data(&quot;dragging&quot;)) {">
						<outline text="var target = $(event.target);"></outline>
						<outline text="if(target.hasClass(&quot;node-icon&quot;)){">
							<outline text="target = target.parent();"></outline>
							<outline text="}"></outline>
							</outline>
						<outline text="if(target.hasClass(&quot;concord-wrapper&quot;) &amp;&amp; target.parent().hasClass(&quot;selected&quot;)) {">
							<outline text="editor.dragMode();"></outline>
							<outline text="}"></outline>
							</outline>
						<outline text="}"></outline>
						</outline>
					<outline text="}"></outline>
					</outline>
				<outline text="});"></outline>
				</outline>
			<outline text="root.on(&quot;mouseup&quot;, function(event) {">
				<outline text="if(!concord.handleEvents){">
					<outline text="return;"></outline>
					<outline text="}"></outline>
					</outline>
				<outline text="if(concordInstance.prefs()[&quot;readonly&quot;]==true){">
					<outline text="return;"></outline>
					<outline text="}"></outline>
					</outline>
				<outline text="var target = $(event.target);"></outline>
				<outline text="if(target.hasClass(&quot;concord-node&quot;)) {">
					<outline text="target = target.children(&quot;.concord-wrapper:first&quot;).children(&quot;.concord-text:first&quot;);"></outline>
					<outline text="} else if(target.hasClass(&quot;concord-wrapper&quot;)) {">
						<outline text="target = target.children(&quot;.concord-text:first&quot;);"></outline>
						<outline text="}"></outline>
						</outline>
					</outline>
				<outline text="if(!editor.editable(target)) {">
					<outline text="root.data(&quot;mousedown&quot;, false);"></outline>
					<outline text="if(root.data(&quot;dragging&quot;)) {">
						<outline text="var target = $(event.target);"></outline>
						<outline text="var node = target.parents(&quot;.concord-node:first&quot;);"></outline>
						<outline text="var draggable = root.find(&quot;.selected&quot;);"></outline>
						<outline text="if((node.length == 1) &amp;&amp; (draggable.length &gt;= 1)) {">
							<outline text="var isDraggableTarget = false;"></outline>
							<outline text="draggable.each(function(){">
								<outline text="if(this==node[0]){">
									<outline text="isDraggableTarget = true;"></outline>
									<outline text="}"></outline>
									</outline>
								<outline text="});"></outline>
								</outline>
							<outline text="if(!isDraggableTarget) {">
								<outline text="var draggableIsTargetParent = false;"></outline>
								<outline text="node.parents(&quot;.concord-node&quot;).each(function() {">
									<outline text="var nodeParent = $(this)[0];"></outline>
									<outline text="draggable.each(function(){">
										<outline text="if($(this)[0] == nodeParent) {">
											<outline text="draggableIsTargetParent = true;"></outline>
											<outline text="}"></outline>
											</outline>
										<outline text="});"></outline>
										</outline>
									<outline text="});"></outline>
									</outline>
								<outline text="if(!draggableIsTargetParent) {">
									<outline text="if(target.hasClass(&quot;concord-wrapper&quot;) || target.hasClass(&quot;node-icon&quot;)) {">
										<outline text="var clonedDraggable = draggable.clone(true, true);"></outline>
										<outline text="clonedDraggable.insertAfter(node);"></outline>
										<outline text="draggable.remove();"></outline>
										<outline text="} else {">
											<outline text="var clonedDraggable = draggable.clone(true, true);"></outline>
											<outline text="var outline = node.children(&quot;ol&quot;);"></outline>
											<outline text="clonedDraggable.prependTo(outline);"></outline>
											<outline text="node.removeClass(&quot;collapsed&quot;);"></outline>
											<outline text="draggable.remove();"></outline>
											<outline text="}"></outline>
											</outline>
										</outline>
									<outline text="}"></outline>
									</outline>
								<outline text="} else {">
									<outline text="var prev = node.prev();"></outline>
									<outline text="if(prev.length == 1) {">
										<outline text="if(prev.hasClass(&quot;drop-child&quot;)) {">
											<outline text="var clonedDraggable = draggable.clone(true, true);"></outline>
											<outline text="var outline = prev.children(&quot;ol&quot;);"></outline>
											<outline text="clonedDraggable.appendTo(outline);"></outline>
											<outline text="prev.removeClass(&quot;collapsed&quot;);"></outline>
											<outline text="draggable.remove();"></outline>
											<outline text="}"></outline>
											</outline>
										<outline text="}"></outline>
										</outline>
									<outline text="}"></outline>
									</outline>
								</outline>
							<outline text="}"></outline>
							</outline>
						<outline text="editor.dragModeExit();"></outline>
						<outline text="concordInstance.editor.recalculateLevels();"></outline>
						<outline text="}"></outline>
						</outline>
					<outline text="}"></outline>
					</outline>
				<outline text="});"></outline>
				</outline>
			<outline text="root.on(&quot;mouseover&quot;, function(event) {">
				<outline text="if(!concord.handleEvents){">
					<outline text="return;"></outline>
					<outline text="}"></outline>
					</outline>
				<outline text="if(concordInstance.prefs()[&quot;readonly&quot;]==true){">
					<outline text="return;"></outline>
					<outline text="}"></outline>
					</outline>
				<outline text="if(root.data(&quot;dragging&quot;)) {">
					<outline text="event.preventDefault();"></outline>
					<outline text="var target = $(event.target);"></outline>
					<outline text="var node = target.parents(&quot;.concord-node:first&quot;);"></outline>
					<outline text="var draggable = root.find(&quot;.selected&quot;);"></outline>
					<outline text="if((node.length == 1) &amp;&amp; (draggable.length&gt;=1)) {">
						<outline text="var isDraggableTarget = false;"></outline>
						<outline text="draggable.each(function(){">
							<outline text="if(this==node[0]){">
								<outline text="isDraggableTarget = true;"></outline>
								<outline text="}"></outline>
								</outline>
							<outline text="});"></outline>
							</outline>
						<outline text="if(!isDraggableTarget) {">
							<outline text="var draggableIsTargetParent = false;"></outline>
							<outline text="node.parents(&quot;.concord-node&quot;).each(function() {">
								<outline text="var nodeParent = $(this)[0];"></outline>
								<outline text="draggable.each(function(){">
									<outline text="if($(this)[0] == nodeParent) {">
										<outline text="draggableIsTargetParent = true;"></outline>
										<outline text="}"></outline>
										</outline>
									<outline text="});"></outline>
									</outline>
								<outline text="});"></outline>
								</outline>
							<outline text="if(!draggableIsTargetParent) {">
								<outline text="node.removeClass(&quot;drop-sibling&quot;).remove(&quot;drop-child&quot;);"></outline>
								<outline text="if(target.hasClass(&quot;concord-wrapper&quot;) || target.hasClass(&quot;node-icon&quot;)) {">
									<outline text="node.addClass(&quot;drop-sibling&quot;);"></outline>
									<outline text="} else {">
										<outline text="node.addClass(&quot;drop-child&quot;);"></outline>
										<outline text="}"></outline>
										</outline>
									</outline>
								<outline text="}"></outline>
								</outline>
							<outline text="} else if (draggable.length==1){">
								<outline text="var prev = node.prev();"></outline>
								<outline text="if(prev.length == 1) {">
									<outline text="prev.removeClass(&quot;drop-sibling&quot;).remove(&quot;drop-child&quot;);"></outline>
									<outline text="prev.addClass(&quot;drop-child&quot;);"></outline>
									<outline text="}"></outline>
									</outline>
								<outline text="}"></outline>
								</outline>
							</outline>
						<outline text="}"></outline>
						</outline>
					<outline text="}"></outline>
					</outline>
				<outline text="});"></outline>
				</outline>
			<outline text="root.on(&quot;mouseout&quot;, function(event) {">
				<outline text="if(!concord.handleEvents){">
					<outline text="return;"></outline>
					<outline text="}"></outline>
					</outline>
				<outline text="if(concordInstance.prefs()[&quot;readonly&quot;]==true){">
					<outline text="return;"></outline>
					<outline text="}"></outline>
					</outline>
				<outline text="if(root.data(&quot;dragging&quot;)) {">
					<outline text="root.find(&quot;.drop-sibling&quot;).removeClass(&quot;drop-sibling&quot;);"></outline>
					<outline text="root.find(&quot;.drop-child&quot;).removeClass(&quot;drop-child&quot;);"></outline>
					<outline text="}"></outline>
					</outline>
				<outline text="});"></outline>
				</outline>
			<outline text="}"></outline>
			</outline>
		<outline text="function ConcordOp(root, concordInstance, _cursor) {">
			<outline text="this._walk_up = function(context) {">
				<outline text="var prev = context.prev();"></outline>
				<outline text="if(prev.length == 0) {">
					<outline text="var parent = context.parents(&quot;.concord-node:first&quot;);"></outline>
					<outline text="if(parent.length == 1) {">
						<outline text="return parent;"></outline>
						<outline text="} else {">
							<outline text="return null;"></outline>
							<outline text="}"></outline>
							</outline>
						</outline>
					<outline text="} else {">
						<outline text="return this._last_child(prev);"></outline>
						<outline text="}"></outline>
						</outline>
					</outline>
				<outline text="};"></outline>
				</outline>
			<outline text="this._walk_down = function(context) {">
				<outline text="var next = context.next();"></outline>
				<outline text="if(next.length == 1) {">
					<outline text="return next;"></outline>
					<outline text="} else {">
						<outline text="var parent = context.parents(&quot;.concord-node:first&quot;);"></outline>
						<outline text="if(parent.length == 1) {">
							<outline text="return this._walk_down(parent);"></outline>
							<outline text="} else {">
								<outline text="return null;"></outline>
								<outline text="}"></outline>
								</outline>
							</outline>
						<outline text="}"></outline>
						</outline>
					</outline>
				<outline text="};"></outline>
				</outline>
			<outline text="this._last_child = function(context) {">
				<outline text="if(context.hasClass(&quot;collapsed&quot;)) {">
					<outline text="return context;"></outline>
					<outline text="}"></outline>
					</outline>
				<outline text="var outline = context.children(&quot;ol&quot;);"></outline>
				<outline text="if(outline.length == 0) {">
					<outline text="return context;"></outline>
					<outline text="} else {">
						<outline text="var lastChild = outline.children(&quot;.concord-node:last&quot;);"></outline>
						<outline text="if(lastChild.length == 1) {">
							<outline text="return this._last_child(lastChild);"></outline>
							</outline>
						<outline text="} else {">
							<outline text="return context;"></outline>
							</outline>
						<outline text="}"></outline>
						<outline text="}"></outline>
						</outline>
					</outline>
				<outline text="};"></outline>
				</outline>
			<outline text="this.bold = function(){">
				<outline text="this.saveState();"></outline>
				<outline text="if(this.inTextMode()){">
					<outline text="document.execCommand(&quot;bold&quot;);"></outline>
					<outline text="}else{">
						<outline text="this.focusCursor();"></outline>
						<outline text="document.execCommand(&quot;selectAll&quot;);"></outline>
						<outline text="document.execCommand(&quot;bold&quot;);"></outline>
						<outline text="document.execCommand(&quot;unselect&quot;);"></outline>
						<outline text="this.blurCursor();"></outline>
						<outline text="concordInstance.pasteBinFocus();"></outline>
						<outline text="}"></outline>
						</outline>
					</outline>
				<outline text="this.markChanged();"></outline>
				<outline text="};"></outline>
				</outline>
			<outline text="this.changed = function() {">
				<outline text="return root.data(&quot;changed&quot;) == true;"></outline>
				<outline text="};"></outline>
				</outline>
			<outline text="this.clearChanged = function() {">
				<outline text="root.data(&quot;changed&quot;, false);"></outline>
				<outline text="return true;"></outline>
				<outline text="};"></outline>
				</outline>
			<outline text="this.collapse = function(triggerCallbacks) {">
				<outline text="if(triggerCallbacks == undefined){">
					<outline text="triggerCallbacks = true;"></outline>
					<outline text="}"></outline>
					</outline>
				<outline text="var node = this.getCursor();"></outline>
				<outline text="if(node.length == 1) {">
					<outline text="if(triggerCallbacks){">
						<outline text="concordInstance.fireCallback(&quot;opCollapse&quot;, this.setCursorContext(node));"></outline>
						<outline text="}"></outline>
						</outline>
					<outline text="node.addClass(&quot;collapsed&quot;);"></outline>
					<outline text="node.find(&quot;ol&quot;).each(function() {">
						<outline text="if($(this).children().length &gt; 0) {">
							<outline text="$(this).parent().addClass(&quot;collapsed&quot;);"></outline>
							<outline text="}"></outline>
							</outline>
						<outline text="});"></outline>
						</outline>
					<outline text="this.markChanged();"></outline>
					<outline text="}"></outline>
					</outline>
				<outline text="};"></outline>
				</outline>
			<outline text="this.copy = function(){">
				<outline text="if(!this.inTextMode()){">
					<outline text="root.data(&quot;clipboard&quot;, root.find(&quot;.selected&quot;).clone(true, true));"></outline>
					<outline text="}"></outline>
					</outline>
				<outline text="};"></outline>
				</outline>
			<outline text="this.countSubs = function() {">
				<outline text="var node = this.getCursor();"></outline>
				<outline text="if(node.length == 1) {">
					<outline text="return node.children(&quot;ol&quot;).children().size();"></outline>
					<outline text="}"></outline>
					</outline>
				<outline text="return 0;"></outline>
				<outline text="};"></outline>
				</outline>
			<outline text="this.cursorToXml = function(){">
				<outline text="return concordInstance.editor.opml(this.getCursor());"></outline>
				<outline text="};"></outline>
				</outline>
			<outline text=""></outline>
			<outline text=""></outline>
			<outline text="this.cursorToXmlSubsOnly = function(){ //8/5/13 by DW">
				<outline text="return concordInstance.editor.opml(this.getCursor(), true);"></outline>
				<outline text="};"></outline>
				</outline>
			<outline text="this.getNodeOpml = function (node) { //3/12/14 by DW">
				<outline text="return concordInstance.editor.opml(node, true);"></outline>
				<outline text="};"></outline>
				</outline>
			<outline text=""></outline>
			<outline text=""></outline>
			<outline text="this.cut = function(){">
				<outline text="if(!this.inTextMode()){">
					<outline text="this.copy();"></outline>
					<outline text="this.deleteLine();"></outline>
					<outline text="}"></outline>
					</outline>
				<outline text="};"></outline>
				</outline>
			<outline text="this.deleteLine = function() {">
				<outline text="this.saveState();"></outline>
				<outline text="if(this.inTextMode()){">
					<outline text="var cursor = this.getCursor();"></outline>
					<outline text="var p = cursor.prev();"></outline>
					<outline text="if(p.length==0){">
						<outline text="p = cursor.parents(&quot;.concord-node:first&quot;);"></outline>
						<outline text="}"></outline>
						</outline>
					<outline text="cursor.remove();"></outline>
					<outline text="if(p.length==1) {">
						<outline text="this.setCursor(p);"></outline>
						<outline text="} else {">
							<outline text="if(root.find(&quot;.concord-node:first&quot;).length==1) {">
								<outline text="this.setCursor(root.find(&quot;.concord-node:first&quot;));"></outline>
								<outline text="} else {">
									<outline text="this.wipe();"></outline>
									<outline text="}"></outline>
									</outline>
								</outline>
							<outline text="}"></outline>
							</outline>
						</outline>
					<outline text="}else{">
						<outline text="var selected = root.find(&quot;.selected&quot;);"></outline>
						<outline text="if(selected.length == 1) {">
							<outline text="var p = selected.prev();"></outline>
							<outline text="if(p.length==0){">
								<outline text="p = selected.parents(&quot;.concord-node:first&quot;);"></outline>
								<outline text="}"></outline>
								</outline>
							<outline text="selected.remove();"></outline>
							<outline text="if(p.length==1) {">
								<outline text="this.setCursor(p);"></outline>
								<outline text="} else {">
									<outline text="if(root.find(&quot;.concord-node:first&quot;).length==1) {">
										<outline text="this.setCursor(root.find(&quot;.concord-node:first&quot;));"></outline>
										<outline text="} else {">
											<outline text="this.wipe();"></outline>
											<outline text="}"></outline>
											</outline>
										</outline>
									<outline text="}"></outline>
									</outline>
								</outline>
							<outline text="} else if(selected.length &gt; 1) {">
								<outline text="var first = root.find(&quot;.selected:first&quot;);"></outline>
								<outline text="var p = first.prev();"></outline>
								<outline text="if(p.length==0){">
									<outline text="p = first.parents(&quot;.concord-node:first&quot;);"></outline>
									<outline text="}"></outline>
									</outline>
								<outline text="selected.each(function() {">
									<outline text="$(this).remove();"></outline>
									<outline text="});"></outline>
									</outline>
								<outline text="if(p.length==1){">
									<outline text="this.setCursor(p);"></outline>
									<outline text="}else{">
										<outline text="if(root.find(&quot;.concord-node:first&quot;).length==1) {">
											<outline text="this.setCursor(root.find(&quot;.concord-node:first&quot;));"></outline>
											<outline text="} else {">
												<outline text="this.wipe();"></outline>
												<outline text="}"></outline>
												</outline>
											</outline>
										<outline text="}"></outline>
										</outline>
									</outline>
								<outline text="}"></outline>
								</outline>
							</outline>
						<outline text="}"></outline>
						</outline>
					</outline>
				<outline text="if(root.find(&quot;.concord-node&quot;).length == 0) {">
					<outline text="var node = this.insert(&quot;&quot;, down);"></outline>
					<outline text="this.setCursor(node);"></outline>
					<outline text="}"></outline>
					</outline>
				<outline text="this.markChanged();"></outline>
				<outline text="};"></outline>
				</outline>
			<outline text="this.deleteSubs = function() {">
				<outline text="var node = this.getCursor();"></outline>
				<outline text="if(node.length == 1) {">
					<outline text="if(node.children(&quot;ol&quot;).children().length &gt; 0){">
						<outline text="this.saveState();"></outline>
						<outline text="node.children(&quot;ol&quot;).empty();"></outline>
						<outline text="}"></outline>
						</outline>
					<outline text="}"></outline>
					</outline>
				<outline text="this.markChanged();"></outline>
				<outline text="};"></outline>
				</outline>
			<outline text="this.demote = function() {">
				<outline text="var node = this.getCursor();"></outline>
				<outline text="var movedSiblings = false;"></outline>
				<outline text="if(node.nextAll().length&gt;0){">
					<outline text="this.saveState();"></outline>
					<outline text="node.nextAll().each(function() {">
						<outline text="var sibling = $(this).clone(true, true);"></outline>
						<outline text="$(this).remove();"></outline>
						<outline text="sibling.appendTo(node.children(&quot;ol&quot;));"></outline>
						<outline text="node.removeClass(&quot;collapsed&quot;);"></outline>
						<outline text="});"></outline>
						</outline>
					<outline text="concordInstance.editor.recalculateLevels(node.find(&quot;.concord-node&quot;));"></outline>
					<outline text="this.markChanged();"></outline>
					<outline text="}"></outline>
					</outline>
				<outline text="};"></outline>
				</outline>
			<outline text="this.expand = function(triggerCallbacks) {">
				<outline text="if(triggerCallbacks == undefined){">
					<outline text="triggerCallbacks = true;"></outline>
					<outline text="}"></outline>
					</outline>
				<outline text="var node = this.getCursor();"></outline>
				<outline text="if(node.length == 1) {">
					<outline text="if(triggerCallbacks){">
						<outline text="concordInstance.fireCallback(&quot;opExpand&quot;, this.setCursorContext(node));"></outline>
						<outline text="}"></outline>
						</outline>
					<outline text="if(!node.hasClass(&quot;collapsed&quot;)){">
						<outline text="return;"></outline>
						<outline text="}"></outline>
						</outline>
					<outline text="node.removeClass(&quot;collapsed&quot;);"></outline>
					<outline text="var cursorPosition = node.offset().top;"></outline>
					<outline text="var cursorHeight =node.height();"></outline>
					<outline text="var windowPosition = $(window).scrollTop();"></outline>
					<outline text="var windowHeight = $(window).height (); "></outline>
					<outline text="var lineHeight = parseInt(node.children(&quot;.concord-wrapper&quot;).children(&quot;.concord-text&quot;).css(&quot;line-height&quot;)) + 6;"></outline>
					<outline text=""></outline>
					<outline text="if (flConcordScrollEnabled) { //6/24/14 by DW -- provide a way to disable automatic scrolling">
						<outline text="if (cursorHeight &gt; windowHeight) { //6/24/14 by DW">
							<outline text="var ctscroll = cursorPosition - ctPixelsAboveOutlineArea - lineHeight;"></outline>
							<outline text="if (ctscroll &gt; 0) {">
								<outline text="$(window).scrollTop (ctscroll);"></outline>
								<outline text="}"></outline>
								</outline>
							<outline text="}"></outline>
							</outline>
						<outline text="else {">
							<outline text="if (( cursorPosition &lt; windowPosition ) || ( (cursorPosition+cursorHeight) &gt; (windowPosition+windowHeight) ) ){">
								<outline text="if(cursorPosition &lt; windowPosition){">
									<outline text="$(window).scrollTop(cursorPosition);"></outline>
									<outline text="}else if ((cursorPosition+cursorHeight) &gt; (windowPosition+windowHeight)){">
										<outline text="if((cursorHeight+lineHeight) &lt; windowHeight){">
											<outline text="$(window).scrollTop(cursorPosition - (windowHeight-cursorHeight)+lineHeight);"></outline>
											<outline text="}else{">
												<outline text="$(window).scrollTop(cursorPosition);"></outline>
												<outline text="}"></outline>
												</outline>
											</outline>
										<outline text="}"></outline>
										</outline>
									</outline>
								<outline text="}"></outline>
								</outline>
							<outline text="}"></outline>
							</outline>
						<outline text=""></outline>
						<outline text="}"></outline>
						</outline>
					<outline text=""></outline>
					<outline text="this.markChanged();"></outline>
					<outline text="}"></outline>
					</outline>
				<outline text="};"></outline>
				</outline>
			<outline text="this.expandAllLevels = function() {">
				<outline text="var node = this.getCursor();"></outline>
				<outline text="if(node.length == 1) {">
					<outline text="node.removeClass(&quot;collapsed&quot;);"></outline>
					<outline text="node.find(&quot;.concord-node&quot;).removeClass(&quot;collapsed&quot;);"></outline>
					<outline text="}"></outline>
					</outline>
				<outline text="};"></outline>
				</outline>
			<outline text="this.focusCursor = function(){">
				<outline text="this.getCursor().children(&quot;.concord-wrapper&quot;).children(&quot;.concord-text&quot;).focus();"></outline>
				<outline text="};"></outline>
				</outline>
			<outline text="this.blurCursor = function(){">
				<outline text="this.getCursor().children(&quot;.concord-wrapper&quot;).children(&quot;.concord-text&quot;).blur();"></outline>
				<outline text="};"></outline>
				</outline>
			<outline text="this.fullCollapse = function() {">
				<outline text="root.find(&quot;.concord-node&quot;).each(function() {">
					<outline text="if($(this).children(&quot;ol&quot;).children().size() &gt; 0) {">
						<outline text="$(this).addClass(&quot;collapsed&quot;);"></outline>
						<outline text="}"></outline>
						</outline>
					<outline text="});"></outline>
					</outline>
				<outline text="var cursor = this.getCursor();"></outline>
				<outline text="var topParent = cursor.parents(&quot;.concord-node:last&quot;);"></outline>
				<outline text="if(topParent.length == 1) {">
					<outline text="concordInstance.editor.select(topParent);"></outline>
					<outline text="}"></outline>
					</outline>
				<outline text="};"></outline>
				</outline>
			<outline text="this.fullExpand = function() {">
				<outline text="root.find(&quot;.concord-node&quot;).removeClass(&quot;collapsed&quot;);"></outline>
				<outline text="};"></outline>
				</outline>
			<outline text="this.getCursor = function(){">
				<outline text="if(_cursor){">
					<outline text="return _cursor;"></outline>
					<outline text="}"></outline>
					</outline>
				<outline text="return root.find(&quot;.concord-cursor:first&quot;);"></outline>
				<outline text="};"></outline>
				</outline>
			<outline text="this.getCursorRef = function(){">
				<outline text="return this.setCursorContext(this.getCursor());"></outline>
				<outline text="};"></outline>
				</outline>
			<outline text="this.getHeaders = function(){">
				<outline text="var headers = {};"></outline>
				<outline text="if(root.data(&quot;head&quot;)){">
					<outline text="headers = root.data(&quot;head&quot;);"></outline>
					<outline text="}"></outline>
					</outline>
				<outline text="headers[&quot;title&quot;] = this.getTitle();"></outline>
				<outline text="return headers;"></outline>
				<outline text="},"></outline>
				</outline>
			<outline text="this.getLineText = function() {">
				<outline text="var node = this.getCursor();"></outline>
				<outline text="if(node.length == 1) {">
					<outline text="var text = node.children(&quot;.concord-wrapper:first&quot;).children(&quot;.concord-text:first&quot;).html();"></outline>
					<outline text="var textMatches = text.match(/^(.+)&lt;br&gt;\s*$/);"></outline>
					<outline text="if(textMatches){">
						<outline text="text = textMatches[1];"></outline>
						<outline text="}"></outline>
						</outline>
					<outline text="return concordInstance.editor.unescape(text);"></outline>
					<outline text="} else {">
						<outline text="return null;"></outline>
						<outline text="}"></outline>
						</outline>
					</outline>
				<outline text="};"></outline>
				</outline>
			<outline text="this.getRenderMode = function(){">
				<outline text="if(root.data(&quot;renderMode&quot;)!==undefined){">
					<outline text="return (root.data(&quot;renderMode&quot;)===true);"></outline>
					<outline text="}else{">
						<outline text="return true;"></outline>
						<outline text="}"></outline>
						</outline>
					</outline>
				<outline text="};"></outline>
				</outline>
			<outline text="this.getTitle = function() {">
				<outline text="return root.data(&quot;title&quot;);"></outline>
				<outline text="};"></outline>
				</outline>
			<outline text="this.go = function(direction, count, multiple, textMode) {">
				<outline text="if(count===undefined) {">
					<outline text="count = 1;"></outline>
					<outline text="}"></outline>
					</outline>
				<outline text="var cursor = this.getCursor();"></outline>
				<outline text="if(textMode==undefined){">
					<outline text="textMode = false;"></outline>
					<outline text="}"></outline>
					</outline>
				<outline text="this.setTextMode(textMode);"></outline>
				<outline text="var ableToMoveInDirection = false;"></outline>
				<outline text="switch(direction) {">
					<outline text="case up:">
						<outline text="for(var i = 0; i &lt; count; i++) {">
							<outline text="var prev = cursor.prev();"></outline>
							<outline text="if(prev.length == 1) {">
								<outline text="cursor = prev;"></outline>
								<outline text="ableToMoveInDirection = true;"></outline>
								<outline text="}else{">
									<outline text="break;"></outline>
									<outline text="}"></outline>
									</outline>
								</outline>
							<outline text="}"></outline>
							</outline>
						<outline text="this.setCursor(cursor, multiple);"></outline>
						<outline text="break;"></outline>
						</outline>
					<outline text="case down:">
						<outline text="for(var i = 0; i &lt; count; i++) {">
							<outline text="var next = cursor.next();"></outline>
							<outline text="if(next.length == 1) {">
								<outline text="cursor = next;"></outline>
								<outline text="ableToMoveInDirection = true;"></outline>
								<outline text="}else{">
									<outline text="break;"></outline>
									<outline text="}"></outline>
									</outline>
								</outline>
							<outline text="}"></outline>
							</outline>
						<outline text="this.setCursor(cursor, multiple);"></outline>
						<outline text="break;"></outline>
						</outline>
					<outline text="case left:">
						<outline text="for(var i = 0; i &lt; count; i++) {">
							<outline text="var parent = cursor.parents(&quot;.concord-node:first&quot;);"></outline>
							<outline text="if(parent.length == 1) {">
								<outline text="cursor = parent;"></outline>
								<outline text="ableToMoveInDirection = true;"></outline>
								<outline text="}else{">
									<outline text="break;"></outline>
									<outline text="}"></outline>
									</outline>
								</outline>
							<outline text="}"></outline>
							</outline>
						<outline text="this.setCursor(cursor, multiple);"></outline>
						<outline text="break;"></outline>
						</outline>
					<outline text="case right:">
						<outline text="for(var i = 0; i &lt; count; i++) {">
							<outline text="var firstSibling = cursor.children(&quot;ol&quot;).children(&quot;.concord-node:first&quot;);"></outline>
							<outline text="if(firstSibling.length == 1) {">
								<outline text="cursor = firstSibling;"></outline>
								<outline text="ableToMoveInDirection = true;"></outline>
								<outline text="}else{">
									<outline text="break;"></outline>
									<outline text="}"></outline>
									</outline>
								</outline>
							<outline text="}"></outline>
							</outline>
						<outline text="this.setCursor(cursor, multiple);"></outline>
						<outline text="break;"></outline>
						</outline>
					<outline text="case flatup:">
						<outline text="var nodeCount = 0;"></outline>
						<outline text="while(cursor &amp;&amp; (nodeCount &lt; count)) {">
							<outline text="var cursor = this._walk_up(cursor);"></outline>
							<outline text="if(cursor) {">
								<outline text="if(!cursor.hasClass(&quot;collapsed&quot;) &amp;&amp; (cursor.children(&quot;ol&quot;).children().size() &gt; 0)) {">
									<outline text="nodeCount++;"></outline>
									<outline text="ableToMoveInDirection = true;"></outline>
									<outline text="if(nodeCount == count) {">
										<outline text="this.setCursor(cursor, multiple);"></outline>
										<outline text="break;"></outline>
										</outline>
									<outline text="}"></outline>
									</outline>
								<outline text="}"></outline>
								</outline>
							<outline text="}"></outline>
							</outline>
						<outline text="}"></outline>
						<outline text="break;"></outline>
						</outline>
					<outline text="case flatdown:">
						<outline text="var nodeCount = 0;"></outline>
						<outline text="while(cursor &amp;&amp; (nodeCount &lt; count)) {">
							<outline text="var next = null;"></outline>
							<outline text="if(!cursor.hasClass(&quot;collapsed&quot;)) {">
								<outline text="var outline = cursor.children(&quot;ol&quot;);"></outline>
								<outline text="if(outline.length == 1) {">
									<outline text="var firstChild = outline.children(&quot;.concord-node:first&quot;);"></outline>
									<outline text="if(firstChild.length == 1) {">
										<outline text="next = firstChild;"></outline>
										<outline text="}"></outline>
										</outline>
									<outline text="}"></outline>
									</outline>
								<outline text="}"></outline>
								</outline>
							<outline text="if(!next) {">
								<outline text="next = this._walk_down(cursor);"></outline>
								<outline text="}"></outline>
								</outline>
							<outline text="cursor = next;"></outline>
							<outline text="if(cursor) {">
								<outline text="if(!cursor.hasClass(&quot;collapsed&quot;) &amp;&amp; (cursor.children(&quot;ol&quot;).children().size() &gt; 0)) {">
									<outline text="nodeCount++;"></outline>
									<outline text="ableToMoveInDirection = true;"></outline>
									<outline text="if(nodeCount == count) {">
										<outline text="this.setCursor(cursor, multiple);"></outline>
										<outline text="}"></outline>
										</outline>
									<outline text="}"></outline>
									</outline>
								<outline text="}"></outline>
								</outline>
							<outline text="}"></outline>
							</outline>
						<outline text="break;"></outline>
						</outline>
					<outline text="}"></outline>
					</outline>
				<outline text="this.markChanged();"></outline>
				<outline text="return ableToMoveInDirection;"></outline>
				<outline text="};"></outline>
				</outline>
			<outline text="this.insert = function(insertText, insertDirection, flInsertRawHtml) { //9/16/20 by DW -- new optional param -- flInsertRawHtml">
				<outline text="this.saveState();"></outline>
				<outline text="var level = this.getCursor().parents(&quot;.concord-node&quot;).length+1;"></outline>
				<outline text="var node = $(&quot;&lt;li&gt;&lt;/li&gt;&quot;);"></outline>
				<outline text="node.addClass(&quot;concord-node&quot;);"></outline>
				<outline text="switch(insertDirection){">
					<outline text="case right:">
						<outline text="level+=1;"></outline>
						<outline text="break;"></outline>
						</outline>
					<outline text="case left:">
						<outline text="level-=1;"></outline>
						<outline text="break;"></outline>
						</outline>
					<outline text="}"></outline>
					</outline>
				<outline text="node.addClass(&quot;concord-level-&quot;+level);"></outline>
				<outline text="var wrapper = $(&quot;&lt;div class='concord-wrapper'&gt;&lt;/div&gt;&quot;);"></outline>
				<outline text="var iconName=&quot;caret-right&quot;;"></outline>
				<outline text="var icon = ConcordUtil.getIconHtml (iconName);"></outline>
				<outline isComment="true" text="var icon = &quot;&lt;i&quot;+&quot; class=\&quot;node-icon fa fa-&quot;+ iconName +&quot;\&quot;&gt;&lt;&quot;+&quot;/i&gt;&quot;;"></outline>
				<outline text="wrapper.append(icon);"></outline>
				<outline text="wrapper.addClass(&quot;type-icon&quot;);"></outline>
				<outline text="var text = $(&quot;&lt;div class='concord-text' contenteditable='true'&gt;&lt;/div&gt;&quot;);"></outline>
				<outline text="text.addClass(&quot;concord-level-&quot;+level+&quot;-text&quot;);"></outline>
				<outline text="var outline = $(&quot;&lt;ol&gt;&lt;/ol&gt;&quot;);"></outline>
				<outline text="text.appendTo(wrapper);"></outline>
				<outline text="wrapper.appendTo(node);"></outline>
				<outline text="outline.appendTo(node);"></outline>
				<outline text="if(insertText &amp;&amp; (insertText!=&quot;&quot;)){">
					<outline text="if (flInsertRawHtml) { //9/16/20 by DW">
						<outline text="text.html(insertText);"></outline>
						<outline text="}"></outline>
						</outline>
					<outline text="else {">
						<outline text="text.html(concordInstance.editor.escape(insertText));"></outline>
						<outline text="}"></outline>
						</outline>
					<outline text="}"></outline>
					</outline>
				<outline text="var cursor = this.getCursor();"></outline>
				<outline text="if(!insertDirection) {">
					<outline text="insertDirection = down;"></outline>
					<outline text="}"></outline>
					</outline>
				<outline text="switch(insertDirection) {">
					<outline text="case down:">
						<outline text="cursor.after(node);"></outline>
						<outline text="break;"></outline>
						</outline>
					<outline text="case right:">
						<outline text="cursor.children(&quot;ol&quot;).prepend(node);"></outline>
						<outline text="this.expand(false);"></outline>
						<outline text="break;"></outline>
						</outline>
					<outline text="case up:">
						<outline text="cursor.before(node);"></outline>
						<outline text="break;"></outline>
						</outline>
					<outline text="case left:">
						<outline text="var parent = cursor.parents(&quot;.concord-node:first&quot;);"></outline>
						<outline text="if(parent.length == 1) {">
							<outline text="parent.after(node);"></outline>
							<outline text="}"></outline>
							</outline>
						<outline text="break;"></outline>
						</outline>
					<outline text="}"></outline>
					</outline>
				<outline text="this.setCursor(node);"></outline>
				<outline text="this.markChanged();"></outline>
				<outline text="concordInstance.fireCallback(&quot;opInsert&quot;, this.setCursorContext(node));"></outline>
				<outline text="return node;"></outline>
				<outline text="};"></outline>
				</outline>
			<outline text="this.insertImage = function(url){">
				<outline text="if(this.inTextMode()){">
					<outline text="document.execCommand(&quot;insertImage&quot;, null, url);"></outline>
					<outline text="}else{">
						<outline text="this.insert('&lt;img src=&quot;'+url+'&quot;&gt;', down);"></outline>
						<outline text="}"></outline>
						</outline>
					</outline>
				<outline text="};"></outline>
				</outline>
			<outline text="this.insertText = function(text){">
				<outline text="var nodes = $(&quot;&lt;ol&gt;&lt;/ol&gt;&quot;);"></outline>
				<outline text="var lastLevel = 0;"></outline>
				<outline text="var startingline = 0;"></outline>
				<outline text="var startinglevel = 0;"></outline>
				<outline text="var lastNode = null;"></outline>
				<outline text="var parent = null;"></outline>
				<outline text="var parents = {};"></outline>
				<outline text="var lines = text.split(&quot;\n&quot;);"></outline>
				<outline text="var workflowy=true;"></outline>
				<outline text="var workflowyParent = null;"></outline>
				<outline text="var firstlinewithcontent = 0;"></outline>
				<outline text="for(var i = 0; i &lt; lines.length; i++){">
					<outline text="var line = lines[i];"></outline>
					<outline text="if(!line.match(/^\s*$/)){">
						<outline text="firstlinewithcontent = i;"></outline>
						<outline text="break;"></outline>
						<outline text="}"></outline>
						</outline>
					<outline text="}"></outline>
					</outline>
				<outline text="if(lines.length&gt;(firstlinewithcontent+2)){">
					<outline text="if((lines[firstlinewithcontent].match(/^([\t\s]*)\-.*$/)==null) &amp;&amp; lines[firstlinewithcontent].match(/^.+$/) &amp;&amp; (lines[firstlinewithcontent+1]==&quot;&quot;)){">
						<outline text="startingline = firstlinewithcontent+2;"></outline>
						<outline text="var workflowyParent = concordInstance.editor.makeNode();"></outline>
						<outline text="workflowyParent.children(&quot;.concord-wrapper&quot;).children(&quot;.concord-text&quot;).html(lines[firstlinewithcontent]);"></outline>
						<outline text="}"></outline>
						</outline>
					<outline text="}"></outline>
					</outline>
				<outline text="for(var i = startingline; i &lt; lines.length; i++){">
					<outline text="var line = lines[i];"></outline>
					<outline text="if((line!=&quot;&quot;) &amp;&amp; !line.match(/^\s+$/) &amp;&amp; (line.match(/^([\t\s]*)\-.*$/)==null)){">
						<outline text="workflowy=false;"></outline>
						<outline text="break;"></outline>
						<outline text="}"></outline>
						</outline>
					<outline text="}"></outline>
					</outline>
				<outline text="if(!workflowy){">
					<outline text="startingline = 0;"></outline>
					<outline text="workflowyParent=null;"></outline>
					<outline text="}"></outline>
					</outline>
				<outline text="for(var i = startingline; i &lt; lines.length; i++){">
					<outline text="var line = lines[i];"></outline>
					<outline text="if((line!=&quot;&quot;) &amp;&amp; !line.match(/^\s+$/)){">
						<outline text="var matches = line.match(/^([\t\s]*)(.+)$/);"></outline>
						<outline text="var node = concordInstance.editor.makeNode();"></outline>
						<outline text="var nodeText = concordInstance.editor.escape(matches[2]);"></outline>
						<outline text="if(workflowy){">
							<outline text="var nodeTextMatches = nodeText.match(/^([\t\s]*)\-\s*(.+)$/)"></outline>
							<outline text="if(nodeTextMatches!=null){">
								<outline text="nodeText = nodeTextMatches[2];"></outline>
								<outline text="}"></outline>
								</outline>
							<outline text="}"></outline>
							</outline>
						<outline text="node.children(&quot;.concord-wrapper&quot;).children(&quot;.concord-text&quot;).html(nodeText);"></outline>
						<outline text="var level = startinglevel;"></outline>
						<outline text="if(matches[1]){">
							<outline text="if(workflowy){">
								<outline text="level = (matches[1].length / 2) + startinglevel;"></outline>
								<outline text="}"></outline>
								</outline>
							<outline text="else {">
								<outline text="level = matches[1].length + startinglevel;"></outline>
								<outline text="}"></outline>
								</outline>
							<outline text="if(level&gt;lastLevel){">
								<outline text="parents[lastLevel]=lastNode;"></outline>
								<outline text="parent = lastNode;"></outline>
								<outline text="}else if ((level&gt;0) &amp;&amp; (level &lt; lastLevel)){">
									<outline text="parent = parents[level-1];"></outline>
									<outline text="}"></outline>
									</outline>
								</outline>
							<outline text="}"></outline>
							</outline>
						<outline text="if(parent &amp;&amp; (level &gt; 0)){">
							<outline text="parent.children(&quot;ol&quot;).append(node);"></outline>
							<outline text="parent.addClass(&quot;collapsed&quot;);"></outline>
							<outline text="}else{">
								<outline text="parents = {};"></outline>
								<outline text="nodes.append(node);"></outline>
								<outline text="}"></outline>
								</outline>
							</outline>
						<outline text="lastNode = node;"></outline>
						<outline text="lastLevel = level;"></outline>
						<outline text="}"></outline>
						</outline>
					<outline text="}"></outline>
					</outline>
				<outline text="if(workflowyParent){">
					<outline text="if(nodes.children().length &gt; 0){">
						<outline text="workflowyParent.addClass(&quot;collapsed&quot;);"></outline>
						<outline text="}"></outline>
						</outline>
					<outline text="var clonedNodes = nodes.clone();"></outline>
					<outline text="clonedNodes.children().appendTo(workflowyParent.children(&quot;ol&quot;));"></outline>
					<outline text="nodes = $(&quot;&lt;ol&gt;&lt;/ol&gt;&quot;);"></outline>
					<outline text="nodes.append(workflowyParent);"></outline>
					<outline text="}"></outline>
					</outline>
				<outline text="if(nodes.children().length&gt;0){">
					<outline text="this.saveState();"></outline>
					<outline text="this.setTextMode(false);"></outline>
					<outline text="var cursor = this.getCursor();"></outline>
					<outline text="nodes.children().insertAfter(cursor);"></outline>
					<outline text="this.setCursor(cursor.next());"></outline>
					<outline text="concordInstance.root.removeData(&quot;clipboard&quot;);"></outline>
					<outline text="this.markChanged();"></outline>
					<outline text="concordInstance.editor.recalculateLevels();"></outline>
					<outline text="}"></outline>
					</outline>
				<outline text="},"></outline>
				</outline>
			<outline text="this.insertXml = function(opmltext,dir){">
				<outline text="this.saveState();"></outline>
				<outline text="var doc = null;"></outline>
				<outline text="var nodes = $(&quot;&lt;ol&gt;&lt;/ol&gt;&quot;);"></outline>
				<outline text="var cursor = this.getCursor();"></outline>
				<outline text="var level = cursor.parents(&quot;.concord-node&quot;).length+1;"></outline>
				<outline text="if(!dir){">
					<outline text="dir = down;"></outline>
					<outline text="}"></outline>
					</outline>
				<outline text="switch(dir){">
					<outline text="case right:">
						<outline text="level+=1;"></outline>
						<outline text="break;"></outline>
						</outline>
					<outline text="case left:">
						<outline text="level-=1;"></outline>
						<outline text="break;"></outline>
						</outline>
					<outline text="}"></outline>
					</outline>
				<outline text="if(typeof opmltext == &quot;string&quot;) {">
					<outline text="doc = $($.parseXML(opmltext));"></outline>
					<outline text="} else {">
						<outline text="doc = $(opmltext);"></outline>
						<outline text="}"></outline>
						</outline>
					</outline>
				<outline text="doc.find(&quot;body&quot;).children(&quot;outline&quot;).each(function() {">
					<outline text="nodes.append(concordInstance.editor.build($(this), true, level));"></outline>
					<outline text="});"></outline>
					</outline>
				<outline text="var expansionState = doc.find(&quot;expansionState&quot;);"></outline>
				<outline text="if(expansionState &amp;&amp; expansionState.text() &amp;&amp; (expansionState.text()!=&quot;&quot;)){">
					<outline text="var expansionStates = expansionState.text().split(&quot;,&quot;);"></outline>
					<outline text="var nodeId=1;"></outline>
					<outline text="nodes.find(&quot;.concord-node&quot;).each(function(){">
						<outline text="if(expansionStates.indexOf(&quot;&quot;+nodeId) &gt;= 0){">
							<outline text="$(this).removeClass(&quot;collapsed&quot;);"></outline>
							<outline text="}"></outline>
							</outline>
						<outline text="nodeId++;"></outline>
						<outline text="});"></outline>
						</outline>
					<outline text="}"></outline>
					</outline>
				<outline text="switch(dir) {">
					<outline text="case down:">
						<outline text="nodes.children().insertAfter(cursor);"></outline>
						<outline text="break;"></outline>
						</outline>
					<outline text="case right:">
						<outline text="nodes.children().prependTo(cursor.children(&quot;ol&quot;));"></outline>
						<outline text="this.expand(false);"></outline>
						<outline text="break;"></outline>
						</outline>
					<outline text="case up:">
						<outline text="nodes.children().insertBefore(cursor);"></outline>
						<outline text="break;"></outline>
						</outline>
					<outline text="case left:">
						<outline text="var parent = cursor.parents(&quot;.concord-node:first&quot;);"></outline>
						<outline text="if(parent.length == 1) {">
							<outline text="nodes.children().insertAfter(parent);"></outline>
							<outline text="}"></outline>
							</outline>
						<outline text="break;"></outline>
						</outline>
					<outline text="}"></outline>
					</outline>
				<outline text="this.markChanged();"></outline>
				<outline text="return true;"></outline>
				<outline text="};"></outline>
				</outline>
			<outline text="this.inTextMode = function(){">
				<outline text="return root.hasClass(&quot;textMode&quot;);"></outline>
				<outline text="};"></outline>
				</outline>
			<outline text="this.italic = function(){">
				<outline text="this.saveState();"></outline>
				<outline text="if(this.inTextMode()){">
					<outline text="document.execCommand(&quot;italic&quot;);"></outline>
					<outline text="}else{">
						<outline text="this.focusCursor();"></outline>
						<outline text="document.execCommand(&quot;selectAll&quot;);"></outline>
						<outline text="document.execCommand(&quot;italic&quot;);"></outline>
						<outline text="document.execCommand(&quot;unselect&quot;);"></outline>
						<outline text="this.blurCursor();"></outline>
						<outline text="concordInstance.pasteBinFocus();"></outline>
						<outline text="}"></outline>
						</outline>
					</outline>
				<outline text="this.markChanged();"></outline>
				<outline text="};"></outline>
				</outline>
			<outline text="this.level = function(){">
				<outline text="return this.getCursor().parents(&quot;.concord-node&quot;).length+1;"></outline>
				<outline text="},"></outline>
				</outline>
			<outline text="this.link = function(url){">
				<outline text="if(this.inTextMode()){">
					<outline text="if(!concord.handleEvents){">
						<outline text="var instance = this;"></outline>
						<outline text="concord.onResume(function(){">
							<outline text="instance.link(url);"></outline>
							<outline text="});"></outline>
							</outline>
						<outline text="return;"></outline>
						<outline text="}"></outline>
						</outline>
					<outline text="var range = concordInstance.editor.getSelection();"></outline>
					<outline text="if(range===undefined){">
						<outline text="concordInstance.editor.restoreSelection();"></outline>
						<outline text="}"></outline>
						</outline>
					<outline text="if(concordInstance.editor.getSelection()){">
						<outline text="this.saveState();"></outline>
						<outline text="document.execCommand(&quot;createLink&quot;, null, url);"></outline>
						<outline text="this.markChanged();"></outline>
						<outline text="}"></outline>
						</outline>
					<outline text="}"></outline>
					</outline>
				<outline text="};"></outline>
				</outline>
			<outline text="this.markChanged = function() {">
				<outline text="root.data(&quot;changed&quot;, true);"></outline>
				<outline text="if(!this.inTextMode()){">
					<outline text="root.find(&quot;.concord-node.dirty&quot;).removeClass(&quot;dirty&quot;);"></outline>
					<outline text="}"></outline>
					</outline>
				<outline text="return true;"></outline>
				<outline text="};"></outline>
				</outline>
			<outline text="this.paste = function(){">
				<outline text="if(!this.inTextMode()){">
					<outline text="if(root.data(&quot;clipboard&quot;)!=null){">
						<outline text="var pasteNodes = root.data(&quot;clipboard&quot;).clone(true,true);"></outline>
						<outline text="if(pasteNodes.length&gt;0){">
							<outline text="this.saveState();"></outline>
							<outline text="root.find(&quot;.selected&quot;).removeClass(&quot;selected&quot;);"></outline>
							<outline text="pasteNodes.insertAfter(this.getCursor());"></outline>
							<outline text="this.setCursor($(pasteNodes[0]), (pasteNodes.length&gt;1));"></outline>
							<outline text="this.markChanged();"></outline>
							<outline text="}"></outline>
							</outline>
						<outline text="}"></outline>
						</outline>
					<outline text="}"></outline>
					</outline>
				<outline text="};"></outline>
				</outline>
			<outline text="this.promote = function() {">
				<outline text="var node = this.getCursor();"></outline>
				<outline text="if(node.children(&quot;ol&quot;).children().length &gt; 0){">
					<outline text="this.saveState();"></outline>
					<outline text="node.children(&quot;ol&quot;).children().reverse().each(function() {">
						<outline text="var child = $(this).clone(true, true);"></outline>
						<outline text="$(this).remove();"></outline>
						<outline text="node.after(child);"></outline>
						<outline text="});"></outline>
						</outline>
					<outline text="concordInstance.editor.recalculateLevels(node.parent().find(&quot;.concord-node&quot;));"></outline>
					<outline text="this.markChanged();"></outline>
					<outline text="}"></outline>
					</outline>
				<outline text="};"></outline>
				</outline>
			<outline text="this.redraw = function(){">
				<outline text="var ct = 1;"></outline>
				<outline text="var cursorIndex = 1;"></outline>
				<outline text="var wasChanged = this.changed();"></outline>
				<outline text="root.find(&quot;.concord-node:visible&quot;).each(function(){">
					<outline text="if($(this).hasClass(&quot;concord-cursor&quot;)){">
						<outline text="cursorIndex=ct;"></outline>
						<outline text="return false;"></outline>
						<outline text="}"></outline>
						</outline>
					<outline text="ct++;"></outline>
					<outline text="});"></outline>
					</outline>
				<outline text="this.xmlToOutline(this.outlineToXml());"></outline>
				<outline text="ct=1;"></outline>
				<outline text="var thisOp = this;"></outline>
				<outline text="root.find(&quot;.concord-node:visible&quot;).each(function(){">
					<outline text="if(cursorIndex==ct){">
						<outline text="thisOp.setCursor($(this));"></outline>
						<outline text="return false;"></outline>
						<outline text="}"></outline>
						</outline>
					<outline text="ct++;"></outline>
					<outline text="});"></outline>
					</outline>
				<outline text="if(wasChanged){">
					<outline text="this.markChanged();"></outline>
					<outline text="}"></outline>
					</outline>
				<outline text="};"></outline>
				</outline>
			<outline text="this.reorg = function(direction, count) {">
				<outline text="if(count===undefined) {">
					<outline text="count = 1;"></outline>
					<outline text="}"></outline>
					</outline>
				<outline text="var ableToMoveInDirection = false;"></outline>
				<outline text="var cursor = this.getCursor();"></outline>
				<outline text="var range = undefined;"></outline>
				<outline text="var toMove = this.getCursor();"></outline>
				<outline text="var selected = root.find(&quot;.selected&quot;);"></outline>
				<outline text="var iteration = 1;"></outline>
				<outline text="if(selected.length&gt;1){">
					<outline text="cursor = root.find(&quot;.selected:first&quot;);"></outline>
					<outline text="toMove = root.find(&quot;.selected&quot;);"></outline>
					<outline text="}"></outline>
					</outline>
				<outline text="switch(direction) {">
					<outline text="case up:">
						<outline text="var prev = cursor.prev();"></outline>
						<outline text="if(prev.length==1) {">
							<outline text="while(iteration &lt; count){">
								<outline text="if(prev.prev().length==1){">
									<outline text="prev = prev.prev();"></outline>
									<outline text="}"></outline>
									</outline>
								<outline text="else{">
									<outline text="break;"></outline>
									<outline text="}"></outline>
									</outline>
								<outline text="iteration++;"></outline>
								<outline text="}"></outline>
								</outline>
							<outline text="this.saveState();"></outline>
							<outline text="var clonedMove = toMove.clone(true, true);"></outline>
							<outline text="toMove.remove();"></outline>
							<outline text="clonedMove.insertBefore(prev);"></outline>
							<outline text="ableToMoveInDirection = true;"></outline>
							<outline text="}"></outline>
							</outline>
						<outline text="break;"></outline>
						</outline>
					<outline text="case down:">
						<outline text="if(!this.inTextMode()){">
							<outline text="cursor = root.find(&quot;.selected:last&quot;);"></outline>
							<outline text="}"></outline>
							</outline>
						<outline text="var next = cursor.next();"></outline>
						<outline text="if(next.length==1) {">
							<outline text="while(iteration &lt; count){">
								<outline text="if(next.next().length==1){">
									<outline text="next = next.next();"></outline>
									<outline text="}"></outline>
									</outline>
								<outline text="else{">
									<outline text="break;"></outline>
									<outline text="}"></outline>
									</outline>
								<outline text="iteration++;"></outline>
								<outline text="}"></outline>
								</outline>
							<outline text="this.saveState();"></outline>
							<outline text="var clonedMove = toMove.clone(true, true);"></outline>
							<outline text="toMove.remove();"></outline>
							<outline text="clonedMove.insertAfter(next);"></outline>
							<outline text="ableToMoveInDirection = true;"></outline>
							<outline text="}"></outline>
							</outline>
						<outline text="break;"></outline>
						</outline>
					<outline text="case left:">
						<outline text="var outline = cursor.parent();"></outline>
						<outline text="if(!outline.hasClass(&quot;concord-root&quot;)) {">
							<outline text="var parent = outline.parent();"></outline>
							<outline text="while(iteration &lt; count){">
								<outline text="var parentParent = parent.parents(&quot;.concord-node:first&quot;);"></outline>
								<outline text="if(parentParent.length==1){">
									<outline text="parent = parentParent;"></outline>
									<outline text="}"></outline>
									</outline>
								<outline text="else{">
									<outline text="break;"></outline>
									<outline text="}"></outline>
									</outline>
								<outline text="iteration++;"></outline>
								<outline text="}"></outline>
								</outline>
							<outline text="this.saveState();"></outline>
							<outline text="var clonedMove = toMove.clone(true, true);"></outline>
							<outline text="toMove.remove();"></outline>
							<outline text="clonedMove.insertAfter(parent);"></outline>
							<outline text="concordInstance.editor.recalculateLevels(parent.nextAll(&quot;.concord-node&quot;));"></outline>
							<outline text="ableToMoveInDirection = true;"></outline>
							<outline text="}"></outline>
							</outline>
						<outline text="break;"></outline>
						</outline>
					<outline text="case right:">
						<outline text="var prev = cursor.prev();"></outline>
						<outline text="if(prev.length == 1) {">
							<outline text="this.saveState();"></outline>
							<outline text="while(iteration &lt; count){">
								<outline text="if(prev.children(&quot;ol&quot;).length==1){">
									<outline text="var prevNode = prev.children(&quot;ol&quot;).children(&quot;.concord-node:last&quot;);"></outline>
									<outline text="if(prevNode.length==1){">
										<outline text="prev = prevNode;"></outline>
										<outline text="}"></outline>
										</outline>
									<outline text="else{">
										<outline text="break;"></outline>
										<outline text="}"></outline>
										</outline>
									<outline text="}"></outline>
									</outline>
								<outline text="else{">
									<outline text="break;"></outline>
									<outline text="}"></outline>
									</outline>
								<outline text="iteration++;"></outline>
								<outline text="}"></outline>
								</outline>
							<outline text="var prevOutline = prev.children(&quot;ol&quot;);"></outline>
							<outline text="if(prevOutline.length == 0) {">
								<outline text="prevOutline = $(&quot;&lt;ol&gt;&lt;/ol&gt;&quot;);"></outline>
								<outline text="prevOutline.appendTo(prev);"></outline>
								<outline text="}"></outline>
								</outline>
							<outline text="var clonedMove = toMove.clone(true, true);"></outline>
							<outline text="toMove.remove();"></outline>
							<outline text="clonedMove.appendTo(prevOutline);"></outline>
							<outline text="prev.removeClass(&quot;collapsed&quot;);"></outline>
							<outline text="concordInstance.editor.recalculateLevels(prev.find(&quot;.concord-node&quot;));"></outline>
							<outline text="ableToMoveInDirection = true;"></outline>
							<outline text="}"></outline>
							</outline>
						<outline text="break;"></outline>
						</outline>
					<outline text="}"></outline>
					</outline>
				<outline text="if(ableToMoveInDirection){">
					<outline text="if(this.inTextMode()){">
						<outline text="this.setCursor(this.getCursor());"></outline>
						<outline text="}"></outline>
						</outline>
					<outline text="this.markChanged();"></outline>
					<outline text="var node = this.getCursor (); //5/9/21 by DW"></outline>
					<outline text="concordInstance.fireCallback (&quot;opReorg&quot;, this.setCursorContext (node)); //5/9/21 by DW"></outline>
					<outline text="}"></outline>
					</outline>
				<outline text="return ableToMoveInDirection;"></outline>
				<outline text="};"></outline>
				</outline>
			<outline text="this.runSelection = function(){">
				<outline text="var value = eval (this.getLineText());"></outline>
				<outline text="this.deleteSubs();"></outline>
				<outline text="this.insert(value, &quot;right&quot;);"></outline>
				<outline text="concordInstance.script.makeComment();"></outline>
				<outline text="this.go(&quot;left&quot;, 1);"></outline>
				<outline text="};"></outline>
				</outline>
			<outline text="this.saveState = function(){">
				<outline text="root.data(&quot;change&quot;, root.children().clone(true, true));"></outline>
				<outline text="root.data(&quot;changeTextMode&quot;, this.inTextMode());"></outline>
				<outline text="if(this.inTextMode()){">
					<outline text="var range = concordInstance.editor.getSelection();"></outline>
					<outline text="if( range){">
						<outline text="root.data(&quot;changeRange&quot;,range.cloneRange());"></outline>
						<outline text="}else{">
							<outline text="root.data(&quot;changeRange&quot;, undefined);"></outline>
							<outline text="}"></outline>
							</outline>
						</outline>
					<outline text="}else{">
						<outline text="root.data(&quot;changeRange&quot;, undefined);"></outline>
						<outline text="}"></outline>
						</outline>
					</outline>
				<outline text="return true;"></outline>
				<outline text="};"></outline>
				</outline>
			<outline text="this.setCursor = function(node, multiple, multipleRange){">
				<outline text="root.find(&quot;.concord-cursor&quot;).removeClass(&quot;concord-cursor&quot;);"></outline>
				<outline text="node.addClass(&quot;concord-cursor&quot;);"></outline>
				<outline text="if(this.inTextMode()){">
					<outline text="concordInstance.editor.edit(node);"></outline>
					<outline text="}else{">
						<outline text="concordInstance.editor.select(node, multiple, multipleRange);"></outline>
						<outline text="concordInstance.pasteBinFocus();"></outline>
						<outline text="}"></outline>
						</outline>
					</outline>
				<outline text="concordInstance.fireCallback(&quot;opCursorMoved&quot;, this.setCursorContext(node));"></outline>
				<outline text="concordInstance.editor.hideContextMenu();"></outline>
				<outline text="};"></outline>
				</outline>
			<outline text="this.setCursorContext = function(cursor){">
				<outline text="return new ConcordOp(root,concordInstance,cursor);"></outline>
				<outline text="};"></outline>
				</outline>
			<outline text="this.setHeaders = function(headers){">
				<outline text="root.data(&quot;head&quot;, headers);"></outline>
				<outline text="this.markChanged();"></outline>
				<outline text="},"></outline>
				</outline>
			<outline text="this.setLineText = function(text) {">
				<outline text="this.saveState();"></outline>
				<outline text="var node = this.getCursor();"></outline>
				<outline text="if(node.length == 1) {">
					<outline text="node.children(&quot;.concord-wrapper:first&quot;).children(&quot;.concord-text:first&quot;).html(concordInstance.editor.escape(text));"></outline>
					<outline text="return true;"></outline>
					<outline text="} else {">
						<outline text="return false;"></outline>
						<outline text="}"></outline>
						</outline>
					</outline>
				<outline text="this.markChanged();"></outline>
				<outline text="};"></outline>
				</outline>
			<outline text="this.setRenderMode = function(mode){">
				<outline text="root.data(&quot;renderMode&quot;, mode);"></outline>
				<outline text="this.redraw();"></outline>
				<outline text="return true;"></outline>
				<outline text="};"></outline>
				</outline>
			<outline text="this.setStyle = function(css){">
				<outline text="root.parent().find(&quot;style.customStyle&quot;).remove();"></outline>
				<outline text="root.before('&lt;style type=&quot;text/css&quot; class=&quot;customStyle&quot;&gt;'+ css + '&lt;/style&gt;');"></outline>
				<outline text="return true;"></outline>
				<outline text="};"></outline>
				</outline>
			<outline text="this.setTextMode = function(textMode){">
				<outline text="var readonly = concordInstance.prefs()[&quot;readonly&quot;];"></outline>
				<outline text="if(readonly==undefined){">
					<outline text="readonly = false;"></outline>
					<outline text="}"></outline>
					</outline>
				<outline text="if(readonly){">
					<outline text="return;"></outline>
					<outline text="}"></outline>
					</outline>
				<outline text="if(root.hasClass(&quot;textMode&quot;) == textMode){">
					<outline text="return;"></outline>
					<outline text="}"></outline>
					</outline>
				<outline text="if(textMode==true){">
					<outline text="root.addClass(&quot;textMode&quot;);"></outline>
					<outline text="concordInstance.editor.editorMode();"></outline>
					<outline text="concordInstance.editor.edit(this.getCursor());"></outline>
					<outline text="}else{">
						<outline text="root.removeClass(&quot;textMode&quot;);"></outline>
						<outline text="root.find(&quot;.editing&quot;).removeClass(&quot;editing&quot;);"></outline>
						<outline text="this.blurCursor();"></outline>
						<outline text="concordInstance.editor.select(this.getCursor());"></outline>
						<outline text="}"></outline>
						</outline>
					</outline>
				<outline text="};"></outline>
				</outline>
			<outline text="this.setTitle = function(title) {">
				<outline text="root.data(&quot;title&quot;, title);"></outline>
				<outline text="return true;"></outline>
				<outline text="};"></outline>
				</outline>
			<outline text="this.strikethrough = function(){">
				<outline text="this.saveState();"></outline>
				<outline text="if(this.inTextMode()){">
					<outline text="document.execCommand(&quot;strikeThrough&quot;);"></outline>
					<outline text="}else{">
						<outline text="this.focusCursor();"></outline>
						<outline text="document.execCommand(&quot;selectAll&quot;);"></outline>
						<outline text="document.execCommand(&quot;strikeThrough&quot;);"></outline>
						<outline text="document.execCommand(&quot;unselect&quot;);"></outline>
						<outline text="this.blurCursor();"></outline>
						<outline text="concordInstance.pasteBinFocus();"></outline>
						<outline text="}"></outline>
						</outline>
					</outline>
				<outline text="this.markChanged();"></outline>
				<outline text="};"></outline>
				</outline>
			<outline text="this.subsExpanded = function() {">
				<outline text="var node = this.getCursor();"></outline>
				<outline text="if(node.length == 1) {">
					<outline text="if(!node.hasClass(&quot;collapsed&quot;) &amp;&amp; (node.children(&quot;ol&quot;).children().size() &gt; 0)) {">
						<outline text="return true;"></outline>
						<outline text="} else {">
							<outline text="return false;"></outline>
							<outline text="}"></outline>
							</outline>
						</outline>
					<outline text="}"></outline>
					</outline>
				<outline text="return false;"></outline>
				<outline text="};"></outline>
				</outline>
			<outline text="this.outlineToText = function(){">
				<outline text="var text = &quot;&quot;;"></outline>
				<outline text="root.children(&quot;.concord-node&quot;).each(function() {">
					<outline text="text+= concordInstance.editor.textLine($(this));"></outline>
					<outline text="});"></outline>
					</outline>
				<outline text="return text;"></outline>
				<outline text="};"></outline>
				</outline>
			<outline text="this.saveCursor = function () { //8/5/14 by DW -- so we can save the location of the cursor in an OPML file">
				<outline text="var cursor = this.getCursor (), prev, ct = 0;"></outline>
				<outline text="while (true) {">
					<outline text="var prev = this._walk_up (cursor);"></outline>
					<outline text="if (prev) {">
						<outline text="cursor = prev;"></outline>
						<outline text="ct++;"></outline>
						<outline text="}"></outline>
						</outline>
					<outline text="else {">
						<outline text="break;"></outline>
						<outline text="}"></outline>
						</outline>
					<outline text="}"></outline>
					</outline>
				<outline text="return (ct);"></outline>
				<outline text="}"></outline>
				</outline>
			<outline text="this.sort = function () { //3/7/20 by DW -- sort the list containing the bar cursor headline">
				<outline text="this.saveState ();"></outline>
				<outline text="var mycursor = this.getCursor ();"></outline>
				<outline text="var parentnode = $(mycursor).parent ();"></outline>
				<outline text="var items = $(parentnode).children ();"></outline>
				<outline text="items.sort (function (a, b) {">
					<outline text="var keyA = $(a).text ().toLowerCase ();"></outline>
					<outline text="var keyB = $(b).text ().toLowerCase ();"></outline>
					<outline text="if (keyA &lt; keyB) return -1;"></outline>
					<outline text="if (keyA &gt; keyB) return 1;"></outline>
					<outline text="return 0;"></outline>
					<outline text="});"></outline>
					</outline>
				<outline text="$.each (items, function (i, li) {">
					<outline text="parentnode.append (li); //removes it from the old spot and moves it"></outline>
					<outline text="});"></outline>
					</outline>
				<outline text="this.markChanged ();"></outline>
				<outline text="}"></outline>
				</outline>
			<outline text="this.outlineToXml = function(ownerName, ownerEmail, ownerId) {">
				<outline text="var head = this.getHeaders();"></outline>
				<outline text="if(ownerName) {">
					<outline text="head[&quot;ownerName&quot;] = ownerName;"></outline>
					<outline text="}"></outline>
					</outline>
				<outline text="if(ownerEmail) {">
					<outline text="head[&quot;ownerEmail&quot;] = ownerEmail;"></outline>
					<outline text="}"></outline>
					</outline>
				<outline text="if(ownerId) {">
					<outline text="head[&quot;ownerId&quot;] = ownerId;"></outline>
					<outline text="}"></outline>
					</outline>
				<outline text="var title = this.getTitle();"></outline>
				<outline text="if(!title) {">
					<outline text="title = &quot;&quot;;"></outline>
					<outline text="}"></outline>
					</outline>
				<outline text="head[&quot;title&quot;] = title;"></outline>
				<outline text="head[&quot;dateModified&quot;] = (new Date()).toGMTString();"></outline>
				<outline text="var expansionStates = [];"></outline>
				<outline text="var nodeId = 1;"></outline>
				<outline text="var cursor = root.find(&quot;.concord-node:first&quot;);"></outline>
				<outline text="do {">
					<outline text="if(cursor) {">
						<outline text="if(!cursor.hasClass(&quot;collapsed&quot;) &amp;&amp; (cursor.children(&quot;ol&quot;).children().size() &gt; 0)) {">
							<outline text="expansionStates.push(nodeId);"></outline>
							<outline text="}"></outline>
							</outline>
						<outline text="nodeId++;"></outline>
						<outline text="}else{">
							<outline text="break;"></outline>
							<outline text="}"></outline>
							</outline>
						</outline>
					<outline text="var next = null;"></outline>
					<outline text="if(!cursor.hasClass(&quot;collapsed&quot;)) {">
						<outline text="var outline = cursor.children(&quot;ol&quot;);"></outline>
						<outline text="if(outline.length == 1) {">
							<outline text="var firstChild = outline.children(&quot;.concord-node:first&quot;);"></outline>
							<outline text="if(firstChild.length == 1) {">
								<outline text="next = firstChild;"></outline>
								<outline text="}"></outline>
								</outline>
							<outline text="}"></outline>
							</outline>
						<outline text="}"></outline>
						</outline>
					<outline text="if(!next) {">
						<outline text="next = this._walk_down(cursor);"></outline>
						<outline text="}"></outline>
						</outline>
					<outline text="cursor = next;"></outline>
					<outline text="} while(cursor!=null);"></outline>
					</outline>
				<outline text="head[&quot;expansionState&quot;] = expansionStates.join(&quot;,&quot;);"></outline>
				<outline text=""></outline>
				<outline text="head[&quot;lastCursor&quot;] = this.saveCursor (); //8/5/14 by DW"></outline>
				<outline text=""></outline>
				<outline text="var opml = '';"></outline>
				<outline text="var indent=0;"></outline>
				<outline text="var add = function(s){">
					<outline text="for(var i = 0; i &lt; indent; i++){">
						<outline text="opml+='\t';"></outline>
						<outline text="}"></outline>
						<outline text="opml+=s+'\n';"></outline>
						</outline>
					<outline text="};"></outline>
					</outline>
				<outline text="add('&lt;?xml version=&quot;1.0&quot;?&gt;');"></outline>
				<outline text="add('&lt;opml version=&quot;2.0&quot;&gt;');"></outline>
				<outline text="indent++;"></outline>
				<outline text="add('&lt;head&gt;');"></outline>
				<outline text="indent++;"></outline>
				<outline text="for(var headName in head){">
					<outline text="if(head[headName]!==undefined){">
						<outline text="add('&lt;'+headName+'&gt;' + ConcordUtil.escapeXml(head[headName]) + '&lt;/' + headName + '&gt;');"></outline>
						<outline text="}"></outline>
						</outline>
					<outline text="}"></outline>
					</outline>
				<outline text="add('&lt;/head&gt;');"></outline>
				<outline text="indent--;"></outline>
				<outline text="add('&lt;body&gt;');"></outline>
				<outline text="indent++;"></outline>
				<outline text="root.children(&quot;.concord-node&quot;).each(function() {">
					<outline text="opml += concordInstance.editor.opmlLine($(this), indent);"></outline>
					<outline text="});"></outline>
					</outline>
				<outline text="add('&lt;/body&gt;');"></outline>
				<outline text="indent--;"></outline>
				<outline text="add('&lt;/opml&gt;');"></outline>
				<outline text="return opml;"></outline>
				<outline text="};"></outline>
				</outline>
			<outline text="this.undo = function(){">
				<outline text="var stateBeforeChange = root.children().clone(true, true);"></outline>
				<outline text="var textModeBeforeChange = this.inTextMode();"></outline>
				<outline text="var beforeRange = undefined;"></outline>
				<outline text="if(this.inTextMode()){">
					<outline text="var range = concordInstance.editor.getSelection();"></outline>
					<outline text="if(range){">
						<outline text="beforeRange = range.cloneRange();"></outline>
						<outline text="}"></outline>
						</outline>
					<outline text="}"></outline>
					</outline>
				<outline text="if(root.data(&quot;change&quot;)){">
					<outline text="root.empty();"></outline>
					<outline text="root.data(&quot;change&quot;).appendTo(root);"></outline>
					<outline text="this.setTextMode(root.data(&quot;changeTextMode&quot;));"></outline>
					<outline text="if(this.inTextMode()){">
						<outline text="this.focusCursor();"></outline>
						<outline text="var range = root.data(&quot;changeRange&quot;);"></outline>
						<outline text="if(range){">
							<outline text="concordInstance.editor.restoreSelection(range);"></outline>
							<outline text="}"></outline>
							</outline>
						<outline text="}"></outline>
						</outline>
					<outline text="root.data(&quot;change&quot;, stateBeforeChange);"></outline>
					<outline text="root.data(&quot;changeTextMode&quot;, textModeBeforeChange);"></outline>
					<outline text="root.data(&quot;changeRange&quot;, beforeRange);"></outline>
					<outline text="return true;"></outline>
					<outline text="}"></outline>
					</outline>
				<outline text="return false;"></outline>
				<outline text="};"></outline>
				</outline>
			<outline text="this.visitLevel = function(cb){">
				<outline text="var cursor = this.getCursor();"></outline>
				<outline text="var op = this;"></outline>
				<outline text="cursor.children(&quot;ol&quot;).children().each(function(){">
					<outline text="var subCursorContext = op.setCursorContext($(this));"></outline>
					<outline text="cb(subCursorContext);"></outline>
					<outline text="});"></outline>
					</outline>
				<outline text="return true;"></outline>
				<outline text="};"></outline>
				</outline>
			<outline text="this.visitToSummit = function(cb){">
				<outline text="var cursor = this.getCursor();"></outline>
				<outline text="while(cb(this.setCursorContext(cursor))){">
					<outline text="var parent = cursor.parents(&quot;.concord-node:first&quot;);"></outline>
					<outline text="if(parent.length==1){">
						<outline text="cursor=parent;"></outline>
						<outline text="}else{">
							<outline text="break;"></outline>
							<outline text="}"></outline>
							</outline>
						</outline>
					<outline text="}"></outline>
					</outline>
				<outline text="return true;"></outline>
				<outline text="};"></outline>
				</outline>
			<outline text="this.visitAll = function(cb){">
				<outline text="var op = this;"></outline>
				<outline text="root.find(&quot;.concord-node&quot;).each(function(){">
					<outline text="var subCursorContext = op.setCursorContext($(this));"></outline>
					<outline text="var retVal = cb(subCursorContext);"></outline>
					<outline text="if((retVal!==undefined) &amp;&amp; (retVal===false)){">
						<outline text="return false;"></outline>
						<outline text="}"></outline>
						</outline>
					<outline text="});"></outline>
					</outline>
				<outline text="},"></outline>
				</outline>
			<outline text="this.wipe = function() {">
				<outline text="if(root.find(&quot;.concord-node&quot;).length &gt; 0){">
					<outline text="this.saveState();"></outline>
					<outline text="}"></outline>
					</outline>
				<outline text="root.empty();"></outline>
				<outline text="var node = concordInstance.editor.makeNode();"></outline>
				<outline text="root.append(node);"></outline>
				<outline text="this.setTextMode(false);"></outline>
				<outline text="this.setCursor(node);"></outline>
				<outline text="this.markChanged();"></outline>
				<outline text="};"></outline>
				</outline>
			<outline text="this.xmlToOutline = function(xmlText, flSetFocus, flInsertRawHtml) { //2/22/14 by DW -- new param, flSetFocus. 9/18/20 by DW -- flInsertRawHtml">
				<outline text=""></outline>
				<outline text="if (flSetFocus == undefined) { //2/22/14 by DW">
					<outline text="flSetFocus = true;"></outline>
					<outline text="}"></outline>
					</outline>
				<outline text=""></outline>
				<outline text="var doc = null;"></outline>
				<outline text="if(typeof xmlText == &quot;string&quot;) {">
					<outline text="doc = $($.parseXML(xmlText));"></outline>
					<outline text="} else {">
						<outline text="doc = $(xmlText);"></outline>
						<outline text="}"></outline>
						</outline>
					</outline>
				<outline text="root.empty();"></outline>
				<outline text="var title = &quot;&quot;;"></outline>
				<outline text="if(doc.find(&quot;title:first&quot;).length==1){">
					<outline text="title = doc.find(&quot;title:first&quot;).text();"></outline>
					<outline text="}"></outline>
					</outline>
				<outline text="this.setTitle(title);"></outline>
				<outline text="var headers = {};"></outline>
				<outline text="doc.find(&quot;head&quot;).children().each(function(){">
					<outline text="headers[$(this).prop(&quot;tagName&quot;)] = $(this).text();"></outline>
					<outline text="});"></outline>
					</outline>
				<outline text="root.data(&quot;head&quot;, headers);"></outline>
				<outline text="doc.find(&quot;body&quot;).children(&quot;outline&quot;).each(function() {">
					<outline text="root.append(concordInstance.editor.build($(this), true, undefined, flInsertRawHtml)); //9/18/20 by DW -- pass new flInsertRawHtml param"></outline>
					<outline text="});"></outline>
					</outline>
				<outline text="root.data(&quot;changed&quot;, false);"></outline>
				<outline text="root.removeData(&quot;previousChange&quot;);"></outline>
				<outline text="var expansionState = doc.find(&quot;expansionState&quot;);"></outline>
				<outline text="if(expansionState &amp;&amp; expansionState.text() &amp;&amp; (expansionState.text()!=&quot;&quot;)){">
					<outline text="var expansionStates = expansionState.text().split(/\s*,\s*/);"></outline>
					<outline text="var nodeId = 1;"></outline>
					<outline text="var cursor = root.find(&quot;.concord-node:first&quot;);"></outline>
					<outline text="do {">
						<outline text="if(cursor) {">
							<outline text="if(expansionStates.indexOf(&quot;&quot;+nodeId) &gt;= 0){">
								<outline text="cursor.removeClass(&quot;collapsed&quot;);"></outline>
								<outline text="}"></outline>
								</outline>
							<outline text="nodeId++;"></outline>
							<outline text="}else{">
								<outline text="break;"></outline>
								<outline text="}"></outline>
								</outline>
							</outline>
						<outline text="var next = null;"></outline>
						<outline text="if(!cursor.hasClass(&quot;collapsed&quot;)) {">
							<outline text="var outline = cursor.children(&quot;ol&quot;);"></outline>
							<outline text="if(outline.length == 1) {">
								<outline text="var firstChild = outline.children(&quot;.concord-node:first&quot;);"></outline>
								<outline text="if(firstChild.length == 1) {">
									<outline text="next = firstChild;"></outline>
									<outline text="}"></outline>
									</outline>
								<outline text="}"></outline>
								</outline>
							<outline text="}"></outline>
							</outline>
						<outline text="if(!next) {">
							<outline text="next = this._walk_down(cursor);"></outline>
							<outline text="}"></outline>
							</outline>
						<outline text="cursor = next;"></outline>
						<outline text="} while(cursor!=null);"></outline>
						</outline>
					<outline text="}"></outline>
					</outline>
				<outline text="this.setTextMode(false);"></outline>
				<outline text=""></outline>
				<outline text="if (flSetFocus) {">
					<outline text="var lastCursor = doc.find (&quot;lastCursor&quot;); //8/5/14 by DW"></outline>
					<outline text="this.setCursor (root.find (&quot;.concord-node:first&quot;));"></outline>
					<outline text="if (lastCursor &amp;&amp; lastCursor.text () &amp;&amp; (lastCursor.text () != &quot;&quot;)) { //8/5/14 by DW">
						<outline text="var ix = parseInt (lastCursor.text ());"></outline>
						<outline text="if (ix != NaN) {">
							<outline text="var cursor = this.getCursor (), flCursorMoved = false;"></outline>
							<outline text="for (var i = 1; i &lt;= ix; i++) {">
								<outline text="var next = null;"></outline>
								<outline text="if (!cursor.hasClass (&quot;collapsed&quot;)) {">
									<outline text="var outline = cursor.children (&quot;ol&quot;);"></outline>
									<outline text="if (outline.length == 1) {">
										<outline text="var firstChild = outline.children (&quot;.concord-node:first&quot;);"></outline>
										<outline text="if (firstChild.length == 1) {">
											<outline text="next = firstChild;"></outline>
											<outline text="}"></outline>
											</outline>
										<outline text="}"></outline>
										</outline>
									<outline text="}"></outline>
									</outline>
								<outline text="if (!next) {">
									<outline text="next = this._walk_down (cursor);"></outline>
									<outline text="}"></outline>
									</outline>
								<outline text="cursor = next;"></outline>
								<outline text="flCursorMoved = true;"></outline>
								<outline text="}"></outline>
								</outline>
							<outline text="if (flCursorMoved) {">
								<outline text="this.setCursor (next);"></outline>
								<outline text="}"></outline>
								</outline>
							<outline text="}"></outline>
							</outline>
						<outline text="}"></outline>
						</outline>
					<outline text="}"></outline>
					</outline>
				<outline text=""></outline>
				<outline text="root.data(&quot;currentChange&quot;, root.children().clone(true, true));"></outline>
				<outline text="return true;"></outline>
				<outline text="};"></outline>
				</outline>
			<outline text="this.attributes = new ConcordOpAttributes(concordInstance, this.getCursor());"></outline>
			<outline text="}"></outline>
			</outline>
		<outline text="function ConcordOpAttributes(concordInstance, cursor) {">
			<outline text="this._cssTextClassName = &quot;cssTextClass&quot;;"></outline>
			<outline text="this._cssTextClass = function(newValue){">
				<outline text="if(newValue===undefined){">
					<outline text="return;"></outline>
					<outline text="}"></outline>
					</outline>
				<outline text="var newCssClasses = newValue.split(/\s+/);"></outline>
				<outline text="var concordText = cursor.children(&quot;.concord-wrapper:first&quot;).children(&quot;.concord-text:first&quot;);"></outline>
				<outline text="var currentCssClass = concordText.attr(&quot;class&quot;);"></outline>
				<outline text="if(currentCssClass){">
					<outline text="var cssClassesArray = currentCssClass.split(/\s+/);"></outline>
					<outline text="for(var i in cssClassesArray){">
						<outline text="var className = cssClassesArray[i];"></outline>
						<outline text="if(className.match(/^concord\-.+$/) == null){">
							<outline text="concordText.removeClass(className);"></outline>
							<outline text="}"></outline>
							</outline>
						<outline text="}"></outline>
						</outline>
					<outline text="}"></outline>
					</outline>
				<outline text="for(var j in newCssClasses){">
					<outline text="var newClass = newCssClasses[j];"></outline>
					<outline text="concordText.addClass(newClass);"></outline>
					<outline text="}"></outline>
					</outline>
				<outline text="};"></outline>
				</outline>
			<outline text="this.addGroup = function(attributes) {">
				<outline text="if(attributes[&quot;type&quot;]){">
					<outline text="cursor.attr(&quot;opml-type&quot;, attributes[&quot;type&quot;]);"></outline>
					<outline text="}"></outline>
					</outline>
				<outline text="else {">
					<outline text="cursor.removeAttr(&quot;opml-type&quot;);"></outline>
					<outline text="}"></outline>
					</outline>
				<outline text="this._cssTextClass(attributes[this._cssTextClassName]);"></outline>
				<outline text="var finalAttributes = this.getAll();"></outline>
				<outline text="var iconAttribute = &quot;type&quot;;"></outline>
				<outline text="if(attributes[&quot;icon&quot;]){">
					<outline text="iconAttribute = &quot;icon&quot;;"></outline>
					<outline text="}"></outline>
					</outline>
				<outline text="for(var name in attributes){">
					<outline text="finalAttributes[name] = attributes[name];"></outline>
					<outline text="if(name==iconAttribute){">
						<outline text="var value = attributes[name];"></outline>
						<outline text="var wrapper = cursor.children(&quot;.concord-wrapper&quot;);"></outline>
						<outline text="var iconName = null;"></outline>
						<outline text="if((name == &quot;type&quot;) &amp;&amp; concordInstance.prefs() &amp;&amp; concordInstance.prefs().typeIcons &amp;&amp; concordInstance.prefs().typeIcons[value]){">
							<outline text="iconName = concordInstance.prefs().typeIcons[value];"></outline>
							<outline text="}else if (name==&quot;icon&quot;){">
								<outline text="iconName = value;"></outline>
								<outline text="}"></outline>
								</outline>
							</outline>
						<outline text="if(iconName){">
							<outline text="var icon = ConcordUtil.getIconHtml (iconName);"></outline>
							<outline isComment="true" text="var icon = &quot;&lt;i&quot;+&quot; class=\&quot;node-icon fa fa-&quot;+ iconName +&quot;\&quot;&gt;&lt;&quot;+&quot;/i&gt;&quot;;"></outline>
							<outline text="wrapper.children(&quot;.node-icon:first&quot;).replaceWith(icon);"></outline>
							<outline text="}"></outline>
							</outline>
						<outline text="}"></outline>
						</outline>
					<outline text="}"></outline>
					</outline>
				<outline text="cursor.data(&quot;attributes&quot;, finalAttributes);"></outline>
				<outline text="concordInstance.op.markChanged();"></outline>
				<outline text="return finalAttributes;"></outline>
				<outline text="};"></outline>
				</outline>
			<outline text="this.setGroup = function(attributes) {">
				<outline text="if(attributes[this._cssTextClassName]!==undefined){">
					<outline text="this._cssTextClass(attributes[this._cssTextClassName]);"></outline>
					<outline text="}"></outline>
					</outline>
				<outline text="else {">
					<outline text="this._cssTextClass(&quot;&quot;);"></outline>
					<outline text="}"></outline>
					</outline>
				<outline text="cursor.data(&quot;attributes&quot;, attributes);"></outline>
				<outline text="var wrapper = cursor.children(&quot;.concord-wrapper&quot;);"></outline>
				<outline text="$(cursor[0].attributes).each(function() {">
					<outline text="var matches = this.name.match(/^opml-(.+)$/)"></outline>
					<outline text="if(matches) {">
						<outline text="var name = matches[1];"></outline>
						<outline text="if(!attributes[name]) {">
							<outline text="cursor.removeAttr(this.name);"></outline>
							<outline text="}"></outline>
							</outline>
						<outline text="}"></outline>
						</outline>
					<outline text="});"></outline>
					</outline>
				<outline text="var iconAttribute = &quot;type&quot;;"></outline>
				<outline text="if(attributes[&quot;icon&quot;]){">
					<outline text="iconAttribute = &quot;icon&quot;;"></outline>
					<outline text="}"></outline>
					</outline>
				<outline text="if(name==&quot;type&quot;){">
					<outline text="cursor.attr(&quot;opml-&quot; + name, attributes[name]);"></outline>
					<outline text="}"></outline>
					</outline>
				<outline text="for(var name in attributes) {">
					<outline text="if(name==iconAttribute){">
						<outline text="var value = attributes[name];"></outline>
						<outline text="var wrapper = cursor.children(&quot;.concord-wrapper&quot;);"></outline>
						<outline text="var iconName = null;"></outline>
						<outline text="if((name == &quot;type&quot;) &amp;&amp; concordInstance.prefs() &amp;&amp; concordInstance.prefs().typeIcons &amp;&amp; concordInstance.prefs().typeIcons[value]){">
							<outline text="iconName = concordInstance.prefs().typeIcons[value];"></outline>
							<outline text="}else if (name==&quot;icon&quot;){">
								<outline text="iconName = value;"></outline>
								<outline text="}"></outline>
								</outline>
							</outline>
						<outline text="if(iconName){">
							<outline text="var icon = ConcordUtil.getIconHtml (iconName);"></outline>
							<outline isComment="true" text="var icon = &quot;&lt;i&quot;+&quot; class=\&quot;node-icon fa fa-&quot;+ iconName +&quot;\&quot;&gt;&lt;&quot;+&quot;/i&gt;&quot;;"></outline>
							<outline text="wrapper.children(&quot;.node-icon:first&quot;).replaceWith(icon);"></outline>
							<outline text="}"></outline>
							</outline>
						<outline text="}"></outline>
						</outline>
					<outline text="}"></outline>
					</outline>
				<outline text="concordInstance.op.markChanged();"></outline>
				<outline text="return attributes;"></outline>
				<outline text="};"></outline>
				</outline>
			<outline text="this.getAll = function() {">
				<outline text="if(cursor.data(&quot;attributes&quot;) !== undefined){">
					<outline text="return cursor.data(&quot;attributes&quot;);"></outline>
					<outline text="}"></outline>
					</outline>
				<outline text="return {};"></outline>
				<outline text="};"></outline>
				</outline>
			<outline text="this.getOne = function(name) {">
				<outline text="return this.getAll()[name];"></outline>
				<outline text="};"></outline>
				</outline>
			<outline text="this.makeEmpty = function() {">
				<outline text="this._cssTextClass(&quot;&quot;);"></outline>
				<outline text="var numAttributes = 0;"></outline>
				<outline text="var atts = this.getAll();"></outline>
				<outline text="if(atts !== undefined){">
					<outline text="for(var i in atts){">
						<outline text="numAttributes++;"></outline>
						<outline text="}"></outline>
						</outline>
					<outline text="}"></outline>
					</outline>
				<outline text="cursor.removeData(&quot;attributes&quot;);"></outline>
				<outline text="var removedAnyAttributes = (numAttributes &gt; 0);"></outline>
				<outline text="var attributes = {};"></outline>
				<outline text="$(cursor[0].attributes).each(function() {">
					<outline text="var matches = this.name.match(/^opml-(.+)$/)"></outline>
					<outline text="if(matches) {">
						<outline text="cursor.removeAttr(this.name);"></outline>
						<outline text="}"></outline>
						</outline>
					<outline text="});"></outline>
					</outline>
				<outline text="if(removedAnyAttributes){">
					<outline text="concordInstance.op.markChanged();"></outline>
					<outline text="}"></outline>
					</outline>
				<outline text="return removedAnyAttributes;"></outline>
				<outline text="};"></outline>
				</outline>
			<outline text="this.setOne = function(name, value) {">
				<outline text="if(name==this._cssTextClassName){">
					<outline text="this._cssTextClass(value);"></outline>
					<outline text="}"></outline>
					</outline>
				<outline text="var atts = this.getAll();"></outline>
				<outline text="atts[name]=value;"></outline>
				<outline text="cursor.data(&quot;attributes&quot;, atts);"></outline>
				<outline text="if((name==&quot;type&quot; )|| (name==&quot;icon&quot;)){">
					<outline text="cursor.attr(&quot;opml-&quot; + name, value);"></outline>
					<outline text="var wrapper = cursor.children(&quot;.concord-wrapper&quot;);"></outline>
					<outline text="var iconName = null;"></outline>
					<outline text="if((name == &quot;type&quot;) &amp;&amp; concordInstance.prefs() &amp;&amp; concordInstance.prefs().typeIcons &amp;&amp; concordInstance.prefs().typeIcons[value]){">
						<outline text="iconName = concordInstance.prefs().typeIcons[value];"></outline>
						<outline text="}else if (name==&quot;icon&quot;){">
							<outline text="iconName = value;"></outline>
							<outline text="}"></outline>
							</outline>
						</outline>
					<outline text="if(iconName){">
						<outline text="var icon = ConcordUtil.getIconHtml (iconName);"></outline>
						<outline isComment="true" text="var icon = &quot;&lt;i&quot;+&quot; class=\&quot;node-icon fa fa-&quot;+ iconName +&quot;\&quot;&gt;&lt;&quot;+&quot;/i&gt;&quot;;"></outline>
						<outline text="wrapper.children(&quot;.node-icon:first&quot;).replaceWith(icon);"></outline>
						<outline text="}"></outline>
						</outline>
					<outline text="}"></outline>
					</outline>
				<outline text="concordInstance.op.markChanged();"></outline>
				<outline text="return true;"></outline>
				<outline text="};"></outline>
				</outline>
			<outline text="this.exists = function(name){">
				<outline text="if(this.getOne(name) !== undefined){">
					<outline text="return true;"></outline>
					<outline text="}else{">
						<outline text="return false;"></outline>
						<outline text="}"></outline>
						</outline>
					</outline>
				<outline text="};"></outline>
				</outline>
			<outline text="this.removeOne = function(name){">
				<outline text="if(this.getAll()[name]){">
					<outline text="if(name == this._cssTextClassName){">
						<outline text="this._cssTextClass(&quot;&quot;);"></outline>
						<outline text="}"></outline>
						</outline>
					<outline text="delete this.getAll()[name];"></outline>
					<outline text="concordInstance.op.markChanged();"></outline>
					<outline text="return true;"></outline>
					<outline text="}"></outline>
					</outline>
				<outline text="return false;"></outline>
				<outline text="};"></outline>
				</outline>
			<outline text="}"></outline>
			</outline>
		<outline text="function ConcordScript(root, concordInstance){">
			<outline text="this.isComment = function(){">
				<outline text="if(concordInstance.op.attributes.getOne(&quot;isComment&quot;)!== undefined){">
					<outline text="return concordInstance.op.attributes.getOne(&quot;isComment&quot;)==&quot;true&quot;;"></outline>
					<outline text="}"></outline>
					</outline>
				<outline text="var parentIsAComment=false;"></outline>
				<outline text="concordInstance.op.getCursor().parents(&quot;.concord-node&quot;).each(function(){">
					<outline text="if(concordInstance.op.setCursorContext($(this)).attributes.getOne(&quot;isComment&quot;) == &quot;true&quot;){">
						<outline text="parentIsAComment = true;"></outline>
						<outline text="return;"></outline>
						<outline text="}"></outline>
						</outline>
					<outline text="});"></outline>
					</outline>
				<outline text="return parentIsAComment;"></outline>
				<outline text="};"></outline>
				</outline>
			<outline text="this.makeComment = function(){">
				<outline text="concordInstance.op.attributes.setOne(&quot;isComment&quot;, &quot;true&quot;);"></outline>
				<outline text="concordInstance.op.getCursor().addClass(&quot;concord-comment&quot;);"></outline>
				<outline text="return true;"></outline>
				<outline text="};"></outline>
				</outline>
			<outline text="this.unComment = function(){">
				<outline text="concordInstance.op.attributes.setOne(&quot;isComment&quot;, &quot;false&quot;);"></outline>
				<outline text="concordInstance.op.getCursor().removeClass(&quot;concord-comment&quot;);"></outline>
				<outline text="return true;"></outline>
				<outline text="};"></outline>
				</outline>
			<outline text="}"></outline>
			</outline>
		<outline text="function Op(opmltext){">
			<outline text="var fakeDom = $(&quot;&lt;div&gt;&lt;/div&gt;&quot;);"></outline>
			<outline text="fakeDom.concord().op.xmlToOutline(opmltext);"></outline>
			<outline text="return fakeDom.concord().op;"></outline>
			<outline text="}"></outline>
			</outline>
		<outline text="(function($) {">
			<outline text="$.fn.concord = function(options) {">
				<outline text="return new ConcordOutline($(this), options);"></outline>
				<outline text="};"></outline>
				</outline>
			<outline text="$(document).on(&quot;keydown&quot;, function(event) {">
				<outline text="if(!concord.handleEvents){">
					<outline text="return;"></outline>
					<outline text="}"></outline>
					</outline>
				<outline text="if($(event.target).is(&quot;input&quot;)||$(event.target).is(&quot;textarea&quot;)){">
					<outline text="return;"></outline>
					<outline text="}"></outline>
					</outline>
				<outline text="var focusRoot = concord.getFocusRoot();"></outline>
				<outline text="if(focusRoot==null){">
					<outline text="return;"></outline>
					<outline text="}"></outline>
					</outline>
				<outline text="var context = focusRoot;"></outline>
				<outline text="context.data(&quot;keydownEvent&quot;, event);"></outline>
				<outline text="var concordInstance = new ConcordOutline(context.parent());"></outline>
				<outline text="var readonly = concordInstance.prefs()[&quot;readonly&quot;];"></outline>
				<outline text="if(readonly==undefined){">
					<outline text="readonly=false;"></outline>
					<outline text="}"></outline>
					</outline>
				<outline text="// Readonly exceptions for arrow keys and cmd-comma"></outline>
				<outline text="if(readonly){">
					<outline text="if( (event.which&gt;=37) &amp;&amp; (event.which &lt;=40) ){">
						<outline text="readonly = false;"></outline>
						<outline text="}"></outline>
						</outline>
					<outline text="else if( (event.metaKey || event.ctrlKey) &amp;&amp; (event.which==188) ){">
						<outline text="readonly = false;"></outline>
						<outline text="}"></outline>
						</outline>
					<outline text="}"></outline>
					</outline>
				<outline text="if(!readonly){">
					<outline text="var keystrokeString = ConcordUtil.getKeystroke (event);"></outline>
					<outline text="event.concord = { //2/17/20 by DW">
						<outline text="keystrokeString, "></outline>
						<outline text="flKeyCaptured: false"></outline>
						<outline text="};"></outline>
						</outline>
					<outline text="concordInstance.fireCallback(&quot;opKeystroke&quot;, event);"></outline>
					<outline text="var keyCaptured = event.concord.flKeyCaptured;"></outline>
					<outline text="var commandKey = event.metaKey || event.ctrlKey;"></outline>
					<outline isComment="true" text="console.log (&quot;keydown: keystrokeString == &quot; + keystrokeString + &quot;, event.metaKey == &quot; + event.metaKey)"></outline>
					<outline text="switch (keystrokeString) {">
						<outline text="case &quot;backspace&quot;:">
							<outline text="if (concord.mobile) {">
								<outline text="if((concordInstance.op.getLineText()==&quot;&quot;) || (concordInstance.op.getLineText()==&quot;&lt;br&gt;&quot;)){">
									<outline text="event.preventDefault();"></outline>
									<outline text="concordInstance.op.deleteLine();"></outline>
									<outline text="}"></outline>
									</outline>
								<outline text="}"></outline>
								</outline>
							<outline text="else {">
								<outline text="if(concordInstance.op.inTextMode()) {">
									<outline text="if(!concordInstance.op.getCursor().hasClass(&quot;dirty&quot;)){">
										<outline text="concordInstance.op.saveState();"></outline>
										<outline text="concordInstance.op.getCursor().addClass(&quot;dirty&quot;);"></outline>
										<outline text="}"></outline>
										</outline>
									<outline text="}else{">
										<outline text="keyCaptured = true;"></outline>
										<outline text="event.preventDefault();"></outline>
										<outline text="concordInstance.op.deleteLine();"></outline>
										<outline text="}"></outline>
										</outline>
									</outline>
								<outline text="}"></outline>
								</outline>
							<outline text="break;"></outline>
							</outline>
						<outline text="case &quot;meta-backspace&quot;: //cmd-backspace -- 2/6/20 by DW">
							<outline text="function cmdBackspace () {">
								<outline text="var rightstring = concordInstance.op.getLineText ();"></outline>
								<outline text="if (concordInstance.op.countSubs () &gt; 0) { //has subs">
									<outline text="return (false);"></outline>
									<outline text="}"></outline>
									</outline>
								<outline text="if (!concordInstance.op.go (up, 1)) { //it's the first line at the level, nothing to merge with">
									<outline text="return (false);"></outline>
									<outline text="}"></outline>
									</outline>
								<outline text="if (concordInstance.op.countSubs () &gt; 0) { //has subs">
									<outline text="concordInstance.op.go (down, 1);"></outline>
									<outline text="return (false);"></outline>
									<outline text="}"></outline>
									</outline>
								<outline text="concordInstance.op.setLineText (concordInstance.op.getLineText () + rightstring);"></outline>
								<outline text="concordInstance.op.go (down, 1)"></outline>
								<outline text="concordInstance.op.deleteLine (); //moves cursor up before deleting"></outline>
								<outline text="return (true);"></outline>
								<outline text="}"></outline>
								</outline>
							<outline text="if (!cmdBackspace ()) {">
								<outline text="ConcordUtil.speakerBeep ();"></outline>
								<outline text="}"></outline>
								</outline>
							<outline text="break;"></outline>
							</outline>
						<outline text="case &quot;tab&quot;: ">
							<outline text="keyCaptured = true;"></outline>
							<outline text="event.preventDefault();"></outline>
							<outline text="event.stopPropagation();"></outline>
							<outline text="if(event.shiftKey) {">
								<outline text="concordInstance.op.reorg(left)"></outline>
								<outline text="} else {">
									<outline text="concordInstance.op.reorg(right);"></outline>
									<outline text="}"></outline>
									</outline>
								</outline>
							<outline text="break;"></outline>
							</outline>
						<outline text="case &quot;select-all&quot;:">
							<outline text="keyCaptured = true;"></outline>
							<outline text="event.preventDefault();"></outline>
							<outline text="var cursor = concordInstance.op.getCursor();"></outline>
							<outline text="if(concordInstance.op.inTextMode()){">
								<outline text="concordInstance.op.focusCursor();"></outline>
								<outline text="document.execCommand('selectAll',false,null);"></outline>
								<outline text="}else{">
									<outline text="concordInstance.editor.selectionMode();"></outline>
									<outline text="cursor.parent().children().addClass(&quot;selected&quot;);"></outline>
									<outline text="}"></outline>
									</outline>
								</outline>
							<outline text="break;"></outline>
							</outline>
						<outline text="case &quot;reorg-up&quot;:">
							<outline text="keyCaptured = true;"></outline>
							<outline text="event.preventDefault();"></outline>
							<outline text="concordInstance.op.reorg(up);"></outline>
							<outline text="break;"></outline>
							</outline>
						<outline text="case &quot;reorg-down&quot;:">
							<outline text="keyCaptured = true;"></outline>
							<outline text="event.preventDefault ();"></outline>
							<outline text="concordInstance.op.reorg (down);"></outline>
							<outline text="break;"></outline>
							</outline>
						<outline text="case &quot;reorg-left&quot;:">
							<outline text="keyCaptured = true;"></outline>
							<outline text="event.preventDefault ();"></outline>
							<outline text="concordInstance.op.reorg (left);"></outline>
							<outline text="break;"></outline>
							</outline>
						<outline text="case &quot;reorg-right&quot;:">
							<outline text="keyCaptured = true;"></outline>
							<outline text="event.preventDefault ();"></outline>
							<outline text="concordInstance.op.reorg (right);"></outline>
							<outline text="break;"></outline>
							</outline>
						<outline text="case &quot;promote&quot;:">
							<outline text="keyCaptured = true;"></outline>
							<outline text="event.preventDefault();"></outline>
							<outline text="concordInstance.op.promote();"></outline>
							<outline text="break;"></outline>
							</outline>
						<outline text="case &quot;demote&quot;:">
							<outline text="keyCaptured = true;"></outline>
							<outline text="event.preventDefault();"></outline>
							<outline text="concordInstance.op.demote();"></outline>
							<outline text="break;"></outline>
							</outline>
						<outline text="case &quot;return&quot;:">
							<outline text="if(concord.mobile){">
								<outline text="//Mobile"></outline>
								<outline text="event.preventDefault();"></outline>
								<outline text="keyCaptured=true;"></outline>
								<outline text="var cursor = concordInstance.op.getCursor();"></outline>
								<outline text="var clonedCursor = cursor.clone(true, true);"></outline>
								<outline text="clonedCursor.removeClass(&quot;concord-cursor&quot;);"></outline>
								<outline text="cursor.removeClass(&quot;selected&quot;);"></outline>
								<outline text="cursor.removeClass(&quot;dirty&quot;);"></outline>
								<outline text="cursor.removeClass(&quot;collapsed&quot;);"></outline>
								<outline text="concordInstance.op.setLineText(&quot;&quot;);"></outline>
								<outline text="var icon = ConcordUtil.getIconHtml (&quot;caret-right&quot;);"></outline>
								<outline isComment="true" text="var icon = &quot;&lt;i&quot;+&quot; class=\&quot;node-icon fa fa-caret-right\&quot;&gt;&lt;&quot;+&quot;/i&gt;&quot;;"></outline>
								<outline text="cursor.children(&quot;.concord-wrapper&quot;).children(&quot;.node-icon&quot;).replaceWith(icon);"></outline>
								<outline text="clonedCursor.insertBefore(cursor);"></outline>
								<outline text="concordInstance.op.attributes.makeEmpty();"></outline>
								<outline text="concordInstance.op.deleteSubs();"></outline>
								<outline text="concordInstance.op.focusCursor();"></outline>
								<outline text="concordInstance.fireCallback(&quot;opInsert&quot;, concordInstance.op.setCursorContext(cursor));"></outline>
								<outline text="}"></outline>
								</outline>
							<outline text="else{">
								<outline text="event.preventDefault();"></outline>
								<outline text="keyCaptured=true;"></outline>
								<outline text="if(event.originalEvent &amp;&amp; ((event.originalEvent.keyLocation &amp;&amp; (event.originalEvent.keyLocation != 0)) || (event.originalEvent.location &amp;&amp; (event.originalEvent.location != 0))) ){">
									<outline text="concordInstance.op.setTextMode(!concordInstance.op.inTextMode());"></outline>
									<outline text="}else{">
										<outline text="var direction = down;"></outline>
										<outline text="if(concordInstance.op.subsExpanded()){">
											<outline text="direction=right;"></outline>
											<outline text="}"></outline>
											</outline>
										<outline text="var node = concordInstance.op.insert(&quot;&quot;, direction);"></outline>
										<outline text="concordInstance.op.setTextMode(true);"></outline>
										<outline text="concordInstance.op.focusCursor();"></outline>
										<outline text="}"></outline>
										</outline>
									</outline>
								<outline text="}"></outline>
								</outline>
							<outline text="break;"></outline>
							</outline>
						<outline text="case &quot;meta-return&quot;: //cmd-return -- 2/6/20 by DW">
							<outline text="if (concordInstance.op.inTextMode ()) {">
								<outline text="if (concordInstance.op.countSubs () == 0) { //no subs">
									<outline text="function getCaretPosition (node) {">
										<outline text="var range = window.getSelection().getRangeAt(0);"></outline>
										<outline text="var preCaretRange = range.cloneRange(), caretPosition;"></outline>
										<outline text="var tmp = document.createElement(&quot;div&quot;);"></outline>
										<outline text="preCaretRange.selectNodeContents(node);"></outline>
										<outline text="preCaretRange.setEnd(range.endContainer, range.endOffset);"></outline>
										<outline text="tmp.appendChild(preCaretRange.cloneContents());"></outline>
										<outline text="caretPosition = tmp.innerHTML.length;"></outline>
										<outline isComment="true" text="tmp.parentNode.removeChild (tmp);"></outline>
										<outline text="return caretPosition;"></outline>
										<outline text="}"></outline>
										</outline>
									<outline text="var text = concordInstance.op.getCursor ().children (&quot;.concord-wrapper:first&quot;).children (&quot;.concord-text:first&quot;);"></outline>
									<outline text="var ixcaret = getCaretPosition (text.get (0));"></outline>
									<outline text="var linetext = concordInstance.op.getLineText ();"></outline>
									<outline text="var leftstring = ConcordUtil.stringMid (linetext, 1, ixcaret);"></outline>
									<outline text="var rightstring = ConcordUtil.stringDelete (linetext, 1, ixcaret);"></outline>
									<outline isComment="true" text="console.log (&quot;cmd-return: leftstring == &quot; + leftstring + &quot;, rightstring == &quot; + rightstring);"></outline>
									<outline text="concordInstance.op.setLineText (leftstring);"></outline>
									<outline text="concordInstance.op.insert (rightstring, down);"></outline>
									<outline text="}"></outline>
									</outline>
								<outline text="else {">
									<outline text="console.log (&quot;Can't split this headline because it has subs.&quot;);"></outline>
									<outline text="ConcordUtil.speakerBeep ();"></outline>
									<outline text="}"></outline>
									</outline>
								<outline text="}"></outline>
								</outline>
							<outline text="else {">
								<outline text="console.log (&quot;Can't split this headline because you're not in text mode.&quot;);"></outline>
								<outline text="ConcordUtil.speakerBeep ();"></outline>
								<outline text="}"></outline>
								</outline>
							<outline text="break;"></outline>
							</outline>
						<outline text="case &quot;cursor-left&quot;:">
							<outline text="var active = false;"></outline>
							<outline text="if($(event.target).hasClass(&quot;concord-text&quot;)) {">
								<outline text="if(event.target.selectionStart &gt; 0) {">
									<outline text="active = false;"></outline>
									<outline text="}"></outline>
									</outline>
								<outline text="}"></outline>
								</outline>
							<outline text="if(context.find(&quot;.concord-cursor.selected&quot;).length == 1) {">
								<outline text="active = true;"></outline>
								<outline text="}"></outline>
								</outline>
							<outline text="if(active) {">
								<outline text="keyCaptured = true;"></outline>
								<outline text="event.preventDefault();"></outline>
								<outline text="var cursor = concordInstance.op.getCursor();"></outline>
								<outline text="var prev = concordInstance.op._walk_up(cursor);"></outline>
								<outline text="if(prev) {">
									<outline text="concordInstance.op.setCursor(prev);"></outline>
									<outline text="}"></outline>
									</outline>
								<outline text="}"></outline>
								</outline>
							<outline text="break;"></outline>
							</outline>
						<outline text="case &quot;cursor-up&quot;:">
							<outline text="keyCaptured = true;"></outline>
							<outline text="event.preventDefault();"></outline>
							<outline text="if(concordInstance.op.inTextMode()){">
								<outline text="var cursor = concordInstance.op.getCursor();"></outline>
								<outline text="var prev = concordInstance.op._walk_up(cursor);"></outline>
								<outline text="if(prev) {">
									<outline text="concordInstance.op.setCursor(prev);"></outline>
									<outline text="}"></outline>
									</outline>
								<outline text="}else{">
									<outline text="concordInstance.op.go(up,1,event.shiftKey, concordInstance.op.inTextMode());"></outline>
									<outline text="}"></outline>
									</outline>
								</outline>
							<outline text="break;"></outline>
							</outline>
						<outline text="case &quot;cursor-right&quot;:">
							<outline text="var active = false;"></outline>
							<outline text="if(context.find(&quot;.concord-cursor.selected&quot;).length == 1) {">
								<outline text="active = true;"></outline>
								<outline text="}"></outline>
								</outline>
							<outline text="if(active) {">
								<outline text="keyCaptured = true;"></outline>
								<outline text="event.preventDefault();"></outline>
								<outline text="var next = null;"></outline>
								<outline text="var cursor = concordInstance.op.getCursor();"></outline>
								<outline text="if(!cursor.hasClass(&quot;collapsed&quot;)) {">
									<outline text="var outline = cursor.children(&quot;ol&quot;);"></outline>
									<outline text="if(outline.length == 1) {">
										<outline text="var firstChild = outline.children(&quot;.concord-node:first&quot;);"></outline>
										<outline text="if(firstChild.length == 1) {">
											<outline text="next = firstChild;"></outline>
											</outline>
										<outline text="}"></outline>
										</outline>
									<outline text="}"></outline>
									</outline>
								<outline text="}"></outline>
								<outline text="if(!next) {">
									<outline text="next = concordInstance.op._walk_down(cursor);"></outline>
									</outline>
								<outline text="}"></outline>
								<outline text="if(next) {">
									<outline text="concordInstance.op.setCursor(next);"></outline>
									<outline text="}"></outline>
									</outline>
								<outline text="}"></outline>
								</outline>
							<outline text="break;"></outline>
							</outline>
						<outline text="case &quot;cursor-down&quot;:">
							<outline text="keyCaptured = true;"></outline>
							<outline text="event.preventDefault();"></outline>
							<outline text="if(concordInstance.op.inTextMode()){">
								<outline text="var next = null;"></outline>
								<outline text="var cursor = concordInstance.op.getCursor();"></outline>
								<outline text="if(!cursor.hasClass(&quot;collapsed&quot;)) {">
									<outline text="var outline = cursor.children(&quot;ol&quot;);"></outline>
									<outline text="if(outline.length == 1) {">
										<outline text="var firstChild = outline.children(&quot;.concord-node:first&quot;);"></outline>
										<outline text="if(firstChild.length == 1) {">
											<outline text="next = firstChild;"></outline>
											</outline>
										<outline text="}"></outline>
										</outline>
									<outline text="}"></outline>
									</outline>
								<outline text="}"></outline>
								<outline text="if(!next) {">
									<outline text="next = concordInstance.op._walk_down(cursor);"></outline>
									</outline>
								<outline text="}"></outline>
								<outline text="if(next) {">
									<outline text="concordInstance.op.setCursor(next);"></outline>
									<outline text="}"></outline>
									</outline>
								<outline text="}else{">
									<outline text="concordInstance.op.go(down,1, event.shiftKey, concordInstance.op.inTextMode());"></outline>
									<outline text="}"></outline>
									</outline>
								</outline>
							<outline text="break;"></outline>
							</outline>
						<outline text="case &quot;delete&quot;:">
							<outline text="if(concordInstance.op.inTextMode()) {">
								<outline text="if(!concordInstance.op.getCursor().hasClass(&quot;dirty&quot;)){">
									<outline text="concordInstance.op.saveState();"></outline>
									<outline text="concordInstance.op.getCursor().addClass(&quot;dirty&quot;);"></outline>
									<outline text="}"></outline>
									</outline>
								<outline text="}else{">
									<outline text="keyCaptured = true;"></outline>
									<outline text="event.preventDefault();"></outline>
									<outline text="concordInstance.op.deleteLine();"></outline>
									<outline text="}"></outline>
									</outline>
								</outline>
							<outline text="break;"></outline>
							</outline>
						<outline text="case &quot;undo&quot;:">
							<outline text="keyCaptured=true;"></outline>
							<outline text="event.preventDefault();"></outline>
							<outline text="concordInstance.op.undo();"></outline>
							<outline text="break;"></outline>
							</outline>
						<outline text="case &quot;cut&quot;:">
							<outline text="if(concordInstance.op.inTextMode()){">
								<outline text="if(concordInstance.op.getLineText()==&quot;&quot;){">
									<outline text="keyCaptured=true;"></outline>
									<outline text="event.preventDefault();"></outline>
									<outline text="concordInstance.op.deleteLine();"></outline>
									<outline text="}"></outline>
									</outline>
								<outline text="else {">
									<outline text="concordInstance.op.saveState();"></outline>
									<outline text="}"></outline>
									</outline>
								<outline text="}"></outline>
								</outline>
							<outline text="break;"></outline>
							</outline>
						<outline text="case &quot;copy&quot;: //problem!">
							<outline text="if(false&amp;&amp;commandKey){">
								<outline text="if(concordInstance.op.inTextMode()){">
									<outline text="if(concordInstance.op.getLineText()!=&quot;&quot;){">
										<outline text="concordInstance.root.removeData(&quot;clipboard&quot;);"></outline>
										<outline text="}"></outline>
										</outline>
									<outline text="}else{">
										<outline text="keyCaptured=true;"></outline>
										<outline text="event.preventDefault();"></outline>
										<outline text="concordInstance.op.copy();"></outline>
										<outline text="}"></outline>
										</outline>
									</outline>
								<outline text="}"></outline>
								</outline>
							<outline text="break;"></outline>
							</outline>
						<outline text="case &quot;paste&quot;: //problem!">
							<outline text="break;"></outline>
							</outline>
						<outline text="case &quot;toggle-comment&quot;:">
							<outline text="if(concordInstance.script.isComment()){">
								<outline text="concordInstance.script.unComment();"></outline>
								<outline text="}else{">
									<outline text="concordInstance.script.makeComment();"></outline>
									<outline text="}"></outline>
									</outline>
								</outline>
							<outline text="break;"></outline>
							</outline>
						<outline text="case &quot;italicize&quot;:">
							<outline text="keyCaptured=true;"></outline>
							<outline text="event.preventDefault();"></outline>
							<outline text="concordInstance.op.italic();"></outline>
							<outline text="break;"></outline>
							</outline>
						<outline text="case &quot;bolden&quot;:">
							<outline text="keyCaptured=true;"></outline>
							<outline text="event.preventDefault();"></outline>
							<outline text="concordInstance.op.bold();"></outline>
							<outline text="break;"></outline>
							</outline>
						<outline text="case &quot;toggle-render&quot;:">
							<outline text="keyCaptured=true;"></outline>
							<outline text="event.preventDefault();"></outline>
							<outline text="concordInstance.op.setRenderMode(!concordInstance.op.getRenderMode());"></outline>
							<outline text="break;"></outline>
							</outline>
						<outline text="case &quot;toggle-expand&quot;:">
							<outline text="keyCaptured=true;"></outline>
							<outline text="event.preventDefault();"></outline>
							<outline text="if(concordInstance.op.subsExpanded()){">
								<outline text="concordInstance.op.collapse();"></outline>
								<outline text="}else{">
									<outline text="concordInstance.op.expand();"></outline>
									<outline text="}"></outline>
									</outline>
								</outline>
							<outline text="break;"></outline>
							</outline>
						<outline text="case &quot;run-selection&quot;:">
							<outline created="Fri, 19 Feb 2021 15:41:36 GMT" text="if (!keyCaptured) { //2/19/21 by DW">
								<outline text="keyCaptured=true;"></outline>
								<outline text="event.preventDefault();"></outline>
								<outline text="concordInstance.op.runSelection();"></outline>
								<outline created="Fri, 19 Feb 2021 15:41:39 GMT" text="}"></outline>
								</outline>
							<outline text="break;"></outline>
							</outline>
						<outline text="default:">
							<outline text="keyCaptured = false;"></outline>
							</outline>
						<outline text="}"></outline>
						</outline>
					<outline text="if(!keyCaptured) {">
						<outline text="if((event.which &gt;= 32) &amp;&amp; ((event.which &lt; 112) || (event.which &gt; 123)) &amp;&amp; (event.which &lt; 1000) &amp;&amp; !commandKey) {">
							<outline text="var node = concordInstance.op.getCursor();"></outline>
							<outline text="if(concordInstance.op.inTextMode()) {">
								<outline text="if(!node.hasClass(&quot;dirty&quot;)){">
									<outline text="concordInstance.op.saveState();"></outline>
									<outline text="}"></outline>
									</outline>
								<outline text="node.addClass(&quot;dirty&quot;);"></outline>
								<outline text="} else {">
									<outline text="concordInstance.op.setTextMode(true);"></outline>
									<outline text="concordInstance.op.saveState();"></outline>
									<outline text="concordInstance.editor.edit(node, true);"></outline>
									<outline text="node.addClass(&quot;dirty&quot;);"></outline>
									<outline text="}"></outline>
									</outline>
								</outline>
							<outline text="concordInstance.op.markChanged();"></outline>
							<outline text="}"></outline>
							</outline>
						<outline text="}"></outline>
						</outline>
					<outline text="}"></outline>
					</outline>
				<outline text="});"></outline>
				</outline>
			<outline text="$(document).on(&quot;mouseup&quot;, function(event) {">
				<outline text="if(!concord.handleEvents){">
					<outline text="return;"></outline>
					<outline text="}"></outline>
					</outline>
				<outline text="if($(&quot;.concord-root&quot;).length==0){">
					<outline text="return;"></outline>
					<outline text="}"></outline>
					</outline>
				<outline text="if( $(event.target).is(&quot;a&quot;) || $(event.target).is(&quot;input&quot;) || $(event.target).is(&quot;textarea&quot;) || ($(event.target).parents(&quot;a:first&quot;).length==1) || $(event.target).hasClass(&quot;dropdown-menu&quot;) || ($(event.target).parents(&quot;.dropdown-menu:first&quot;).length&gt;0)){">
					<outline text="return;"></outline>
					<outline text="}"></outline>
					</outline>
				<outline text="var context = $(event.target).parents(&quot;.concord-root:first&quot;);"></outline>
				<outline text="if(context.length == 0) {">
					<outline text="$(&quot;.concord-root&quot;).each(function() {">
						<outline text="var concordInstance = new ConcordOutline($(this).parent());"></outline>
						<outline text="concordInstance.editor.hideContextMenu();"></outline>
						<outline text="concordInstance.editor.dragModeExit();"></outline>
						<outline text="});"></outline>
						</outline>
					<outline text="var focusRoot = concord.getFocusRoot();"></outline>
					<outline text="}"></outline>
					</outline>
				<outline text="});"></outline>
				</outline>
			<outline text="$(document).on(&quot;click&quot;, concord.updateFocusRootEvent);"></outline>
			<outline text="$(document).on(&quot;dblclick&quot;, concord.updateFocusRootEvent);"></outline>
			<outline text="$(document).on('show', function(e){">
				<outline text="if($(e.target).is(&quot;.modal&quot;)){">
					<outline text="if($(e.target).attr(&quot;concord-events&quot;) != &quot;true&quot;){">
						<outline text="concord.stopListening();"></outline>
						<outline text="}"></outline>
						</outline>
					<outline text="}"></outline>
					</outline>
				<outline text="});"></outline>
				</outline>
			<outline text="$(document).on('hidden', function(e){">
				<outline text="if($(e.target).is(&quot;.modal&quot;)){">
					<outline text="if($(e.target).attr(&quot;concord-events&quot;) != &quot;true&quot;){">
						<outline text="concord.resumeListening();"></outline>
						<outline text="}"></outline>
						</outline>
					<outline text="}"></outline>
					</outline>
				<outline text="});"></outline>
				</outline>
			<outline text="concord.ready=true;"></outline>
			<outline text="})(jQuery);"></outline>
			</outline>
		</body>
	</opml>
