<?xml version="1.0" encoding="ISO-8859-1"?>
<!-- OPML generated by OPML Editor v10.1b19 on Mon, 15 Jan 2024 15:32:05 GMT -->

<!-- 
   Hi this is Dave Winer. I write all my project code in an outliner, which 
   generates all the files that make up this GitHub project. You'll see a 
   source.opml file like this in each of my projects. It contains the outline 
   source that the repo files were generated from. This is the most logical place 
   to store them. You can read the code in any outliner that supports OPML, which 
   includes https://drummer.land. You can use the Open URL command in 
   Drummer's File menu to open the "raw" version of this file straight from the 
   GitHub repo.
 -->

<opml version="2.0">
	<head>
		<title>nodeEditor: concord</title>
		<dateCreated>Sun, 22 Jul 2018 21:53:02 GMT</dateCreated>
		<dateModified>Mon, 15 Jan 2024 15:32:05 GMT</dateModified>
		<ownerName>Dave Winer</ownerName>
		<ownerId>http://davewiner.com/</ownerId>
		<expansionState>1, 2, 24</expansionState>
		<vertScrollState>1</vertScrollState>
		<windowTop>165</windowTop>
		<windowLeft>697</windowLeft>
		<windowBottom>1110</windowBottom>
		<windowRight>1934</windowRight>
		</head>
	<body>
		<outline text="/scripting.com/code/concord/">
			<outline text="worknotes.md" created="Mon, 15 Jan 2024 14:53:39 GMT">
				<outline text="#### 1/15/24; 10:01:19 AM by DW" created="Mon, 15 Jan 2024 15:01:19 GMT">
					<outline text="Fix problem in xmlToOutline where it can fail in certain circumstances relative to cursor placement." created="Mon, 15 Jan 2024 14:54:08 GMT">
						<outline text="I honestly don't understand what it's doing, though it has something to do with cursor placement, and it's an edge condition, this code has been running without problems for 10 years. So what I do is just get the hell out of there when the problem comes up. It works. " created="Mon, 15 Jan 2024 15:28:33 GMT"/>
						<outline text="Search the source for 1/15/24." created="Mon, 15 Jan 2024 15:29:32 GMT"/>
						</outline>
					<outline text="Previously we were saving concord changes to this path -- /scripting.com/code/concord/testing/3.0.6/" created="Mon, 15 Jan 2024 15:07:50 GMT">
						<outline text="Now we're saving to /scripting.com/code/concord/. Rely on GitHub and our normal backup process to be able to revert." created="Mon, 15 Jan 2024 15:08:01 GMT"/>
						<outline text="The kinds of changes we make to Concord are very arm's length." created="Mon, 15 Jan 2024 15:08:37 GMT"/>
						</outline>
					</outline>
				<outline text="#### 1/15/24; 9:53:44 AM by DW" created="Mon, 15 Jan 2024 14:53:41 GMT">
					<outline text="There was a separate project called concordNotes, it had just one file -- worknotes.mdo." created="Mon, 15 Jan 2024 14:53:45 GMT"/>
					<outline text="I copied it here, in the earlier updates." created="Mon, 15 Jan 2024 15:01:02 GMT"/>
					</outline>
				<outline text="#### 2/17/20; 11:37:30 AM by DW">
					<outline text="Change the way we call back for keystrokes.">
						<outline text="A new second parameter contains a keystrokeString, we do all the parsing."/>
						<outline text="If the callback returns true, it means they handled the keystroke, you should return."/>
						</outline>
					</outline>
				<outline text="#### 2/15/20; 11:22:30 AM by DW">
					<outline text="&lt;a href=&quot;http://scripting.com/2020/02/15.html#a161619&quot;&gt;Released&lt;/a&gt; version 3.0.3. Lots of cleanup work remains, for sure. ;-)"/>
					</outline>
				<outline text="#### 2/13/20; 11:49:36 AM by DW">
					<outline text="Saved a &lt;a href=&quot;https://s3.amazonaws.com/scripting.com/2020/02/13/concord-master.zip&quot;&gt;snapshot&lt;/a&gt; of the Concord repository before I made any changes. "/>
					</outline>
				<outline text="#### 2/12/20; 11:53:59 AM by DW">
					<outline text="Merged concordkeyboard.js with concord.js. New routine ConcordUtil.getKeystroke. One less file to deal with. Wasn't present in the 2013 version of Concord. No need to introduce it. "/>
					</outline>
				<outline text="#### 1/31/20; 3:02:56 PM by DW">
					<outline text="v3.0.2. Converted to the newest release of Font-Awesome for hard-coded icons, and icons for outline types. "/>
					</outline>
				<outline text="#### 1/29/20; 5:03:41 PM by DW">
					<outline text="v3.0.1. Implemented cmd-backspace and cmd-return. Handles HTML text.">
						<outline text="Here's the &lt;a href=&quot;http://scripting.com/2020/01/29.html#a182110&quot;&gt;writeup&lt;/a&gt; on Scripting. "/>
						</outline>
					</outline>
				<outline text="#### 1/25/20; 2:21:11 PM by DW">
					<outline text="New version number sequence -- v3.0.0.">
						<outline text="From here on out our changes will be registered in the GitHub project."/>
						<outline text="Code is managed in nodeEditor along with all my other JavaScript code."/>
						<outline text="Concord enters the modern age. Looking forward to working here. "/>
						</outline>
					<outline text="Let's just take the code we're using in both LO2 and EO and bring it into nodeEditor. ">
						<outline text="We won't know what all the changes are from whatever versions we had here, but we can move forward.">
							<outline text="nodeEditorSuite.utilities.researchConcordVersions"/>
							</outline>
						</outline>
					</outline>
				<outline text="#### 1/24/20; 4:00:15 PM by DW">
					<outline text="Need to get the version of concord under control, so I can edit it as I would any other piece of code. "/>
					<outline text="There's a project already in nodeEditor, with a note at the top saying it's only for reading. "/>
					<outline text="The question is this -- what are the differences between this and the version of Concord that we're using in LO2 and EO."/>
					<outline text="Here's the plan">
						<outline text="Create a private project on GitHub."/>
						<outline text="Upload the version of Concord that's under nodeEditor management.">
							<outline text="I'm moving it under the LO2 menu, so it's part of this project."/>
							</outline>
						<outline text="Overlay that with the code we're using in LO2."/>
						<outline text="See the differences. Where we go from there depends on how big the diffs are. "/>
						</outline>
					<outline text="Okay that didn't accomplish anything">
						<outline text="GitHub said the whole file was a change. "/>
						<outline text="This is weird because just eyeballing it, you can see that they're almost identical files.">
							<outline text="https://github.com/scripting/concord2/commit/1b3b93523053445faf83d272eebe62f3f25e349f#diff-9d22eb2e0ebaa6cc17d83bbb672f3b08"/>
							</outline>
						</outline>
					<outline text="Starting a new session, see above."/>
					</outline>
				<outline text="#### 7/22/18 by DW" isComment="true">
					<outline text="this code is here just for reference. i am not using it in my outliners. "/>
					</outline>
				<outline text="#### 2/22/14 by DW" created="Sat, 22 Feb 2014 23:29:34 GMT" pgfnum="37867">
					<outline text="v2.49 -- xmlToOutline takes a new optional param, flSetFocus. Defaults true. If false, we don't set the focus in the outline. This is useful when using the outliner to display text in a web page. If the outline is two screens down, you don't want the page to scroll down to it on reload. " created="Sat, 22 Feb 2014 23:29:35 GMT" pgfnum="37868"/>
					<outline text="Thanks to &lt;a href=&quot;http://k4shif.blogspot.com/&quot;&gt;Kashif Khan&lt;/a&gt; for finding this fix. ;-)" created="Sat, 22 Feb 2014 23:35:51 GMT" pgfnum="37869"/>
					</outline>
				<outline text="#### 9/20/13 by DW" created="Fri, 20 Sep 2013 13:18:15 GMT" pgfnum="30559">
					<outline text="Example1 -- Hello Outliner" created="Fri, 20 Sep 2013 13:20:32 GMT" pgfnum="30563">
						<outline text="Change the initial value of renderMode from false to true." created="Fri, 20 Sep 2013 13:18:15 GMT" pgfnum="30560"/>
						<outline text="Added a separator before Concord Docs in the Source menu." created="Fri, 20 Sep 2013 13:20:01 GMT" pgfnum="30561"/>
						<outline text="Changed version number to 0.52." created="Fri, 20 Sep 2013 13:20:20 GMT" pgfnum="30562"/>
						</outline>
					<outline text="Markdown renderer" created="Fri, 20 Sep 2013 13:43:38 GMT" pgfnum="30564">
						<outline text="As part of the build process for turning my OPML files into flat files for the GitHub repo, I have a script that does a simple rendering of an outline in Markdown. Previously it only understood one level hierarchies, but I was already using more levels without realizing the text was not showing up. " created="Fri, 20 Sep 2013 13:43:41 GMT" pgfnum="30565"/>
						<outline text="So I updated the renderer to handle multiple levels. It's a little tricky to get Markdown do indentation, but I ended up using with with &amp;amp;nbsp; characters, which works since you can include HTML in Markdown. :-)" created="Fri, 20 Sep 2013 13:44:44 GMT" pgfnum="30566"/>
						</outline>
					</outline>
				<outline text="#### 9/19/13 by DW" created="Thu, 19 Sep 2013 12:01:25 GMT" pgfnum="30467">
					<outline text="Added worknotes section to readme.md." created="Thu, 19 Sep 2013 12:01:27 GMT" pgfnum="30468"/>
					<outline text="Rendering worknotes as &lt;a href=&quot;https://github.com/scripting/concord/blob/master/worknotes.md&quot;&gt;worknotes.md&lt;/a&gt; at the top level of the repo." created="Thu, 19 Sep 2013 12:01:47 GMT" pgfnum="30469"/>
					</outline>
				<outline text="#### 9/18/13 by DW">
					<outline text="Created the worknotes outline (this file). " created="Wed, 18 Sep 2013 12:57:06 GMT" pgfnum="30391"/>
					<outline text="Added a bunch of utility routines to concordUtils.js. " created="Wed, 18 Sep 2013 12:56:45 GMT" pgfnum="30390"/>
					<outline text="Example 2, the Reader app is working. " created="Wed, 18 Sep 2013 12:57:22 GMT" pgfnum="30392">
						<outline text="It works with any OPML file." created="Wed, 18 Sep 2013 14:48:27 GMT" pgfnum="30451"/>
						<outline text="Handles includes. " created="Wed, 18 Sep 2013 14:48:34 GMT" pgfnum="30452"/>
						<outline text="Anything Concord can display it can display, because it builds on Concord. ;-)" created="Wed, 18 Sep 2013 14:49:01 GMT" pgfnum="30454"/>
						</outline>
					<outline text="Added a call to console.log in opKeystrokeCallback in example1. " created="Wed, 18 Sep 2013 12:59:54 GMT" pgfnum="30393"/>
					<outline text="Fixed opExpandCallback in Example 1, expanding &lt;i&gt;include&lt;/i&gt; nodes was broken." created="Wed, 18 Sep 2013 14:47:42 GMT" pgfnum="30450"/>
					<outline text="Added commands in Hello Outliner/Source menu to open the Worknotes outline and the source for Example 2." created="Wed, 18 Sep 2013 14:51:47 GMT" pgfnum="30456"/>
					</outline>
				</outline>
			<outline text="concord.js">
				<outline text="// Copyright 2020-2021, Dave Winer"/>
				<outline text="// Copyright 2013, Small Picture, Inc."/>
				<outline text=""/>
				<outline text="$(function () {">
					<outline text="if($.fn.tooltip !== undefined){">
						<outline text="$(&quot;a[rel=tooltip]&quot;).tooltip({">
							<outline text="live: true"/>
							<outline text="})"/>
							</outline>
						<outline text="}"/>
						</outline>
					<outline text="})"/>
					</outline>
				<outline text="$(function () {">
					<outline text="if($.fn.popover !== undefined){">
						<outline text="$(&quot;a[rel=popover]&quot;).on(&quot;mouseenter mouseleave&quot;, function(){$(this).popover(&quot;toggle&quot;)})"/>
						<outline text="}"/>
						</outline>
					<outline text="})"/>
					</outline>
				<outline text="if (!Array.prototype.indexOf) {">
					<outline text="Array.prototype.indexOf = function(obj, start) {">
						<outline text="for (var i = (start || 0), j = this.length; i &lt; j; i++) {">
							<outline text="if (this[i] === obj) { return i; }"/>
							<outline text="}"/>
							</outline>
						<outline text="return -1;"/>
						<outline text="}"/>
						</outline>
					<outline text="}"/>
					</outline>
				<outline text="var concord = {">
					<outline text="version: &quot;3.0.5&quot;,"/>
					<outline text="mobile: /Android|webOS|iPhone|iPad|iPod|BlackBerry/i.test(navigator.userAgent),"/>
					<outline text="ready: false,"/>
					<outline text="handleEvents: true,"/>
					<outline text="resumeCallbacks: [],"/>
					<outline text="onResume: function(cb){">
						<outline text="this.resumeCallbacks.push(cb);"/>
						<outline text="},"/>
						</outline>
					<outline text="resumeListening: function(){">
						<outline text="if(!this.handleEvents){">
							<outline text="this.handleEvents=true;"/>
							<outline text="var r = this.getFocusRoot();"/>
							<outline text="if(r!=null){">
								<outline text="var c = new ConcordOutline(r.parent());"/>
								<outline text="if(c.op.inTextMode()){">
									<outline text="c.op.focusCursor();"/>
									<outline text="c.editor.restoreSelection();"/>
									<outline text="}else{">
										<outline text="c.pasteBinFocus();"/>
										<outline text="}"/>
										</outline>
									</outline>
								<outline text="for(var i in this.resumeCallbacks){">
									<outline text="var cb = this.resumeCallbacks[i];"/>
									<outline text="cb();"/>
									<outline text="}"/>
									</outline>
								<outline text="this.resumeCallbacks=[];"/>
								<outline text="}"/>
								</outline>
							<outline text="}"/>
							</outline>
						<outline text="},"/>
						</outline>
					<outline text="stopListening: function(){">
						<outline text="if(this.handleEvents){">
							<outline text="this.handleEvents=false;"/>
							<outline text="var r = this.getFocusRoot();"/>
							<outline text="if(r!=null){">
								<outline text="var c = new ConcordOutline(r.parent());"/>
								<outline text="if(c.op.inTextMode()){">
									<outline text="c.editor.saveSelection();"/>
									<outline text="}"/>
									</outline>
								<outline text="}"/>
								</outline>
							<outline text="}"/>
							</outline>
						<outline text="},"/>
						</outline>
					<outline text="focusRoot: null,"/>
					<outline text="getFocusRoot: function(){">
						<outline text="if($(&quot;.concord-root:visible&quot;).length==1){">
							<outline text="return this.setFocusRoot($(&quot;.concord-root:visible:first&quot;));"/>
							<outline text="}"/>
							</outline>
						<outline text="if($(&quot;.modal&quot;).is(&quot;:visible&quot;)){">
							<outline text="if($(&quot;.modal&quot;).find(&quot;.concord-root:visible:first&quot;).length==1){">
								<outline text="return this.setFocusRoot($(&quot;.modal&quot;).find(&quot;.concord-root:visible:first&quot;));"/>
								<outline text="}"/>
								</outline>
							<outline text="}"/>
							</outline>
						<outline text="if(this.focusRoot==null){">
							<outline text="if($(&quot;.concord-root:visible&quot;).length&gt;0){">
								<outline text="return this.setFocusRoot($(&quot;.concord-root:visible:first&quot;));"/>
								<outline text="}else{">
									<outline text="return null;"/>
									<outline text="}"/>
									</outline>
								</outline>
							<outline text="}"/>
							</outline>
						<outline text="if(!this.focusRoot.is(&quot;:visible&quot;)){">
							<outline text="return this.setFocusRoot($(&quot;.concord-root:visible:first&quot;));"/>
							<outline text="}"/>
							</outline>
						<outline text="return this.focusRoot;"/>
						<outline text="},"/>
						</outline>
					<outline text="setFocusRoot: function(root){">
						<outline text="var origRoot = this.focusRoot;"/>
						<outline text="var concordInstance = new ConcordOutline(root.parent());"/>
						<outline text="if((origRoot!=null) &amp;&amp; !(origRoot[0]===root[0])){">
							<outline text="var origConcordInstance = new ConcordOutline(origRoot.parent());"/>
							<outline text="origConcordInstance.editor.hideContextMenu();"/>
							<outline text="origConcordInstance.editor.dragModeExit();"/>
							<outline text="if(concordInstance.op.inTextMode()){">
								<outline text="concordInstance.op.focusCursor();"/>
								<outline text="}"/>
								</outline>
							<outline text="else {">
								<outline text="concordInstance.pasteBinFocus();"/>
								<outline text="}"/>
								</outline>
							<outline text="}"/>
							</outline>
						<outline text="this.focusRoot = root;"/>
						<outline text="return this.focusRoot;"/>
						<outline text="},"/>
						</outline>
					<outline text="updateFocusRootEvent: function(event){">
						<outline text="var root = $(event.target).parents(&quot;.concord-root:first&quot;);"/>
						<outline text="if(root.length==1){">
							<outline text="concord.setFocusRoot(root);"/>
							<outline text="}"/>
							</outline>
						<outline text="}"/>
						</outline>
					<outline text="};"/>
					</outline>
				<outline text="var concordEnvironment = {">
					<outline text="&quot;version&quot; : concord.version"/>
					<outline text="};"/>
					</outline>
				<outline text="var concordClipboard = undefined;"/>
				<outline text="var flConcordScrollEnabled = true; //6/24/14 by DW"/>
				<outline text="var ctPixelsAboveOutlineArea = 0; //6/24/14 by DW"/>
				<outline text=""/>
				<outline text="jQuery.fn.reverse = [].reverse;"/>
				<outline text=""/>
				<outline text="//Constants">
					<outline text="var nil = null;"/>
					<outline text="var infinity = Number.MAX_VALUE;"/>
					<outline text="var down = &quot;down&quot;;"/>
					<outline text="var left = &quot;left&quot;;"/>
					<outline text="var right = &quot;right&quot;;"/>
					<outline text="var up = &quot;up&quot;;"/>
					<outline text="var flatup = &quot;flatup&quot;;"/>
					<outline text="var flatdown = &quot;flatdown&quot;;"/>
					<outline text="var nodirection = &quot;nodirection&quot;;"/>
					</outline>
				<outline text="var XML_CHAR_MAP = {">
					<outline text="'&lt;': '&amp;lt;',"/>
					<outline text="'\'': '&amp;apos;', //8/11/21 by DW" isComment="true" created="Wed, 11 Aug 2021 15:10:12 GMT"/>
					<outline text="'&gt;': '&amp;gt;',"/>
					<outline text="'&amp;': '&amp;amp;',"/>
					<outline text="'&quot;': '&amp;'+'quot;'"/>
					<outline text="};"/>
					</outline>
				<outline text="var ConcordUtil = {">
					<outline text="escapeXml: function(s) {">
						<outline text="s = s.toString();"/>
						<outline text="s = s.replace(/\u00A0/g, &quot; &quot;);"/>
						<outline text="var escaped = s.replace(/[&lt;&gt;&amp;&quot;]/g, function(ch) {">
							<outline text="return XML_CHAR_MAP[ch];"/>
							<outline text="});"/>
							</outline>
						<outline text="return escaped;"/>
						<outline text="},"/>
						</outline>
					<outline text="stringMid: function (s, ix, len) { //1/27/20 by DW">
						<outline text="return (s.substr (ix-1, len));"/>
						<outline text="},"/>
						</outline>
					<outline text="stringDelete: function (s, ix, ct) { //1/27/20 by DW">
						<outline text="var start = ix - 1;"/>
						<outline text="var end = (ix + ct) - 1;"/>
						<outline text="var s1 = s.substr (0, start);"/>
						<outline text="var s2 = s.substr (end);"/>
						<outline text="return (s1 + s2);"/>
						<outline text="},"/>
						</outline>
					<outline text="endsWith: function (s, possibleEnding, flUnicase) { //1/27/20 by DW">
						<outline text="function stringLower (s) {">
							<outline text="return (s.toLowerCase ());"/>
							<outline text="}"/>
							</outline>
						<outline text="if ((s === undefined) || (s.length == 0)) { " created="Wed, 01 Jan 2014 23:29:44 GMT" pgfnum="35184">
							<outline text="return (false);" created="Wed, 01 Jan 2014 23:29:49 GMT" pgfnum="35185"/>
							<outline text="}" created="Wed, 01 Jan 2014 23:29:52 GMT" pgfnum="35186"/>
							</outline>
						<outline text="var ixstring = s.length - 1;" created="Wed, 27 Nov 2013 22:09:56 GMT" pgfnum="32496"/>
						<outline text="if (flUnicase === undefined) {" created="Wed, 27 Nov 2013 21:59:59 GMT" pgfnum="32482">
							<outline text="flUnicase = true;" created="Wed, 27 Nov 2013 22:00:10 GMT" pgfnum="32483"/>
							<outline text="}" created="Wed, 27 Nov 2013 22:00:14 GMT" pgfnum="32484"/>
							</outline>
						<outline text="if (flUnicase) {" created="Wed, 27 Nov 2013 22:00:49 GMT" pgfnum="32485">
							<outline text="for (var i = possibleEnding.length - 1; i &gt;= 0; i--) {" created="Wed, 27 Nov 2013 21:58:48 GMT" pgfnum="32476">
								<outline text="if (stringLower (s [ixstring--]) != stringLower (possibleEnding [i])) {" created="Wed, 27 Nov 2013 21:59:05 GMT" pgfnum="32478">
									<outline text="return (false);" created="Wed, 27 Nov 2013 21:59:34 GMT" pgfnum="32479"/>
									<outline text="}" created="Wed, 27 Nov 2013 21:59:38 GMT" pgfnum="32480"/>
									</outline>
								<outline text="}" created="Wed, 27 Nov 2013 21:59:01 GMT" pgfnum="32477"/>
								</outline>
							<outline text="}" created="Wed, 27 Nov 2013 22:00:58 GMT" pgfnum="32486"/>
							</outline>
						<outline text="else {" created="Wed, 27 Nov 2013 22:01:08 GMT" pgfnum="32487">
							<outline text="for (var i = possibleEnding.length - 1; i &gt;= 0; i--) {" created="Wed, 27 Nov 2013 21:58:48 GMT" pgfnum="32476">
								<outline text="if (s [ixstring--] != possibleEnding [i]) {" created="Wed, 27 Nov 2013 21:59:05 GMT" pgfnum="32478">
									<outline text="return (false);" created="Wed, 27 Nov 2013 21:59:34 GMT" pgfnum="32479"/>
									<outline text="}" created="Wed, 27 Nov 2013 21:59:38 GMT" pgfnum="32480"/>
									</outline>
								<outline text="}" created="Wed, 27 Nov 2013 21:59:01 GMT" pgfnum="32477"/>
								</outline>
							<outline text="}" created="Wed, 27 Nov 2013 22:01:15 GMT" pgfnum="32488"/>
							</outline>
						<outline text="return (true);" created="Wed, 27 Nov 2013 21:59:44 GMT" pgfnum="32481"/>
						<outline text="},"/>
						</outline>
					<outline text="speakerBeep: function () { //1/27/20 by DW">
						<outline text="try {">
							<outline text="speakerBeep ();"/>
							<outline text="}"/>
							</outline>
						<outline text="catch (err) {">
							<outline text="console.log (&quot;beep&quot;);"/>
							<outline text="}"/>
							</outline>
						<outline text="},"/>
						</outline>
					<outline text="getIconHtml: function (iconName) { //1/30/20 by DW ">
						<outline text="var faClass = &quot;far&quot;;"/>
						<outline text="if (iconName == &quot;caret-right&quot;) {">
							<outline text="faClass = &quot;fas&quot;;"/>
							<outline text="}"/>
							</outline>
						<outline text="if (iconName == &quot;twitter&quot;) {">
							<outline text="faClass = &quot;fab&quot;;"/>
							<outline text="}"/>
							</outline>
						<outline text="if (iconName == &quot;markdown&quot;) {">
							<outline text="faClass = &quot;fab&quot;;"/>
							<outline text="}"/>
							</outline>
						<outline text="if (iconName == &quot;rss&quot;) { //3/11/22 by DW">
							<outline text="faClass = &quot;fas&quot;;"/>
							<outline text="}"/>
							</outline>
						<outline text="return (&quot;&lt;i class=\&quot;node-icon &quot; + faClass + &quot; fa-&quot;+ iconName +&quot;\&quot;&gt;&lt;/i&gt;&quot;);"/>
						<outline text="return (&quot;&lt;i class=\&quot;node-icon far fa-&quot;+ iconName +&quot;\&quot;&gt;&lt;/i&gt;&quot;);" isComment="true"/>
						<outline text="},"/>
						</outline>
					<outline text="getKeystroke: function (event) { //2/12/20 by DW">
						<outline text="var concordKeystrokes = {">
							<outline text="&quot;backspace&quot;: &quot;backspace&quot;, "/>
							<outline text="&quot;tab&quot;: &quot;tab&quot;,"/>
							<outline text="&quot;return&quot;: &quot;return&quot;,"/>
							<outline text="&quot;delete&quot;: &quot;delete&quot;,"/>
							<outline text="&quot;uparrow&quot;: &quot;cursor-up&quot;,"/>
							<outline text="&quot;downarrow&quot;: &quot;cursor-down&quot;,"/>
							<outline text="&quot;leftarrow&quot;: &quot;cursor-left&quot;,"/>
							<outline text="&quot;rightarrow&quot;: &quot;cursor-right&quot;,"/>
							<outline text=""/>
							<outline text="&quot;meta-A&quot;: &quot;select-all&quot;,"/>
							<outline text="&quot;meta-B&quot;: &quot;bolden&quot;,"/>
							<outline text="&quot;meta-C&quot;: &quot;copy&quot;,"/>
							<outline text="&quot;meta-D&quot;: &quot;reorg-down&quot;,"/>
							<outline text="&quot;meta-F&quot;: &quot;find&quot;, //9/19/13 by DW"/>
							<outline text="&quot;meta-I&quot;: &quot;italicize&quot;,"/>
							<outline text="&quot;meta-L&quot;: &quot;reorg-left&quot;,"/>
							<outline text="&quot;meta-R&quot;: &quot;reorg-right&quot;,"/>
							<outline text="&quot;meta-U&quot;: &quot;reorg-up&quot;,"/>
							<outline text="&quot;meta-V&quot;: &quot;paste&quot;,"/>
							<outline text="&quot;meta-X&quot;: &quot;cut&quot;,"/>
							<outline text="&quot;meta-Z&quot;: &quot;undo&quot;,"/>
							<outline text=""/>
							<outline text="&quot;meta-[&quot;: &quot;promote&quot;,"/>
							<outline text="&quot;meta-]&quot;: &quot;demote&quot;,"/>
							<outline text=""/>
							<outline text="&quot;meta-\\&quot;: &quot;toggle-comment&quot;,"/>
							<outline text="&quot;meta-/&quot;: &quot;run-selection&quot;,"/>
							<outline text="&quot;meta-`&quot;: &quot;toggle-render&quot;,"/>
							<outline text="&quot;meta-,&quot;: &quot;toggle-expand&quot;"/>
							<outline text="}"/>
							</outline>
						<outline text="function concordMetaizeKeystroke (event) { //9/17/13 by DW">
							<outline text="Changes" isComment="true">
								<outline text="2/17/20; 12:30:26 PM by DW">
									<outline text="Added cases for pageup, pagedown, home and end. "/>
									</outline>
								<outline text="2/6/20; 2:01:26 PM by DW">
									<outline text="Add &quot;meta-&quot; if the meta key is down, in all cases. previously we'd only add them for A through Z"/>
									</outline>
								</outline>
							<outline text="var flmeta = event.metaKey || event.ctrlKey;"/>
							<outline text="function checkspecials (ch) {">
								<outline text="switch (ch) {">
									<outline text="case 8:">
										<outline text="return (&quot;backspace&quot;);"/>
										</outline>
									<outline text="case 9:">
										<outline text="return (&quot;tab&quot;);"/>
										</outline>
									<outline text="case 13:">
										<outline text="return (&quot;return&quot;);"/>
										</outline>
									<outline text="case 33: ">
										<outline text="return (&quot;pageup&quot;);"/>
										</outline>
									<outline text="case 34: ">
										<outline text="return (&quot;pagedown&quot;);"/>
										</outline>
									<outline text="case 35: ">
										<outline text="return (&quot;end&quot;);"/>
										</outline>
									<outline text="case 36: ">
										<outline text="return (&quot;home&quot;);"/>
										</outline>
									<outline text="case 37:">
										<outline text="return (&quot;leftarrow&quot;);"/>
										</outline>
									<outline text="case 38:">
										<outline text="return (&quot;uparrow&quot;);"/>
										</outline>
									<outline text="case 39:">
										<outline text="return (&quot;rightarrow&quot;);"/>
										</outline>
									<outline text="case 40:">
										<outline text="return (&quot;downarrow&quot;);"/>
										</outline>
									<outline text="case 46:">
										<outline text="return (&quot;delete&quot;);"/>
										</outline>
									<outline text="case 188:">
										<outline text="return (&quot;,&quot;);"/>
										</outline>
									<outline text="case 190:">
										<outline text="return (&quot;.&quot;);"/>
										</outline>
									<outline text="case 191:">
										<outline text="return (&quot;/&quot;);"/>
										</outline>
									<outline text="case 192:">
										<outline text="return (&quot;`&quot;);"/>
										</outline>
									<outline text="case 219:">
										<outline text="return (&quot;[&quot;);"/>
										</outline>
									<outline text="case 220:">
										<outline text="return (&quot;\\&quot;);"/>
										</outline>
									<outline text="case 221:">
										<outline text="return (&quot;]&quot;);"/>
										</outline>
									<outline text="}"/>
									</outline>
								<outline text="switch (ch) {" isComment="true">
									<outline text="case 8:">
										<outline text="return (&quot;backspace&quot;);"/>
										</outline>
									<outline text="case 9:">
										<outline text="return (&quot;tab&quot;);"/>
										</outline>
									<outline text="case 13:">
										<outline text="return (&quot;return&quot;);"/>
										</outline>
									<outline text="case 33: //2/17/20 by DW">
										<outline text="return (&quot;pageup&quot;);"/>
										</outline>
									<outline text="case 34: //2/17/20 by DW">
										<outline text="return (&quot;pagedown&quot;);"/>
										</outline>
									<outline text="case 35: //2/17/20 by DW">
										<outline text="return (&quot;end&quot;);"/>
										</outline>
									<outline text="case 36: //2/17/20 by DW">
										<outline text="return (&quot;home&quot;);"/>
										</outline>
									<outline text="case 37:">
										<outline text="return (&quot;leftarrow&quot;);"/>
										</outline>
									<outline text="case 38:">
										<outline text="return (&quot;uparrow&quot;);"/>
										</outline>
									<outline text="case 39:">
										<outline text="return (&quot;rightarrow&quot;);"/>
										</outline>
									<outline text="case 40:">
										<outline text="return (&quot;downarrow&quot;);"/>
										</outline>
									<outline text="case 46:">
										<outline text="return (&quot;delete&quot;);"/>
										</outline>
									<outline text="case 188:">
										<outline text="if (flmeta) {">
											<outline text="return (&quot;meta-,&quot;);"/>
											<outline text="}"/>
											</outline>
										</outline>
									<outline text="case 190:">
										<outline text="if (flmeta) {">
											<outline text="return (&quot;meta-.&quot;);"/>
											<outline text="}"/>
											</outline>
										</outline>
									<outline text="case 191:">
										<outline text="if (flmeta) {">
											<outline text="return (&quot;meta-/&quot;);"/>
											<outline text="}"/>
											</outline>
										</outline>
									<outline text="case 192:">
										<outline text="if (flmeta) {">
											<outline text="return (&quot;meta-`&quot;);"/>
											<outline text="}"/>
											</outline>
										</outline>
									<outline text="case 219:">
										<outline text="if (flmeta) {">
											<outline text="return (&quot;meta-[&quot;);"/>
											<outline text="}"/>
											</outline>
										</outline>
									<outline text="case 220:">
										<outline text="if (flmeta) {">
											<outline text="return (&quot;meta-\\&quot;);"/>
											<outline text="}"/>
											</outline>
										</outline>
									<outline text="case 221:">
										<outline text="if (flmeta) {">
											<outline text="return (&quot;meta-]&quot;);"/>
											<outline text="}"/>
											</outline>
										</outline>
									<outline text="}"/>
									</outline>
								<outline text="return (ch);"/>
								<outline text="}"/>
								</outline>
							<outline text="var ch = event.which;"/>
							<outline text="if ((ch &gt;= 65) &amp;&amp; (ch &lt;= 90)) { //meta-A through meta-Z" created="Tue, 17 Sep 2013 22:10:20 GMT" pgfnum="30346">
								<outline text="if (flmeta) {" created="Tue, 17 Sep 2013 22:12:11 GMT" pgfnum="30350">
									<outline text="return (&quot;meta-&quot; + String.fromCharCode (ch));" created="Tue, 17 Sep 2013 22:12:22 GMT" pgfnum="30352"/>
									<outline text="}" created="Tue, 17 Sep 2013 22:12:18 GMT" pgfnum="30351"/>
									</outline>
								<outline text="}" created="Tue, 17 Sep 2013 22:10:45 GMT" pgfnum="30349"/>
								</outline>
							<outline text="else {" created="Tue, 20 Apr 2021 16:51:30 GMT">
								<outline text="if ((ch &gt;= 48) &amp;&amp; (ch &lt;= 57)) { //meta-0 through meta-9 -- 4/20/21 by DW" created="Tue, 17 Sep 2013 22:10:20 GMT" pgfnum="30346">
									<outline text="if (flmeta) {" created="Tue, 17 Sep 2013 22:12:11 GMT" pgfnum="30350">
										<outline text="return (&quot;meta-&quot; + String.fromCharCode (ch));" created="Tue, 17 Sep 2013 22:12:22 GMT" pgfnum="30352"/>
										<outline text="}" created="Tue, 17 Sep 2013 22:12:18 GMT" pgfnum="30351"/>
										</outline>
									<outline text="}" created="Tue, 17 Sep 2013 22:10:45 GMT" pgfnum="30349"/>
									</outline>
								<outline text="}" created="Tue, 20 Apr 2021 16:51:32 GMT"/>
								</outline>
							<outline text="var s = checkspecials (ch);"/>
							<outline text="if (flmeta) {">
								<outline text="return (&quot;meta-&quot; + s);"/>
								<outline text="}"/>
								</outline>
							<outline text="else {">
								<outline text="return (s);"/>
								<outline text="}"/>
								</outline>
							<outline text="}"/>
							</outline>
						<outline text="var s = concordMetaizeKeystroke (event);"/>
						<outline text="if (concordKeystrokes [s] !== undefined) {">
							<outline text="var val = concordKeystrokes [s];"/>
							<outline text="if (val.length &gt; 0) { //2/23/14 by DW">
								<outline text="return (val);"/>
								<outline text="}"/>
								</outline>
							<outline text="}"/>
							</outline>
						<outline text="return (s);"/>
						<outline text="}"/>
						</outline>
					<outline text="};"/>
					</outline>
				<outline text="function ConcordOutline(container, options) {">
					<outline text="this.container = container;"/>
					<outline text="this.options = options;"/>
					<outline text="this.id = null;"/>
					<outline text="this.root = null;"/>
					<outline text="this.editor = null;"/>
					<outline text="this.op = null;"/>
					<outline text="this.script = null;"/>
					<outline text="this.pasteBin = null;"/>
					<outline text="this.pasteBinFocus = function(){">
						<outline text="if(!concord.ready){">
							<outline text="return;"/>
							<outline text="}"/>
							</outline>
						<outline text="if(concord.mobile){">
							<outline text="return;"/>
							<outline text="}"/>
							</outline>
						<outline text="if(this.root.is(&quot;:visible&quot;)){">
							<outline text="var node = this.op.getCursor();"/>
							<outline text="var nodeOffset = node.offset();"/>
							<outline text="this.pasteBin.offset(nodeOffset);"/>
							<outline text="this.pasteBin.css(&quot;z-index&quot;,&quot;1000&quot;);"/>
							<outline text="if((this.pasteBin.text()==&quot;&quot;)||(this.pasteBin.text()==&quot;\n&quot;)){">
								<outline text="this.pasteBin.text(&quot;...&quot;);"/>
								<outline text="}"/>
								</outline>
							<outline text="this.op.focusCursor();"/>
							<outline text="this.pasteBin.focus();"/>
							<outline text="if(this.pasteBin[0] === document.activeElement){">
								<outline text="document.execCommand(&quot;selectAll&quot;);"/>
								<outline text="}"/>
								</outline>
							<outline text="}"/>
							</outline>
						<outline text="};"/>
						</outline>
					<outline text="this.callbacks = function(callbacks) {">
						<outline text="if(callbacks) {">
							<outline text="this.root.data(&quot;callbacks&quot;, callbacks);"/>
							<outline text="return callbacks;"/>
							</outline>
						<outline text="} else {">
							<outline text="if(this.root.data(&quot;callbacks&quot;)) {">
								<outline text="return this.root.data(&quot;callbacks&quot;);"/>
								<outline text="} else {">
									<outline text="return {};"/>
									<outline text="}"/>
									</outline>
								</outline>
							<outline text="}"/>
							</outline>
						<outline text="};"/>
						</outline>
					<outline text="this.fireCallback = function(name, value) {">
						<outline text="var cb = this.callbacks()[name]"/>
						<outline text="if(cb) {">
							<outline text="cb(value);"/>
							<outline text="}"/>
							</outline>
						<outline text="};"/>
						</outline>
					<outline text="this.prefs = function(newprefs) {">
						<outline text="var prefs = this.root.data(&quot;prefs&quot;);"/>
						<outline text="if(prefs == undefined){">
							<outline text="prefs = {};"/>
							<outline text="}"/>
							</outline>
						<outline text="if(newprefs) {">
							<outline text="for(var key in newprefs){">
								<outline text="prefs[key] = newprefs[key];"/>
								<outline text="}"/>
								</outline>
							<outline text="this.root.data(&quot;prefs&quot;, prefs);"/>
							<outline text="if(prefs.readonly){">
								<outline text="this.root.addClass(&quot;readonly&quot;);"/>
								<outline text="}"/>
								</outline>
							<outline text="if(prefs.renderMode!==undefined){">
								<outline text="this.root.data(&quot;renderMode&quot;, prefs.renderMode);"/>
								<outline text="}"/>
								</outline>
							<outline text="if(prefs.contextMenu){">
								<outline text="$(prefs.contextMenu).hide();"/>
								<outline text="}"/>
								</outline>
							<outline text="var style = {};"/>
							<outline text="if(prefs.outlineFont) {">
								<outline text="style[&quot;font-family&quot;] = prefs.outlineFont;"/>
								<outline text="}"/>
								</outline>
							<outline text="if(prefs.outlineFontSize) {">
								<outline text="prefs.outlineFontSize = parseInt(prefs.outlineFontSize);"/>
								<outline text="style[&quot;font-size&quot;] = prefs.outlineFontSize + &quot;px&quot;;"/>
								<outline text="style[&quot;min-height&quot;] = (prefs.outlineFontSize + 6) + &quot;px&quot;;"/>
								<outline text="style[&quot;line-height&quot;] = (prefs.outlineFontSize + 6) + &quot;px&quot;;"/>
								<outline text="}"/>
								</outline>
							<outline text="if(prefs.outlineLineHeight) {">
								<outline text="prefs.outlineLineHeight = parseInt(prefs.outlineLineHeight);"/>
								<outline text="style[&quot;min-height&quot;] = prefs.outlineLineHeight + &quot;px&quot;;"/>
								<outline text="style[&quot;line-height&quot;] = prefs.outlineLineHeight + &quot;px&quot;;"/>
								<outline text="}"/>
								</outline>
							<outline text="this.root.parent().find(&quot;style.prefsStyle&quot;).remove();"/>
							<outline text="var css = '&lt;style type=&quot;text/css&quot; class=&quot;prefsStyle&quot;&gt;\n';"/>
							<outline text="var cssId=&quot;&quot;;"/>
							<outline text="if(this.root.parent().attr(&quot;id&quot;)){">
								<outline text="cssId=&quot;#&quot;+this.root.parent().attr(&quot;id&quot;);"/>
								<outline text="}"/>
								</outline>
							<outline text="css += cssId + ' .concord .concord-node .concord-wrapper .concord-text {';"/>
							<outline text="for(var attribute in style) {">
								<outline text="css += attribute + ': ' + style[attribute] + ';';"/>
								<outline text="}"/>
								</outline>
							<outline text="css += '}\n';"/>
							<outline text="css += cssId + ' .concord .concord-node .concord-wrapper .node-icon {';"/>
							<outline text="for(var attribute in style) {">
								<outline text="if(attribute!=&quot;font-family&quot;){">
									<outline text="css += attribute + ': ' + style[attribute] + ';';"/>
									<outline text="}"/>
									</outline>
								<outline text="}"/>
								</outline>
							<outline text="css += '}\n'"/>
							<outline text="var wrapperPaddingLeft = prefs.outlineLineHeight;"/>
							<outline text="if(wrapperPaddingLeft===undefined){">
								<outline text="wrapperPaddingLeft = prefs.outlineFontSize;"/>
								<outline text="}"/>
								</outline>
							<outline text="if(wrapperPaddingLeft!== undefined){">
								<outline text="css += cssId + ' .concord .concord-node .concord-wrapper {';"/>
								<outline text="css += &quot;padding-left: &quot; + wrapperPaddingLeft + &quot;px&quot;;"/>
								<outline text="css += &quot;}\n&quot;;"/>
								<outline text="css += cssId + ' .concord ol {';"/>
								<outline text="css += &quot;padding-left: &quot; + wrapperPaddingLeft + &quot;px&quot;;"/>
								<outline text="css += &quot;}\n&quot;;"/>
								<outline text="}"/>
								</outline>
							<outline text="css += '&lt;/style&gt;\n';"/>
							<outline text="this.root.before(css);"/>
							<outline text="if(newprefs.css){">
								<outline text="this.op.setStyle(newprefs.css);"/>
								<outline text="}"/>
								</outline>
							<outline text="}"/>
							</outline>
						<outline text="return prefs;"/>
						<outline text="};"/>
						</outline>
					<outline text="this.afterInit = function() {">
						<outline text="this.editor = new ConcordEditor(this.root, this);"/>
						<outline text="this.op = new ConcordOp(this.root, this);"/>
						<outline text="this.script = new ConcordScript(this.root, this);"/>
						<outline text="if(options) {">
							<outline text="if(options.prefs) {">
								<outline text="this.prefs(options.prefs);"/>
								<outline text="}"/>
								</outline>
							<outline text="if(options.open) {">
								<outline text="this.root.data(&quot;open&quot;, options.open);"/>
								<outline text="}"/>
								</outline>
							<outline text="if(options.save) {">
								<outline text="this.root.data(&quot;save&quot;, options.save);"/>
								<outline text="}"/>
								</outline>
							<outline text="if(options.callbacks) {">
								<outline text="this.callbacks(options.callbacks);"/>
								<outline text="}"/>
								</outline>
							<outline text="if(options.id) {">
								<outline text="this.root.data(&quot;id&quot;, options.id);"/>
								<outline text="this.open();"/>
								<outline text="}"/>
								</outline>
							<outline text="}"/>
							</outline>
						<outline text="};"/>
						</outline>
					<outline text="this.init = function() {">
						<outline text="if($(container).find(&quot;.concord-root:first&quot;).length &gt; 0) {">
							<outline text="this.root = $(container).find(&quot;.concord-root:first&quot;);"/>
							<outline text="this.pasteBin = $(container).find(&quot;.pasteBin:first&quot;);"/>
							<outline text="this.afterInit();"/>
							<outline text="return;"/>
							<outline text="}"/>
							</outline>
						<outline text="var root = $(&quot;&lt;ol&gt;&lt;/ol&gt;&quot;);"/>
						<outline text="root.addClass(&quot;concord concord-root&quot;);"/>
						<outline text="root.appendTo(container);"/>
						<outline text="this.root = root;"/>
						<outline text="var pasteBin = $('&lt;div class=&quot;pasteBin&quot; contenteditable=&quot;true&quot; style=&quot;position: absolute; height: 1px; width:1px; outline:none; overflow:hidden;&quot;&gt;&lt;/div&gt;');"/>
						<outline text="pasteBin.appendTo(container);"/>
						<outline text="this.pasteBin = pasteBin;"/>
						<outline text="this.afterInit();"/>
						<outline text="this.events = new ConcordEvents(this.root, this.editor, this.op, this);"/>
						<outline text="};"/>
						</outline>
					<outline text="this[&quot;new&quot;] = function() {">
						<outline text="this.op.wipe();"/>
						<outline text="};"/>
						</outline>
					<outline text="this.open = function(cb) {">
						<outline text="var opmlId = this.root.data(&quot;id&quot;);"/>
						<outline text="if(!opmlId) {">
							<outline text="return;"/>
							<outline text="}"/>
							</outline>
						<outline text="var root = this.root;"/>
						<outline text="var editor = this.editor;"/>
						<outline text="var op = this.op;"/>
						<outline text="var openUrl = &quot;http://concord.smallpicture.com/open&quot;;"/>
						<outline text="if(root.data(&quot;open&quot;)) {">
							<outline text="openUrl = root.data(&quot;open&quot;);"/>
							<outline text="}"/>
							</outline>
						<outline text="params = {}"/>
						<outline text="if(opmlId.match(/^http.+$/)) {">
							<outline text="params[&quot;url&quot;] = opmlId"/>
							<outline text="} else {">
								<outline text="params[&quot;id&quot;] = opmlId"/>
								<outline text="}"/>
								</outline>
							</outline>
						<outline text="$.ajax({">
							<outline text="type: 'POST',"/>
							<outline text="url: openUrl,"/>
							<outline text="data: params,"/>
							<outline text="dataType: &quot;xml&quot;,"/>
							<outline text="success: function(opml) {">
								<outline text="if(opml) {">
									<outline text="op.xmlToOutline(opml);"/>
									<outline text="if(cb) {">
										<outline text="cb();"/>
										<outline text="}"/>
										</outline>
									<outline text="}"/>
									</outline>
								<outline text="},"/>
								</outline>
							<outline text="error: function() {">
								<outline text="if(root.find(&quot;.concord-node&quot;).length == 0) {">
									<outline text="op.wipe();"/>
									<outline text="}"/>
									</outline>
								<outline text="}"/>
								</outline>
							<outline text="});"/>
							</outline>
						<outline text="};"/>
						</outline>
					<outline text="this.save = function(cb) {">
						<outline text="var opmlId = this.root.data(&quot;id&quot;);"/>
						<outline text="if(opmlId &amp;&amp; this.op.changed()) {">
							<outline text="var saveUrl = &quot;http://concord.smallpicture.com/save&quot;;"/>
							<outline text="if(this.root.data(&quot;save&quot;)) {">
								<outline text="saveUrl = this.root.data(&quot;save&quot;);"/>
								<outline text="}"/>
								</outline>
							<outline text="var concordInstance = this;"/>
							<outline text="var opml = this.op.outlineToXml();"/>
							<outline text="$.ajax({">
								<outline text="type: 'POST',"/>
								<outline text="url: saveUrl,"/>
								<outline text="data: {">
									<outline text="&quot;opml&quot;: opml,"/>
									<outline text="&quot;id&quot;: opmlId"/>
									<outline text="},"/>
									</outline>
								<outline text="dataType: &quot;json&quot;,"/>
								<outline text="success: function(json) {">
									<outline text="concordInstance.op.clearChanged();"/>
									<outline text="if(cb) {">
										<outline text="cb(json);"/>
										<outline text="}"/>
										</outline>
									<outline text="}"/>
									</outline>
								<outline text="});"/>
								</outline>
							<outline text="}"/>
							</outline>
						<outline text="};"/>
						</outline>
					<outline text="this[&quot;import&quot;] = function(opmlId, cb) {">
						<outline text="var openUrl = &quot;http://concordold.smallpicture.com/open&quot;;"/>
						<outline text="var root = this.root;"/>
						<outline text="var concordInstance = this;"/>
						<outline text="if(root.data(&quot;open&quot;)) {">
							<outline text="openUrl = root.data(&quot;open&quot;);"/>
							<outline text="}"/>
							</outline>
						<outline text="params = {}"/>
						<outline text="if(opmlId.match(/^http.+$/)) {">
							<outline text="params[&quot;url&quot;] = opmlId;"/>
							<outline text="} else {">
								<outline text="params[&quot;id&quot;] = opmlId;"/>
								<outline text="}"/>
								</outline>
							</outline>
						<outline text="$.ajax({">
							<outline text="type: 'POST',"/>
							<outline text="url: openUrl,"/>
							<outline text="data: params,"/>
							<outline text="dataType: &quot;xml&quot;,"/>
							<outline text="success: function(opml) {">
								<outline text="if(opml) {">
									<outline text="var cursor = root.find(&quot;.concord-cursor:first&quot;);"/>
									<outline text="$(opml).find(&quot;body&quot;).children(&quot;outline&quot;).each(function() {">
										<outline text="var node = concordInstance.editor.build($(this));"/>
										<outline text="cursor.after(node);"/>
										<outline text="cursor = node;"/>
										<outline text="});"/>
										</outline>
									<outline text="concordInstance.op.markChanged();"/>
									<outline text="if(cb) {">
										<outline text="cb();"/>
										<outline text="}"/>
										</outline>
									<outline text="}"/>
									</outline>
								<outline text="},"/>
								</outline>
							<outline text="error: function() {">
								<outline text="}"/>
								</outline>
							<outline text="});"/>
							</outline>
						<outline text="};"/>
						</outline>
					<outline text="this[&quot;export&quot;] = function() {">
						<outline text="var context = this.root.find(&quot;.concord-cursor:first&quot;);"/>
						<outline text="if(context.length == 0) {">
							<outline text="context = this.root.find(&quot;.concord-root:first&quot;);"/>
							<outline text="}"/>
							</outline>
						<outline text="return this.editor.opml(context);"/>
						<outline text="};"/>
						</outline>
					<outline text="this.init();"/>
					<outline text="}"/>
					</outline>
				<outline text="function ConcordEditor(root, concordInstance) {">
					<outline text="this.makeNode = function(){">
						<outline text="var node = $(&quot;&lt;li&gt;&lt;/li&gt;&quot;);"/>
						<outline text="node.addClass(&quot;concord-node&quot;);"/>
						<outline text="var wrapper = $(&quot;&lt;div class='concord-wrapper'&gt;&lt;/div&gt;&quot;);"/>
						<outline text="var iconName=&quot;caret-right&quot;;"/>
						<outline text="var icon = ConcordUtil.getIconHtml (iconName);"/>
						<outline text="wrapper.append(icon);"/>
						<outline text="wrapper.addClass(&quot;type-icon&quot;);"/>
						<outline text="var text = $(&quot;&lt;div class='concord-text' contenteditable='true'&gt;&lt;/div&gt;&quot;);"/>
						<outline text="var outline = $(&quot;&lt;ol&gt;&lt;/ol&gt;&quot;);"/>
						<outline text="text.appendTo(wrapper);"/>
						<outline text="wrapper.appendTo(node);"/>
						<outline text="outline.appendTo(node);"/>
						<outline text="return node;"/>
						<outline text="};"/>
						</outline>
					<outline text="this.dragMode = function() {">
						<outline text="root.data(&quot;draggingChange&quot;, root.children().clone(true, true));"/>
						<outline text="root.addClass(&quot;dragging&quot;);"/>
						<outline text="root.data(&quot;dragging&quot;, true);"/>
						<outline text="};"/>
						</outline>
					<outline text="this.dragModeExit = function() {">
						<outline text="if(root.data(&quot;dragging&quot;)) {">
							<outline text="concordInstance.op.markChanged();"/>
							<outline text="root.data(&quot;change&quot;, root.data(&quot;draggingChange&quot;));"/>
							<outline text="root.data(&quot;changeTextMode&quot;, false);"/>
							<outline text="root.data(&quot;changeRange&quot;, undefined);"/>
							<outline text="}"/>
							</outline>
						<outline text="root.find(&quot;.draggable&quot;).removeClass(&quot;draggable&quot;);"/>
						<outline text="root.find(&quot;.drop-sibling&quot;).removeClass(&quot;drop-sibling&quot;);"/>
						<outline text="root.find(&quot;.drop-child&quot;).removeClass(&quot;drop-child&quot;);"/>
						<outline text="root.removeClass(&quot;dragging&quot;);"/>
						<outline text="root.data(&quot;dragging&quot;, false);"/>
						<outline text="root.data(&quot;mousedown&quot;, false);"/>
						<outline text="};"/>
						</outline>
					<outline text="this.edit = function(node, empty) {">
						<outline text="var text = node.children(&quot;.concord-wrapper:first&quot;).children(&quot;.concord-text:first&quot;);"/>
						<outline text="if(empty) {">
							<outline text="text.html(&quot;&quot;);"/>
							<outline text="}"/>
							</outline>
						<outline text="text.focus();"/>
						<outline text="var el = text.get(0);"/>
						<outline text="if(el &amp;&amp; el.childNodes &amp;&amp; el.childNodes[0]){">
							<outline text="if (typeof window.getSelection != &quot;undefined&quot; &amp;&amp; typeof document.createRange != &quot;undefined&quot;) {">
								<outline text="        var range = document.createRange();"/>
								<outline text="        range.selectNodeContents(el);"/>
								<outline text="        range.collapse(false);"/>
								<outline text="        var sel = window.getSelection();"/>
								<outline text="        sel.removeAllRanges();"/>
								<outline text="        sel.addRange(range);"/>
								<outline text="    } else if (typeof document.body.createTextRange != &quot;undefined&quot;) {">
									<outline text="var textRange = document.body.createTextRange();"/>
									<outline text="textRange.moveToElementText(el);"/>
									<outline text="textRange.collapse(false);"/>
									<outline text="        textRange.select();"/>
									</outline>
								<outline text="    }"/>
								</outline>
							<outline text="}"/>
							</outline>
						<outline text="text.addClass(&quot;editing&quot;);"/>
						<outline text="if(!empty){">
							<outline text="if(root.find(&quot;.concord-node.dirty&quot;).length&gt;0){">
								<outline text="concordInstance.op.markChanged();"/>
								<outline text="}"/>
								</outline>
							<outline text="}"/>
							</outline>
						<outline text="};"/>
						</outline>
					<outline text="this.editable = function(target) {">
						<outline text="var editable = false;"/>
						<outline text="if(!target.hasClass(&quot;concord-text&quot;)) {">
							<outline text="target = target.parents(&quot;.concord-text:first&quot;);"/>
							<outline text="}"/>
							</outline>
						<outline text="if(target.length == 1) {">
							<outline text="editable = target.hasClass(&quot;concord-text&quot;) &amp;&amp; target.hasClass(&quot;editing&quot;);"/>
							<outline text="}"/>
							</outline>
						<outline text="return editable;"/>
						<outline text="};"/>
						</outline>
					<outline text="this.editorMode = function() {">
						<outline text="root.find(&quot;.selected&quot;).removeClass(&quot;selected&quot;);"/>
						<outline text="root.find(&quot;.editing&quot;).each(function() {">
							<outline text="//$(this).blur();"/>
							<outline text="$(this).removeClass(&quot;editing&quot;);"/>
							<outline text="});"/>
							</outline>
						<outline text="root.find(&quot;.selection-toolbar&quot;).remove();"/>
						<outline text="};"/>
						</outline>
					<outline text="this.opml = function(_root, flsubsonly) {">
						<outline text=""/>
						<outline text="if (flsubsonly == undefined) { //8/5/13 by DW">
							<outline text="flsubsonly = false;"/>
							<outline text="}"/>
							</outline>
						<outline text=""/>
						<outline text="if(_root) {">
							<outline text="root = _root;"/>
							<outline text="}"/>
							</outline>
						<outline text="var title = root.data(&quot;title&quot;);"/>
						<outline text="if(!title) {">
							<outline text="if(root.hasClass(&quot;concord-node&quot;)) {">
								<outline text="title = root.children(&quot;.concord-wrapper:first&quot;).children(&quot;.concord-text:first&quot;).text();"/>
								<outline text="}"/>
								</outline>
							<outline text="else {">
								<outline text="title = &quot;&quot;;"/>
								<outline text="}"/>
								</outline>
							<outline text="}"/>
							</outline>
						<outline text="var opml = '&lt;?xml version=&quot;1.0&quot;?&gt;\n';"/>
						<outline text="opml += '&lt;opml version=&quot;2.0&quot;&gt;\n';"/>
						<outline text="opml += '&lt;head&gt;\n';"/>
						<outline text="opml += '&lt;title&gt;' + ConcordUtil.escapeXml(title) + '&lt;/title&gt;\n';"/>
						<outline text="opml += '&lt;/head&gt;\n';"/>
						<outline text="opml += '&lt;body&gt;\n';"/>
						<outline text="if(root.hasClass(&quot;concord-cursor&quot;)) {">
							<outline text="opml += this.opmlLine(root, 0, flsubsonly);"/>
							<outline text="} else {">
								<outline text="var editor = this;"/>
								<outline text="root.children(&quot;.concord-node&quot;).each(function() {">
									<outline text="opml += editor.opmlLine($(this));"/>
									<outline text="});"/>
									</outline>
								<outline text="}"/>
								</outline>
							</outline>
						<outline text="opml += '&lt;/body&gt;\n';"/>
						<outline text="opml += '&lt;/opml&gt;\n';"/>
						<outline text="return opml;"/>
						<outline text="};"/>
						</outline>
					<outline text="this.opmlLine = function(node, indent, flsubsonly) {">
						<outline text="if(indent==undefined){">
							<outline text="indent=0;"/>
							<outline text="}"/>
							</outline>
						<outline text=""/>
						<outline text="if (flsubsonly == undefined) { //8/5/13 by DW">
							<outline text="flsubsonly = false;"/>
							<outline text="}"/>
							</outline>
						<outline text=""/>
						<outline text="var text = this.unescape(node.children(&quot;.concord-wrapper:first&quot;).children(&quot;.concord-text:first&quot;).html());"/>
						<outline text="var textMatches = text.match(/^(.+)&lt;br&gt;\s*$/);"/>
						<outline text="if(textMatches){">
							<outline text="text = textMatches[1];"/>
							<outline text="}"/>
							</outline>
						<outline text="var opml = '';"/>
						<outline text="for(var i=0; i &lt; indent;i++){">
							<outline text="opml += '\t';"/>
							<outline text="}"/>
							</outline>
						<outline text=""/>
						<outline text="var subheads; "/>
						<outline text="if (!flsubsonly) { //8/5/13 by DW">
							<outline text="opml += '&lt;outline text=&quot;' + ConcordUtil.escapeXml(text) + '&quot;';"/>
							<outline text="var attributes = node.data(&quot;attributes&quot;);"/>
							<outline text="if(attributes===undefined){">
								<outline text="attributes={};"/>
								<outline text="}"/>
								</outline>
							<outline text="for(var name in attributes){">
								<outline text="if((name!==undefined) &amp;&amp; (name!=&quot;&quot;) &amp;&amp; (name != &quot;text&quot;)) {">
									<outline text="if(attributes[name]!==undefined){">
										<outline text="opml += ' ' + name + '=&quot;' + ConcordUtil.escapeXml(attributes[name]) + '&quot;';"/>
										<outline text="}"/>
										</outline>
									<outline text="}"/>
									</outline>
								<outline text="}"/>
								</outline>
							<outline text="subheads = node.children(&quot;ol&quot;).children(&quot;.concord-node&quot;);"/>
							<outline text="if(subheads.length==0){">
								<outline text="opml+=&quot;/&gt;\n&quot;;"/>
								<outline text="return opml;"/>
								<outline text="}"/>
								</outline>
							<outline text="opml += &quot;&gt;\n&quot;;"/>
							<outline text="}"/>
							</outline>
						<outline text="else {">
							<outline text="subheads = node.children(&quot;ol&quot;).children(&quot;.concord-node&quot;);"/>
							<outline text="}"/>
							</outline>
						<outline text=""/>
						<outline text="var editor = this;"/>
						<outline text="indent++;"/>
						<outline text="subheads.each(function() {">
							<outline text="opml += editor.opmlLine($(this), indent);"/>
							<outline text="});"/>
							</outline>
						<outline text=""/>
						<outline text="if (!flsubsonly) { //8/5/13 by DW">
							<outline text="for(var i=0; i &lt; indent;i++){">
								<outline text="opml += '\t';"/>
								<outline text="}"/>
								</outline>
							<outline text="opml += '&lt;/outline&gt;\n';"/>
							<outline text="}"/>
							</outline>
						<outline text=""/>
						<outline text="return opml;"/>
						<outline text="};"/>
						</outline>
					<outline text="this.textLine = function(node, indent){">
						<outline text="if(!indent){">
							<outline text="indent = 0;"/>
							<outline text="}"/>
							</outline>
						<outline text="var text = &quot;&quot;;"/>
						<outline text="for(var i=0; i &lt; indent;i++){">
							<outline text="text += &quot;\t&quot;;"/>
							<outline text="}"/>
							</outline>
						<outline text="text += this.unescape(node.children(&quot;.concord-wrapper:first&quot;).children(&quot;.concord-text:first&quot;).html());"/>
						<outline text="text += &quot;\n&quot;;"/>
						<outline text="var editor = this;"/>
						<outline text="node.children(&quot;ol&quot;).children(&quot;.concord-node&quot;).each(function() {">
							<outline text="text += editor.textLine($(this), indent+1);"/>
							<outline text="});"/>
							</outline>
						<outline text="return text;"/>
						<outline text="};"/>
						</outline>
					<outline text="this.select = function(node, multiple, multipleRange) {">
						<outline text="if(multiple == undefined) {">
							<outline text="multiple = false;"/>
							<outline text="}"/>
							</outline>
						<outline text="if(multipleRange == undefined) {">
							<outline text="multipleRange = false;"/>
							<outline text="}"/>
							</outline>
						<outline text="if(node.length == 1) {">
							<outline text="this.selectionMode(multiple);"/>
							<outline text="if(multiple){">
								<outline text="node.parents(&quot;.concord-node.selected&quot;).removeClass(&quot;selected&quot;);"/>
								<outline text="node.find(&quot;.concord-node.selected&quot;).removeClass(&quot;selected&quot;);"/>
								<outline text="}"/>
								</outline>
							<outline text="if(multiple &amp;&amp; multipleRange) {">
								<outline text="var prevNodes = node.prevAll(&quot;.selected&quot;);"/>
								<outline text="if(prevNodes.length &gt; 0) {">
									<outline text="var stamp = false;"/>
									<outline text="node.prevAll().reverse().each(function() {">
										<outline text="if($(this).hasClass(&quot;selected&quot;)) {">
											<outline text="stamp = true;"/>
											<outline text="} else if(stamp) {">
												<outline text="$(this).addClass(&quot;selected&quot;);"/>
												<outline text="}"/>
												</outline>
											</outline>
										<outline text="});"/>
										</outline>
									<outline text="} else {">
										<outline text="var nextNodes = node.nextAll(&quot;.selected&quot;);"/>
										<outline text="if(nextNodes.length &gt; 0) {">
											<outline text="var stamp = true;"/>
											<outline text="node.nextAll().each(function() {">
												<outline text="if($(this).hasClass(&quot;selected&quot;)) {">
													<outline text="stamp = false;"/>
													<outline text="} else if(stamp) {">
														<outline text="$(this).addClass(&quot;selected&quot;);"/>
														<outline text="}"/>
														</outline>
													</outline>
												<outline text="});"/>
												</outline>
											<outline text="}"/>
											</outline>
										<outline text="}"/>
										</outline>
									</outline>
								<outline text="}"/>
								</outline>
							<outline text="var text = node.children(&quot;.concord-wrapper:first&quot;).children(&quot;.concord-text:first&quot;);"/>
							<outline text="if(text.hasClass(&quot;editing&quot;)) {">
								<outline text="text.removeClass(&quot;editing&quot;);"/>
								<outline text="}"/>
								</outline>
							<outline text="//text.blur();"/>
							<outline text="node.addClass(&quot;selected&quot;);"/>
							<outline text="if(text.text().length&gt;0){">
								<outline text="//root.data(&quot;currentChange&quot;, root.children().clone());"/>
								<outline text="}"/>
								</outline>
							<outline text="this.dragModeExit();"/>
							<outline text="}"/>
							</outline>
						<outline text="if(root.find(&quot;.concord-node.dirty&quot;).length&gt;0){">
							<outline text="concordInstance.op.markChanged();"/>
							<outline text="}"/>
							</outline>
						<outline text="};"/>
						</outline>
					<outline text="this.selectionMode = function(multiple) {">
						<outline text="if(multiple == undefined) {">
							<outline text="multiple = false;"/>
							<outline text="}"/>
							</outline>
						<outline text="var node = root.find(&quot;.concord-cursor&quot;);"/>
						<outline text="if(node.length == 1) {">
							<outline text="var text = node.children(&quot;.concord-wrapper:first&quot;).children(&quot;.concord-text:first&quot;);"/>
							<outline text="if(text.length == 1) {">
								<outline text="//text.blur();"/>
								<outline text="}"/>
								</outline>
							<outline text="}"/>
							</outline>
						<outline text="if(!multiple) {">
							<outline text="root.find(&quot;.selected&quot;).removeClass(&quot;selected&quot;);"/>
							<outline text="}"/>
							</outline>
						<outline text="root.find(&quot;.selection-toolbar&quot;).remove();"/>
						<outline text="};"/>
						</outline>
					<outline text="this.build = function(outline,collapsed, level, flInsertRawHtml) { //9/18/20 by DW -- new optional param, flInsertRawHtml">
						<outline text="if(!level){">
							<outline text="level = 1;"/>
							<outline text="}"/>
							</outline>
						<outline text="var node = $(&quot;&lt;li&gt;&lt;/li&gt;&quot;);"/>
						<outline text="node.addClass(&quot;concord-node&quot;);"/>
						<outline text="node.addClass(&quot;concord-level-&quot;+level);"/>
						<outline text="var attributes = {};"/>
						<outline text="$(outline[0].attributes).each(function() {">
							<outline text="if(this.name != 'text') {">
								<outline text="attributes[this.name] = this.value;"/>
								<outline text="if(this.name==&quot;type&quot;){">
									<outline text="node.attr(&quot;opml-&quot; + this.name, this.value);"/>
									<outline text="}"/>
									</outline>
								<outline text="}"/>
								</outline>
							<outline text="});"/>
							</outline>
						<outline text="node.data(&quot;attributes&quot;, attributes);"/>
						<outline text="var wrapper = $(&quot;&lt;div class='concord-wrapper'&gt;&lt;/div&gt;&quot;);"/>
						<outline text="var nodeIcon = attributes[&quot;icon&quot;];"/>
						<outline text="if(!nodeIcon){">
							<outline text="nodeIcon = attributes[&quot;type&quot;];"/>
							<outline text="}"/>
							</outline>
						<outline text="var iconName=&quot;caret-right&quot;;"/>
						<outline text="if(nodeIcon){">
							<outline text="if((nodeIcon==node.attr(&quot;opml-type&quot;)) &amp;&amp; concordInstance.prefs() &amp;&amp; concordInstance.prefs().typeIcons &amp;&amp; concordInstance.prefs().typeIcons[nodeIcon]){">
								<outline text="iconName = concordInstance.prefs().typeIcons[nodeIcon];"/>
								<outline text="}else if (nodeIcon==attributes[&quot;icon&quot;]){">
									<outline text="iconName = nodeIcon;"/>
									<outline text="}"/>
									</outline>
								</outline>
							<outline text="}"/>
							</outline>
						<outline text="var icon = ConcordUtil.getIconHtml (iconName);"/>
						<outline text="var icon = &quot;&lt;i&quot;+&quot; class=\&quot;node-icon fa fa-&quot;+ iconName +&quot;\&quot;&gt;&lt;&quot;+&quot;/i&gt;&quot;;" isComment="true"/>
						<outline text="wrapper.append(icon);"/>
						<outline text="wrapper.addClass(&quot;type-icon&quot;);"/>
						<outline text="if(attributes[&quot;isComment&quot;]==&quot;true&quot;){">
							<outline text="node.addClass(&quot;concord-comment&quot;);"/>
							<outline text="}"/>
							</outline>
						<outline text="var text = $(&quot;&lt;div class='concord-text' contenteditable='true'&gt;&lt;/div&gt;&quot;);"/>
						<outline text="text.addClass(&quot;concord-level-&quot;+level+&quot;-text&quot;);"/>
						<outline text=""/>
						<outline text="//9/18/20 by DW -- option to insert without escaping">
							<outline text="var textToInsert;"/>
							<outline text="if (flInsertRawHtml) {">
								<outline text="textToInsert = outline.attr ('text'); "/>
								<outline text="}"/>
								</outline>
							<outline text="else {">
								<outline text="textToInsert = this.escape (outline.attr ('text')); "/>
								<outline text="}"/>
								</outline>
							<outline text="text.html (textToInsert);"/>
							</outline>
						<outline text=""/>
						<outline text="if(attributes[&quot;cssTextClass&quot;]!==undefined){">
							<outline text="var cssClasses = attributes[&quot;cssTextClass&quot;].split(/\s+/);"/>
							<outline text="for(var c in cssClasses){">
								<outline text="var newClass = cssClasses[c];"/>
								<outline text="text.addClass(newClass);"/>
								<outline text="}"/>
								</outline>
							<outline text="}"/>
							</outline>
						<outline text="var children = $(&quot;&lt;ol&gt;&lt;/ol&gt;&quot;);"/>
						<outline text="var editor = this;"/>
						<outline text="outline.children(&quot;outline&quot;).each(function() {">
							<outline text="var child = editor.build($(this), collapsed, level+1, flInsertRawHtml);"/>
							<outline text="child.appendTo(children);"/>
							<outline text="});"/>
							</outline>
						<outline text="if(collapsed){">
							<outline text="if(outline.children(&quot;outline&quot;).size()&gt;0){">
								<outline text="node.addClass(&quot;collapsed&quot;);"/>
								<outline text="}"/>
								</outline>
							<outline text="}"/>
							</outline>
						<outline text="text.appendTo(wrapper);"/>
						<outline text="wrapper.appendTo(node);"/>
						<outline text="children.appendTo(node);"/>
						<outline text="return node;"/>
						<outline text="};"/>
						</outline>
					<outline text="this.hideContextMenu = function(){">
						<outline text="if(root.data(&quot;dropdown&quot;)){">
							<outline text="root.data(&quot;dropdown&quot;).hide();"/>
							<outline text="root.data(&quot;dropdown&quot;).remove();"/>
							<outline text="root.removeData(&quot;dropdown&quot;);"/>
							<outline text="}"/>
							</outline>
						<outline text="};"/>
						</outline>
					<outline text="this.showContextMenu = function(x,y){">
						<outline text="if(concordInstance.prefs().contextMenu){">
							<outline text="this.hideContextMenu();"/>
							<outline text="root.data(&quot;dropdown&quot;, $(concordInstance.prefs().contextMenu).clone().appendTo(concordInstance.container));"/>
							<outline text="var editor = this;"/>
							<outline text="root.data(&quot;dropdown&quot;).on(&quot;click&quot;, &quot;a&quot;, function(event){">
								<outline text="editor.hideContextMenu();"/>
								<outline text="});"/>
								</outline>
							<outline text="root.data(&quot;dropdown&quot;).css({&quot;position&quot; : &quot;absolute&quot;, &quot;top&quot; : y +&quot;px&quot;, &quot;left&quot; : x + &quot;px&quot;, &quot;cursor&quot; : &quot;default&quot;});"/>
							<outline text="root.data(&quot;dropdown&quot;).show();"/>
							<outline text="}"/>
							</outline>
						<outline text="};"/>
						</outline>
					<outline text="this.sanitize = function(){">
						<outline text="var editor = this;"/>
						<outline text="root.find(&quot;.concord-text.paste&quot;).each(function(){">
							<outline text="var concordText = $(this);"/>
							<outline text="if(concordInstance.pasteBin.text()==&quot;...&quot;){">
								<outline text="return;"/>
								<outline text="}"/>
								</outline>
							<outline text="var h = concordInstance.pasteBin.html();"/>
							<outline text="h = h.replace(new RegExp(&quot;&lt;(div|p|blockquote|pre|li|br|dd|dt|code|h\\d)[^&gt;]*(/)?&gt;&quot;,&quot;gi&quot;),&quot;\n&quot;);"/>
							<outline text="h = $(&quot;&lt;div/&gt;&quot;).html(h).text();"/>
							<outline text="var clipboardMatch = false;"/>
							<outline text="if(concordClipboard !== undefined){">
								<outline text="var trimmedClipboardText = concordClipboard.text.replace(/^[\s\r\n]+|[\s\r\n]+$/g,'');"/>
								<outline text="var trimmedPasteText = h.replace(/^[\s\r\n]+|[\s\r\n]+$/g,'');"/>
								<outline text="if(trimmedClipboardText==trimmedPasteText){">
									<outline text="var clipboardNodes = concordClipboard.data;"/>
									<outline text="if(clipboardNodes){">
										<outline text="var collapseNode = function(node){">
											<outline text="node.find(&quot;ol&quot;).each(function() {">
												<outline text="if($(this).children().length &gt; 0) {">
													<outline text="$(this).parent().addClass(&quot;collapsed&quot;);"/>
													<outline text="}"/>
													</outline>
												<outline text="});"/>
												</outline>
											<outline text="};"/>
											</outline>
										<outline text="clipboardNodes.each(function(){">
											<outline text="collapseNode($(this));"/>
											<outline text="});"/>
											</outline>
										<outline text="root.data(&quot;clipboard&quot;, clipboardNodes);"/>
										<outline text="concordInstance.op.setTextMode(false);"/>
										<outline text="concordInstance.op.paste();"/>
										<outline text="clipboardMatch = true;"/>
										<outline text="}"/>
										</outline>
									<outline text="}"/>
									</outline>
								<outline text="}"/>
								</outline>
							<outline text="if(!clipboardMatch){">
								<outline text="concordClipboard = undefined;"/>
								<outline text="var numberoflines = 0;"/>
								<outline text="var lines = h.split(&quot;\n&quot;);"/>
								<outline text="for(var i = 0; i &lt; lines.length; i++){">
									<outline text="var line = lines[i];"/>
									<outline text="if((line!=&quot;&quot;) &amp;&amp; !line.match(/^\s+$/)){">
										<outline text="numberoflines++;"/>
										<outline text="}"/>
										</outline>
									<outline text="}"/>
									</outline>
								<outline text="if(!concordInstance.op.inTextMode() || (numberoflines &gt; 1)){">
									<outline text="concordInstance.op.insertText(h);"/>
									<outline text="}else{">
										<outline text="concordInstance.op.saveState();"/>
										<outline text="concordText.focus();"/>
										<outline text="var range = concordText.parents(&quot;.concord-node:first&quot;).data(&quot;range&quot;);"/>
										<outline text="if(range){">
											<outline text="try{">
												<outline text="var sel = window.getSelection();"/>
												<outline text="sel.removeAllRanges();"/>
												<outline text="sel.addRange(range);"/>
												<outline text="}"/>
												</outline>
											<outline text="catch(e){">
												<outline text="console.log(e);"/>
												<outline text="}"/>
												</outline>
											<outline text="finally {">
												<outline text="concordText.parents(&quot;.concord-node:first&quot;).removeData(&quot;range&quot;);"/>
												<outline text="}"/>
												</outline>
											<outline text="}"/>
											</outline>
										<outline text="document.execCommand(&quot;insertText&quot;,null,h);"/>
										<outline text="concordInstance.root.removeData(&quot;clipboard&quot;);"/>
										<outline text="concordInstance.op.markChanged();"/>
										<outline text="}"/>
										</outline>
									</outline>
								<outline text="}"/>
								</outline>
							<outline text="concordText.removeClass(&quot;paste&quot;);"/>
							<outline text="});"/>
							</outline>
						<outline text="};"/>
						</outline>
					<outline text="this.escape = function(s){">
						<outline text="var h = $(&quot;&lt;div/&gt;&quot;).text(s).html();"/>
						<outline text="h = h.replace(/\u00A0/g, &quot; &quot;);"/>
						<outline text="if(concordInstance.op.getRenderMode()){ // Render HTML if op.getRenderMode() returns true - 2/17/13 by KS">
							<outline text="var allowedTags = [&quot;b&quot;,&quot;strong&quot;,&quot;i&quot;,&quot;em&quot;,&quot;a&quot;,&quot;img&quot;,&quot;strike&quot;,&quot;del&quot;];"/>
							<outline text="for(var tagIndex in allowedTags){">
								<outline text="var tag = allowedTags[tagIndex];"/>
								<outline text="if (tag == &quot;img&quot;){">
									<outline text="h = h.replace(new RegExp(&quot;&amp;lt;&quot;+tag+&quot;((?!&amp;gt;).+)(/)?&amp;gt;&quot;,&quot;gi&quot;),&quot;&lt;&quot;+tag+&quot;$1&quot;+&quot;/&gt;&quot;);"/>
									<outline text="}"/>
									</outline>
								<outline text="else if (tag==&quot;a&quot;){">
									<outline text="h = h.replace(new RegExp(&quot;&amp;lt;&quot;+tag+&quot;((?!&amp;gt;).*?)&amp;gt;((?!&amp;lt;/&quot;+tag+&quot;&amp;gt;).+?)&amp;lt;/&quot;+tag+&quot;&amp;gt;&quot;,&quot;gi&quot;),&quot;&lt;&quot;+tag+&quot;$1&quot;+&quot;&gt;$2&quot;+&quot;&lt;&quot;+&quot;/&quot;+tag+&quot;&gt;&quot;);"/>
									<outline text="}"/>
									</outline>
								<outline text="else {">
									<outline text="h = h.replace(new RegExp(&quot;&amp;lt;&quot;+tag+&quot;&amp;gt;((?!&amp;lt;/&quot;+tag+&quot;&amp;gt;).+?)&amp;lt;/&quot;+tag+&quot;&amp;gt;&quot;,&quot;gi&quot;),&quot;&lt;&quot;+tag+&quot;&gt;$1&quot;+&quot;&lt;&quot;+&quot;/&quot;+tag+&quot;&gt;&quot;);"/>
									<outline text="}"/>
									</outline>
								<outline text="}"/>
								</outline>
							<outline text="}"/>
							</outline>
						<outline text="return h;"/>
						<outline text="};"/>
						</outline>
					<outline text="this.unescape = function(s){">
						<outline text="var h = s.replace(/&lt;/g,&quot;&amp;lt;&quot;).replace(/&gt;/g,&quot;&amp;gt;&quot;);"/>
						<outline text="h = $(&quot;&lt;div/&gt;&quot;).html(h).text();"/>
						<outline text="return h;"/>
						<outline text="};"/>
						</outline>
					<outline text="this.getSelection = function(){">
						<outline text="var range = undefined;"/>
						<outline text="if(window.getSelection){">
							<outline text="sel = window.getSelection();"/>
							<outline text="if(sel.getRangeAt &amp;&amp; sel.rangeCount){">
								<outline text="range = sel.getRangeAt(0);"/>
								<outline text="if($(range.startContainer).parents(&quot;.concord-node:first&quot;).length==0){">
									<outline text="range = undefined;"/>
									<outline text="}"/>
									</outline>
								<outline text="}"/>
								</outline>
							<outline text="}"/>
							</outline>
						<outline text="return range;"/>
						<outline text="};"/>
						</outline>
					<outline text="this.saveSelection = function(){">
						<outline text="var range = this.getSelection();"/>
						<outline text="if(range !== undefined){">
							<outline text="concordInstance.op.getCursor().data(&quot;range&quot;, range.cloneRange());"/>
							<outline text="}"/>
							</outline>
						<outline text="return range;"/>
						<outline text="};"/>
						</outline>
					<outline text="this.restoreSelection = function(range){">
						<outline text="var cursor = concordInstance.op.getCursor();"/>
						<outline text="if(range===undefined){">
							<outline text="range = cursor.data(&quot;range&quot;);"/>
							<outline text="}"/>
							</outline>
						<outline text="if(range !== undefined){">
							<outline text="if(window.getSelection){">
								<outline text="var concordText = cursor.children(&quot;.concord-wrapper&quot;).children(&quot;.concord-text&quot;);"/>
								<outline text="try{">
									<outline text="var cloneRanger = range.cloneRange();"/>
									<outline text="var sel = window.getSelection();"/>
									<outline text="sel.removeAllRanges();"/>
									<outline text="sel.addRange(cloneRanger);"/>
									<outline text="}"/>
									</outline>
								<outline text="catch(e){">
									<outline text="console.log(e);"/>
									<outline text="}"/>
									</outline>
								<outline text="finally {">
									<outline text="cursor.removeData(&quot;range&quot;);"/>
									<outline text="}"/>
									</outline>
								<outline text="}"/>
								</outline>
							<outline text="}"/>
							</outline>
						<outline text="return range;"/>
						<outline text="};"/>
						</outline>
					<outline text="this.recalculateLevels = function(context){">
						<outline text="if(!context){">
							<outline text="context = root.find(&quot;.concord-node&quot;);"/>
							<outline text="}"/>
							</outline>
						<outline text="context.each(function(){">
							<outline text="var text = $(this).children(&quot;.concord-wrapper&quot;).children(&quot;.concord-text&quot;);"/>
							<outline text="var levelMatch = $(this).attr(&quot;class&quot;).match(/.*concord-level-(\d+).*/);"/>
							<outline text="if(levelMatch){">
								<outline text="$(this).removeClass(&quot;concord-level-&quot;+levelMatch[1]);"/>
								<outline text="text.removeClass(&quot;concord-level-&quot;+levelMatch[1]+&quot;-text&quot;);"/>
								<outline text="}"/>
								</outline>
							<outline text="var level = $(this).parents(&quot;.concord-node&quot;).length+1;"/>
							<outline text="$(this).addClass(&quot;concord-level-&quot;+level);"/>
							<outline text="text.addClass(&quot;concord-level-&quot;+level+&quot;-text&quot;);"/>
							<outline text="});"/>
							</outline>
						<outline text="};"/>
						</outline>
					<outline text="}"/>
					</outline>
				<outline text="function ConcordEvents(root, editor, op, concordInstance) {">
					<outline text="var instance = this;"/>
					<outline text="this.wrapperDoubleClick = function(event) {">
						<outline text="if(!concord.handleEvents){">
							<outline text="return;"/>
							<outline text="}"/>
							</outline>
						<outline text="if(root.data(&quot;dropdown&quot;)){">
							<outline text="editor.hideContextMenu();"/>
							<outline text="return;"/>
							<outline text="}"/>
							</outline>
						<outline text="if(!editor.editable($(event.target))) {">
							<outline text="var wrapper = $(event.target);"/>
							<outline text="if(wrapper.hasClass(&quot;node-icon&quot;)){">
								<outline text="wrapper = wrapper.parent();"/>
								<outline text="}"/>
								</outline>
							<outline text="if(wrapper.hasClass(&quot;concord-wrapper&quot;)) {">
								<outline text="event.stopPropagation();"/>
								<outline text="var node = wrapper.parents(&quot;.concord-node:first&quot;);"/>
								<outline text="op.setTextMode(false);"/>
								<outline text="if(op.subsExpanded()) {">
									<outline text="op.collapse();"/>
									<outline text="} else {">
										<outline text="op.expand();"/>
										<outline text="}"/>
										</outline>
									</outline>
								<outline text="}"/>
								</outline>
							<outline text="}"/>
							</outline>
						<outline text="};"/>
						</outline>
					<outline text="this.clickSelect = function(event) {">
						<outline text="if(!concord.handleEvents){">
							<outline text="return;"/>
							<outline text="}"/>
							</outline>
						<outline text="if(root.data(&quot;dropdown&quot;)){">
							<outline text="event.stopPropagation();"/>
							<outline text="editor.hideContextMenu();"/>
							<outline text="return;"/>
							<outline text="}"/>
							</outline>
						<outline text="if(concord.mobile){">
							<outline text="var node = $(event.target);"/>
							<outline text="if(concordInstance.op.getCursor()[0]===node[0]){">
								<outline text="instance.doubleClick(event);"/>
								<outline text="return;"/>
								<outline text="}"/>
								</outline>
							<outline text="}"/>
							</outline>
						<outline text="if((event.which==1) &amp;&amp; !editor.editable($(event.target))) {">
							<outline text="var node = $(event.target);"/>
							<outline text="if(!node.hasClass(&quot;concord-node&quot;)){">
								<outline text="return;"/>
								<outline text="}"/>
								</outline>
							<outline text="if(node.length==1) {">
								<outline text="event.stopPropagation();"/>
								<outline text="if(event.shiftKey &amp;&amp; (node.parents(&quot;.concord-node.selected&quot;).length&gt;0)){">
									<outline text="return;"/>
									<outline text="}"/>
									</outline>
								<outline text="op.setTextMode(false);"/>
								<outline text="op.setCursor(node, event.shiftKey || event.metaKey, event.shiftKey);"/>
								<outline text="}"/>
								</outline>
							<outline text="}"/>
							</outline>
						<outline text="};"/>
						</outline>
					<outline text="this.doubleClick = function(event) {">
						<outline text="if(!concord.handleEvents){">
							<outline text="return;"/>
							<outline text="}"/>
							</outline>
						<outline text="if(root.data(&quot;dropdown&quot;)){">
							<outline text="editor.hideContextMenu();"/>
							<outline text="return;"/>
							<outline text="}"/>
							</outline>
						<outline text="if(!editor.editable($(event.target))) {">
							<outline text="var node = $(event.target);"/>
							<outline text="if(node.hasClass(&quot;concord-node&quot;) &amp;&amp; node.hasClass(&quot;concord-cursor&quot;)) {">
								<outline text="event.stopPropagation();"/>
								<outline text="op.setTextMode(false);"/>
								<outline text="op.setCursor(node);"/>
								<outline text="if(op.subsExpanded()) {">
									<outline text="op.collapse();"/>
									<outline text="} else {">
										<outline text="op.expand();"/>
										<outline text="}"/>
										</outline>
									</outline>
								<outline text="}"/>
								</outline>
							<outline text="}"/>
							</outline>
						<outline text="};"/>
						</outline>
					<outline text="this.wrapperClickSelect = function(event) {">
						<outline text="if(!concord.handleEvents){">
							<outline text="return;"/>
							<outline text="}"/>
							</outline>
						<outline text="if(root.data(&quot;dropdown&quot;)){">
							<outline text="editor.hideContextMenu();"/>
							<outline text="return;"/>
							<outline text="}"/>
							</outline>
						<outline text="if(concord.mobile){">
							<outline text="var target = $(event.target);"/>
							<outline text="var node = target.parents(&quot;.concord-node:first&quot;);"/>
							<outline text="if(concordInstance.op.getCursor()[0]===node[0]){">
								<outline text="instance.wrapperDoubleClick(event);"/>
								<outline text="return;"/>
								<outline text="}"/>
								</outline>
							<outline text="}"/>
							</outline>
						<outline text="if((event.which==1) &amp;&amp; !editor.editable($(event.target))) {">
							<outline text="var wrapper = $(event.target);"/>
							<outline text="if(wrapper.hasClass(&quot;node-icon&quot;)){">
								<outline text="wrapper = wrapper.parent();"/>
								<outline text="}"/>
								</outline>
							<outline text="if(wrapper.hasClass(&quot;concord-wrapper&quot;)) {">
								<outline text="var node = wrapper.parents(&quot;.concord-node:first&quot;);"/>
								<outline text="if(event.shiftKey &amp;&amp; (node.parents(&quot;.concord-node.selected&quot;).length&gt;0)){">
									<outline text="return;"/>
									<outline text="}"/>
									</outline>
								<outline text="op.setTextMode(false);"/>
								<outline text="op.setCursor(node, event.shiftKey || event.metaKey, event.shiftKey);"/>
								<outline text="}"/>
								</outline>
							<outline text="}"/>
							</outline>
						<outline text="};"/>
						</outline>
					<outline text="this.contextmenu = function(event){">
						<outline text="if(!concord.handleEvents){">
							<outline text="return;"/>
							<outline text="}"/>
							</outline>
						<outline text="event.preventDefault();"/>
						<outline text="event.stopPropagation();"/>
						<outline text="var node = $(event.target);"/>
						<outline text="if(node.hasClass(&quot;concord-wrapper&quot;) || node.hasClass(&quot;node-icon&quot;)){">
							<outline text="op.setTextMode(false);"/>
							<outline text="}"/>
							</outline>
						<outline text="if(!node.hasClass(&quot;concord-node&quot;)){">
							<outline text="node = node.parents(&quot;.concord-node:first&quot;);"/>
							<outline text="}"/>
							</outline>
						<outline text="concordInstance.fireCallback(&quot;opContextMenu&quot;, op.setCursorContext(node));"/>
						<outline text="op.setCursor(node);"/>
						<outline text="editor.showContextMenu(event.pageX, event.pageY);"/>
						<outline text="};"/>
						</outline>
					<outline text="root.on(&quot;dblclick&quot;, &quot;.concord-wrapper&quot;, this.wrapperDoubleClick);"/>
					<outline text="root.on(&quot;dblclick&quot;, &quot;.concord-node&quot;, this.doubleClick);"/>
					<outline text="root.on(&quot;dblclick&quot;, &quot;.concord-text&quot;, function(event){">
						<outline text="if(!concord.handleEvents){">
							<outline text="return;"/>
							<outline text="}"/>
							</outline>
						<outline text="if(concordInstance.prefs()[&quot;readonly&quot;]==true){">
							<outline text="event.preventDefault();"/>
							<outline text="event.stopPropagation();"/>
							<outline text="var node = $(event.target).parents(&quot;.concord-node:first&quot;);"/>
							<outline text="op.setCursor(node);"/>
							<outline text="if(op.subsExpanded()) {">
								<outline text="op.collapse();"/>
								<outline text="} else {">
									<outline text="op.expand();"/>
									<outline text="}"/>
									</outline>
								</outline>
							<outline text="}"/>
							</outline>
						<outline text="});"/>
						</outline>
					<outline text="root.on(&quot;click&quot;, &quot;.concord-wrapper&quot;, this.wrapperClickSelect);"/>
					<outline text="root.on(&quot;click&quot;, &quot;.concord-node&quot;, this.clickSelect);"/>
					<outline text="root.on(&quot;mouseover&quot;, &quot;.concord-wrapper&quot;, function(event){">
						<outline text="if(!concord.handleEvents){">
							<outline text="return;"/>
							<outline text="}"/>
							</outline>
						<outline text="var node = $(event.target).parents(&quot;.concord-node:first&quot;);"/>
						<outline text="concordInstance.fireCallback(&quot;opHover&quot;, op.setCursorContext(node));"/>
						<outline text="});"/>
						</outline>
					<outline text="if(concordInstance.prefs.contextMenu){">
						<outline text="root.on(&quot;contextmenu&quot;, &quot;.concord-text&quot;, this.contextmenu);"/>
						<outline text="root.on(&quot;contextmenu&quot;, &quot;.concord-node&quot;, this.contextmenu);"/>
						<outline text="root.on(&quot;contextmenu&quot;, &quot;.concord-wrapper&quot;, this.contextmenu);"/>
						<outline text="}"/>
						</outline>
					<outline text="root.on(&quot;blur&quot;, &quot;.concord-text&quot;, function(event){">
						<outline text="if(!concord.handleEvents){">
							<outline text="return;"/>
							<outline text="}"/>
							</outline>
						<outline text="if(concordInstance.prefs()[&quot;readonly&quot;]==true){">
							<outline text="return;"/>
							<outline text="}"/>
							</outline>
						<outline text="if($(this).html().match(/^\s*&lt;br&gt;\s*$/)){">
							<outline text="$(this).html(&quot;&quot;);"/>
							<outline text="}"/>
							</outline>
						<outline text="var concordText = $(this);"/>
						<outline text="var node = $(this).parents(&quot;.concord-node:first&quot;);"/>
						<outline text="if(concordInstance.op.inTextMode()){">
							<outline text="editor.saveSelection();"/>
							<outline text="}"/>
							</outline>
						<outline text="if(concordInstance.op.inTextMode() &amp;&amp; node.hasClass(&quot;dirty&quot;)){">
							<outline text="node.removeClass(&quot;dirty&quot;);"/>
							<outline text="}"/>
							</outline>
						<outline text="});"/>
						</outline>
					<outline text="root.on(&quot;paste&quot;, &quot;.concord-text&quot;, function(event){">
						<outline text="if(!concord.handleEvents){">
							<outline text="return;"/>
							<outline text="}"/>
							</outline>
						<outline text="if(concordInstance.prefs()[&quot;readonly&quot;]==true){">
							<outline text="return;"/>
							<outline text="}"/>
							</outline>
						<outline text="$(this).addClass(&quot;paste&quot;);"/>
						<outline text="concordInstance.editor.saveSelection();"/>
						<outline text="concordInstance.pasteBin.html(&quot;&quot;);"/>
						<outline text="concordInstance.pasteBin.focus();"/>
						<outline text="setTimeout(editor.sanitize,10);"/>
						<outline text="});"/>
						</outline>
					<outline text="concordInstance.pasteBin.on(&quot;copy&quot;, function(){">
						<outline text="if(!concord.handleEvents){">
							<outline text="return;"/>
							<outline text="}"/>
							</outline>
						<outline text="var copyText = &quot;&quot;;"/>
						<outline text="root.find(&quot;.selected&quot;).each(function(){">
							<outline text="copyText+= concordInstance.editor.textLine($(this));"/>
							<outline text="});"/>
							</outline>
						<outline text="if((copyText!=&quot;&quot;) &amp;&amp; (copyText!=&quot;\n&quot;)){">
							<outline text="concordClipboard = {text: copyText, data: root.find(&quot;.selected&quot;).clone(true, true)};"/>
							<outline text="concordInstance.pasteBin.html(&quot;&lt;pre&gt;&quot;+$(&quot;&lt;div/&gt;&quot;).text(copyText).html()+&quot;&lt;/pre&gt;&quot;);"/>
							<outline text="concordInstance.pasteBin.focus();"/>
							<outline text="document.execCommand(&quot;selectAll&quot;);"/>
							<outline text="}"/>
							</outline>
						<outline text="});"/>
						</outline>
					<outline text="concordInstance.pasteBin.on(&quot;paste&quot;, function(event){">
						<outline text="if(!concord.handleEvents){">
							<outline text="return;"/>
							<outline text="}"/>
							</outline>
						<outline text="if(concordInstance.prefs()[&quot;readonly&quot;]==true){">
							<outline text="return;"/>
							<outline text="}"/>
							</outline>
						<outline text="var concordText = concordInstance.op.getCursor().children(&quot;.concord-wrapper&quot;).children(&quot;.concord-text&quot;);"/>
						<outline text="concordText.addClass(&quot;paste&quot;);"/>
						<outline text="concordInstance.pasteBin.html(&quot;&quot;);"/>
						<outline text="setTimeout(editor.sanitize,10);"/>
						<outline text="});"/>
						</outline>
					<outline text="concordInstance.pasteBin.on(&quot;cut&quot;, function(){">
						<outline text="if(!concord.handleEvents){">
							<outline text="return;"/>
							<outline text="}"/>
							</outline>
						<outline text="if(concordInstance.prefs()[&quot;readonly&quot;]==true){">
							<outline text="return;"/>
							<outline text="}"/>
							</outline>
						<outline text="var copyText = &quot;&quot;;"/>
						<outline text="root.find(&quot;.selected&quot;).each(function(){">
							<outline text="copyText+= concordInstance.editor.textLine($(this));"/>
							<outline text="});"/>
							</outline>
						<outline text="if((copyText!=&quot;&quot;) &amp;&amp; (copyText!=&quot;\n&quot;)){">
							<outline text="concordClipboard = {text: copyText, data: root.find(&quot;.selected&quot;).clone(true, true)};"/>
							<outline text="concordInstance.pasteBin.html(&quot;&lt;pre&gt;&quot;+$(&quot;&lt;div/&gt;&quot;).text(copyText).html()+&quot;&lt;/pre&gt;&quot;);"/>
							<outline text="concordInstance.pasteBinFocus();"/>
							<outline text="}"/>
							</outline>
						<outline text="concordInstance.op.deleteLine();"/>
						<outline text="setTimeout(function(){concordInstance.pasteBinFocus()}, 200);"/>
						<outline text="});"/>
						</outline>
					<outline text="root.on(&quot;mousedown&quot;, function(event) {">
						<outline text="if(!concord.handleEvents){">
							<outline text="return;"/>
							<outline text="}"/>
							</outline>
						<outline text="var target = $(event.target);"/>
						<outline text="if(target.is(&quot;a&quot;)){">
							<outline text="if(target.attr(&quot;href&quot;)){">
								<outline text="event.preventDefault();"/>
								<outline text="window.open(target.attr(&quot;href&quot;));"/>
								<outline text="}"/>
								</outline>
							<outline text="return;"/>
							<outline text="}"/>
							</outline>
						<outline text="if(concordInstance.prefs()[&quot;readonly&quot;]==true){">
							<outline text="event.preventDefault();"/>
							<outline text="var target = $(event.target);"/>
							<outline text="if(target.parents(&quot;.concord-text:first&quot;).length==1){">
								<outline text="target = target.parents(&quot;.concord-text:first&quot;);"/>
								<outline text="}"/>
								</outline>
							<outline text="if(target.hasClass(&quot;concord-text&quot;)){">
								<outline text="var node = target.parents(&quot;.concord-node:first&quot;);"/>
								<outline text="if(node.length==1){">
									<outline text="op.setCursor(node);"/>
									<outline text="}"/>
									</outline>
								<outline text="}"/>
								</outline>
							<outline text="return;"/>
							<outline text="}"/>
							</outline>
						<outline text="if(event.which==1) {">
							<outline text="if(root.data(&quot;dropdown&quot;)){">
								<outline text="editor.hideContextMenu();"/>
								<outline text="return;"/>
								<outline text="}"/>
								</outline>
							<outline text="if(target.parents(&quot;.concord-text:first&quot;).length==1){">
								<outline text="target = target.parents(&quot;.concord-text:first&quot;);"/>
								<outline text="}"/>
								</outline>
							<outline text="if(target.hasClass(&quot;concord-text&quot;)){">
								<outline text="var node = target.parents(&quot;.concord-node:first&quot;);"/>
								<outline text="if(node.length==1){">
									<outline text="if(!root.hasClass(&quot;textMode&quot;)){">
										<outline text="root.find(&quot;.selected&quot;).removeClass(&quot;selected&quot;);"/>
										<outline text="root.addClass(&quot;textMode&quot;);"/>
										<outline text="}"/>
										</outline>
									<outline text="if(node.children(&quot;.concord-wrapper&quot;).children(&quot;.concord-text&quot;).hasClass(&quot;editing&quot;)){">
										<outline text="root.find(&quot;.editing&quot;).removeClass(&quot;editing&quot;);"/>
										<outline text="node.children(&quot;.concord-wrapper&quot;).children(&quot;.concord-text&quot;).addClass(&quot;editing&quot;);"/>
										<outline text="}"/>
										</outline>
									<outline text="if(!node.hasClass(&quot;concord-cursor&quot;)){">
										<outline text="root.find(&quot;.concord-cursor&quot;).removeClass(&quot;concord-cursor&quot;);"/>
										<outline text="node.addClass(&quot;concord-cursor&quot;);"/>
										<outline text="concordInstance.fireCallback(&quot;opCursorMoved&quot;, op.setCursorContext(node));"/>
										<outline text="}"/>
										</outline>
									<outline text="}"/>
									</outline>
								<outline text="}else{">
									<outline text="event.preventDefault();"/>
									<outline text="root.data(&quot;mousedown&quot;, true);"/>
									<outline text="}"/>
									</outline>
								</outline>
							<outline text="}"/>
							</outline>
						<outline text="});"/>
						</outline>
					<outline text="root.on(&quot;mousemove&quot;, function(event) {">
						<outline text="if(!concord.handleEvents){">
							<outline text="return;"/>
							<outline text="}"/>
							</outline>
						<outline text="if(concordInstance.prefs()[&quot;readonly&quot;]==true){">
							<outline text="return;"/>
							<outline text="}"/>
							</outline>
						<outline text="if(!editor.editable($(event.target))) {">
							<outline text="event.preventDefault();"/>
							<outline text="if(root.data(&quot;mousedown&quot;) &amp;&amp; !root.data(&quot;dragging&quot;)) {">
								<outline text="var target = $(event.target);"/>
								<outline text="if(target.hasClass(&quot;node-icon&quot;)){">
									<outline text="target = target.parent();"/>
									<outline text="}"/>
									</outline>
								<outline text="if(target.hasClass(&quot;concord-wrapper&quot;) &amp;&amp; target.parent().hasClass(&quot;selected&quot;)) {">
									<outline text="editor.dragMode();"/>
									<outline text="}"/>
									</outline>
								<outline text="}"/>
								</outline>
							<outline text="}"/>
							</outline>
						<outline text="});"/>
						</outline>
					<outline text="root.on(&quot;mouseup&quot;, function(event) {">
						<outline text="if(!concord.handleEvents){">
							<outline text="return;"/>
							<outline text="}"/>
							</outline>
						<outline text="if(concordInstance.prefs()[&quot;readonly&quot;]==true){">
							<outline text="return;"/>
							<outline text="}"/>
							</outline>
						<outline text="var target = $(event.target);"/>
						<outline text="if(target.hasClass(&quot;concord-node&quot;)) {">
							<outline text="target = target.children(&quot;.concord-wrapper:first&quot;).children(&quot;.concord-text:first&quot;);"/>
							<outline text="} else if(target.hasClass(&quot;concord-wrapper&quot;)) {">
								<outline text="target = target.children(&quot;.concord-text:first&quot;);"/>
								<outline text="}"/>
								</outline>
							</outline>
						<outline text="if(!editor.editable(target)) {">
							<outline text="root.data(&quot;mousedown&quot;, false);"/>
							<outline text="if(root.data(&quot;dragging&quot;)) {">
								<outline text="var target = $(event.target);"/>
								<outline text="var node = target.parents(&quot;.concord-node:first&quot;);"/>
								<outline text="var draggable = root.find(&quot;.selected&quot;);"/>
								<outline text="if((node.length == 1) &amp;&amp; (draggable.length &gt;= 1)) {">
									<outline text="var isDraggableTarget = false;"/>
									<outline text="draggable.each(function(){">
										<outline text="if(this==node[0]){">
											<outline text="isDraggableTarget = true;"/>
											<outline text="}"/>
											</outline>
										<outline text="});"/>
										</outline>
									<outline text="if(!isDraggableTarget) {">
										<outline text="var draggableIsTargetParent = false;"/>
										<outline text="node.parents(&quot;.concord-node&quot;).each(function() {">
											<outline text="var nodeParent = $(this)[0];"/>
											<outline text="draggable.each(function(){">
												<outline text="if($(this)[0] == nodeParent) {">
													<outline text="draggableIsTargetParent = true;"/>
													<outline text="}"/>
													</outline>
												<outline text="});"/>
												</outline>
											<outline text="});"/>
											</outline>
										<outline text="if(!draggableIsTargetParent) {">
											<outline text="if(target.hasClass(&quot;concord-wrapper&quot;) || target.hasClass(&quot;node-icon&quot;)) {">
												<outline text="var clonedDraggable = draggable.clone(true, true);"/>
												<outline text="clonedDraggable.insertAfter(node);"/>
												<outline text="draggable.remove();"/>
												<outline text="} else {">
													<outline text="var clonedDraggable = draggable.clone(true, true);"/>
													<outline text="var outline = node.children(&quot;ol&quot;);"/>
													<outline text="clonedDraggable.prependTo(outline);"/>
													<outline text="node.removeClass(&quot;collapsed&quot;);"/>
													<outline text="draggable.remove();"/>
													<outline text="}"/>
													</outline>
												</outline>
											<outline text="}"/>
											</outline>
										<outline text="} else {">
											<outline text="var prev = node.prev();"/>
											<outline text="if(prev.length == 1) {">
												<outline text="if(prev.hasClass(&quot;drop-child&quot;)) {">
													<outline text="var clonedDraggable = draggable.clone(true, true);"/>
													<outline text="var outline = prev.children(&quot;ol&quot;);"/>
													<outline text="clonedDraggable.appendTo(outline);"/>
													<outline text="prev.removeClass(&quot;collapsed&quot;);"/>
													<outline text="draggable.remove();"/>
													<outline text="}"/>
													</outline>
												<outline text="}"/>
												</outline>
											<outline text="}"/>
											</outline>
										</outline>
									<outline text="}"/>
									</outline>
								<outline text="editor.dragModeExit();"/>
								<outline text="concordInstance.editor.recalculateLevels();"/>
								<outline text="}"/>
								</outline>
							<outline text="}"/>
							</outline>
						<outline text="});"/>
						</outline>
					<outline text="root.on(&quot;mouseover&quot;, function(event) {">
						<outline text="if(!concord.handleEvents){">
							<outline text="return;"/>
							<outline text="}"/>
							</outline>
						<outline text="if(concordInstance.prefs()[&quot;readonly&quot;]==true){">
							<outline text="return;"/>
							<outline text="}"/>
							</outline>
						<outline text="if(root.data(&quot;dragging&quot;)) {">
							<outline text="event.preventDefault();"/>
							<outline text="var target = $(event.target);"/>
							<outline text="var node = target.parents(&quot;.concord-node:first&quot;);"/>
							<outline text="var draggable = root.find(&quot;.selected&quot;);"/>
							<outline text="if((node.length == 1) &amp;&amp; (draggable.length&gt;=1)) {">
								<outline text="var isDraggableTarget = false;"/>
								<outline text="draggable.each(function(){">
									<outline text="if(this==node[0]){">
										<outline text="isDraggableTarget = true;"/>
										<outline text="}"/>
										</outline>
									<outline text="});"/>
									</outline>
								<outline text="if(!isDraggableTarget) {">
									<outline text="var draggableIsTargetParent = false;"/>
									<outline text="node.parents(&quot;.concord-node&quot;).each(function() {">
										<outline text="var nodeParent = $(this)[0];"/>
										<outline text="draggable.each(function(){">
											<outline text="if($(this)[0] == nodeParent) {">
												<outline text="draggableIsTargetParent = true;"/>
												<outline text="}"/>
												</outline>
											<outline text="});"/>
											</outline>
										<outline text="});"/>
										</outline>
									<outline text="if(!draggableIsTargetParent) {">
										<outline text="node.removeClass(&quot;drop-sibling&quot;).remove(&quot;drop-child&quot;);"/>
										<outline text="if(target.hasClass(&quot;concord-wrapper&quot;) || target.hasClass(&quot;node-icon&quot;)) {">
											<outline text="node.addClass(&quot;drop-sibling&quot;);"/>
											<outline text="} else {">
												<outline text="node.addClass(&quot;drop-child&quot;);"/>
												<outline text="}"/>
												</outline>
											</outline>
										<outline text="}"/>
										</outline>
									<outline text="} else if (draggable.length==1){">
										<outline text="var prev = node.prev();"/>
										<outline text="if(prev.length == 1) {">
											<outline text="prev.removeClass(&quot;drop-sibling&quot;).remove(&quot;drop-child&quot;);"/>
											<outline text="prev.addClass(&quot;drop-child&quot;);"/>
											<outline text="}"/>
											</outline>
										<outline text="}"/>
										</outline>
									</outline>
								<outline text="}"/>
								</outline>
							<outline text="}"/>
							</outline>
						<outline text="});"/>
						</outline>
					<outline text="root.on(&quot;mouseout&quot;, function(event) {">
						<outline text="if(!concord.handleEvents){">
							<outline text="return;"/>
							<outline text="}"/>
							</outline>
						<outline text="if(concordInstance.prefs()[&quot;readonly&quot;]==true){">
							<outline text="return;"/>
							<outline text="}"/>
							</outline>
						<outline text="if(root.data(&quot;dragging&quot;)) {">
							<outline text="root.find(&quot;.drop-sibling&quot;).removeClass(&quot;drop-sibling&quot;);"/>
							<outline text="root.find(&quot;.drop-child&quot;).removeClass(&quot;drop-child&quot;);"/>
							<outline text="}"/>
							</outline>
						<outline text="});"/>
						</outline>
					<outline text="}"/>
					</outline>
				<outline text="function ConcordOp(root, concordInstance, _cursor) {">
					<outline text="this._walk_up = function(context) {">
						<outline text="var prev = context.prev();"/>
						<outline text="if(prev.length == 0) {">
							<outline text="var parent = context.parents(&quot;.concord-node:first&quot;);"/>
							<outline text="if(parent.length == 1) {">
								<outline text="return parent;"/>
								<outline text="} else {">
									<outline text="return null;"/>
									<outline text="}"/>
									</outline>
								</outline>
							<outline text="} else {">
								<outline text="return this._last_child(prev);"/>
								<outline text="}"/>
								</outline>
							</outline>
						<outline text="};"/>
						</outline>
					<outline text="this._walk_down = function(context) {">
						<outline text="var next = context.next();"/>
						<outline text="if(next.length == 1) {">
							<outline text="return next;"/>
							<outline text="} else {">
								<outline text="var parent = context.parents(&quot;.concord-node:first&quot;);"/>
								<outline text="if(parent.length == 1) {">
									<outline text="return this._walk_down(parent);"/>
									<outline text="} else {">
										<outline text="return null;"/>
										<outline text="}"/>
										</outline>
									</outline>
								<outline text="}"/>
								</outline>
							</outline>
						<outline text="};"/>
						</outline>
					<outline text="this._last_child = function(context) {">
						<outline text="if(context.hasClass(&quot;collapsed&quot;)) {">
							<outline text="return context;"/>
							<outline text="}"/>
							</outline>
						<outline text="var outline = context.children(&quot;ol&quot;);"/>
						<outline text="if(outline.length == 0) {">
							<outline text="return context;"/>
							<outline text="} else {">
								<outline text="var lastChild = outline.children(&quot;.concord-node:last&quot;);"/>
								<outline text="if(lastChild.length == 1) {">
									<outline text="return this._last_child(lastChild);"/>
									</outline>
								<outline text="} else {">
									<outline text="return context;"/>
									</outline>
								<outline text="}"/>
								<outline text="}"/>
								</outline>
							</outline>
						<outline text="};"/>
						</outline>
					<outline text="this.bold = function(){">
						<outline text="this.saveState();"/>
						<outline text="if(this.inTextMode()){">
							<outline text="document.execCommand(&quot;bold&quot;);"/>
							<outline text="}else{">
								<outline text="this.focusCursor();"/>
								<outline text="document.execCommand(&quot;selectAll&quot;);"/>
								<outline text="document.execCommand(&quot;bold&quot;);"/>
								<outline text="document.execCommand(&quot;unselect&quot;);"/>
								<outline text="this.blurCursor();"/>
								<outline text="concordInstance.pasteBinFocus();"/>
								<outline text="}"/>
								</outline>
							</outline>
						<outline text="this.markChanged();"/>
						<outline text="};"/>
						</outline>
					<outline text="this.changed = function() {">
						<outline text="return root.data(&quot;changed&quot;) == true;"/>
						<outline text="};"/>
						</outline>
					<outline text="this.clearChanged = function() {">
						<outline text="root.data(&quot;changed&quot;, false);"/>
						<outline text="return true;"/>
						<outline text="};"/>
						</outline>
					<outline text="this.collapse = function(triggerCallbacks) {">
						<outline text="if(triggerCallbacks == undefined){">
							<outline text="triggerCallbacks = true;"/>
							<outline text="}"/>
							</outline>
						<outline text="var node = this.getCursor();"/>
						<outline text="if(node.length == 1) {">
							<outline text="if(triggerCallbacks){">
								<outline text="concordInstance.fireCallback(&quot;opCollapse&quot;, this.setCursorContext(node));"/>
								<outline text="}"/>
								</outline>
							<outline text="node.addClass(&quot;collapsed&quot;);"/>
							<outline text="node.find(&quot;ol&quot;).each(function() {">
								<outline text="if($(this).children().length &gt; 0) {">
									<outline text="$(this).parent().addClass(&quot;collapsed&quot;);"/>
									<outline text="}"/>
									</outline>
								<outline text="});"/>
								</outline>
							<outline text="this.markChanged();"/>
							<outline text="}"/>
							</outline>
						<outline text="};"/>
						</outline>
					<outline text="this.copy = function(){">
						<outline text="if(!this.inTextMode()){">
							<outline text="root.data(&quot;clipboard&quot;, root.find(&quot;.selected&quot;).clone(true, true));"/>
							<outline text="}"/>
							</outline>
						<outline text="};"/>
						</outline>
					<outline text="this.countSubs = function() {">
						<outline text="var node = this.getCursor();"/>
						<outline text="if(node.length == 1) {">
							<outline text="return node.children(&quot;ol&quot;).children().size();"/>
							<outline text="}"/>
							</outline>
						<outline text="return 0;"/>
						<outline text="};"/>
						</outline>
					<outline text="this.cursorToXml = function(){">
						<outline text="return concordInstance.editor.opml(this.getCursor());"/>
						<outline text="};"/>
						</outline>
					<outline text=""/>
					<outline text=""/>
					<outline text="this.cursorToXmlSubsOnly = function(){ //8/5/13 by DW">
						<outline text="return concordInstance.editor.opml(this.getCursor(), true);"/>
						<outline text="};"/>
						</outline>
					<outline text="this.getNodeOpml = function (node) { //3/12/14 by DW">
						<outline text="return concordInstance.editor.opml(node, true);"/>
						<outline text="};"/>
						</outline>
					<outline text=""/>
					<outline text=""/>
					<outline text="this.cut = function(){">
						<outline text="if(!this.inTextMode()){">
							<outline text="this.copy();"/>
							<outline text="this.deleteLine();"/>
							<outline text="}"/>
							</outline>
						<outline text="};"/>
						</outline>
					<outline text="this.deleteLine = function() {">
						<outline text="this.saveState();"/>
						<outline text="if(this.inTextMode()){">
							<outline text="var cursor = this.getCursor();"/>
							<outline text="var p = cursor.prev();"/>
							<outline text="if(p.length==0){">
								<outline text="p = cursor.parents(&quot;.concord-node:first&quot;);"/>
								<outline text="}"/>
								</outline>
							<outline text="cursor.remove();"/>
							<outline text="if(p.length==1) {">
								<outline text="this.setCursor(p);"/>
								<outline text="} else {">
									<outline text="if(root.find(&quot;.concord-node:first&quot;).length==1) {">
										<outline text="this.setCursor(root.find(&quot;.concord-node:first&quot;));"/>
										<outline text="} else {">
											<outline text="this.wipe();"/>
											<outline text="}"/>
											</outline>
										</outline>
									<outline text="}"/>
									</outline>
								</outline>
							<outline text="}else{">
								<outline text="var selected = root.find(&quot;.selected&quot;);"/>
								<outline text="if(selected.length == 1) {">
									<outline text="var p = selected.prev();"/>
									<outline text="if(p.length==0){">
										<outline text="p = selected.parents(&quot;.concord-node:first&quot;);"/>
										<outline text="}"/>
										</outline>
									<outline text="selected.remove();"/>
									<outline text="if(p.length==1) {">
										<outline text="this.setCursor(p);"/>
										<outline text="} else {">
											<outline text="if(root.find(&quot;.concord-node:first&quot;).length==1) {">
												<outline text="this.setCursor(root.find(&quot;.concord-node:first&quot;));"/>
												<outline text="} else {">
													<outline text="this.wipe();"/>
													<outline text="}"/>
													</outline>
												</outline>
											<outline text="}"/>
											</outline>
										</outline>
									<outline text="} else if(selected.length &gt; 1) {">
										<outline text="var first = root.find(&quot;.selected:first&quot;);"/>
										<outline text="var p = first.prev();"/>
										<outline text="if(p.length==0){">
											<outline text="p = first.parents(&quot;.concord-node:first&quot;);"/>
											<outline text="}"/>
											</outline>
										<outline text="selected.each(function() {">
											<outline text="$(this).remove();"/>
											<outline text="});"/>
											</outline>
										<outline text="if(p.length==1){">
											<outline text="this.setCursor(p);"/>
											<outline text="}else{">
												<outline text="if(root.find(&quot;.concord-node:first&quot;).length==1) {">
													<outline text="this.setCursor(root.find(&quot;.concord-node:first&quot;));"/>
													<outline text="} else {">
														<outline text="this.wipe();"/>
														<outline text="}"/>
														</outline>
													</outline>
												<outline text="}"/>
												</outline>
											</outline>
										<outline text="}"/>
										</outline>
									</outline>
								<outline text="}"/>
								</outline>
							</outline>
						<outline text="if(root.find(&quot;.concord-node&quot;).length == 0) {">
							<outline text="var node = this.insert(&quot;&quot;, down);"/>
							<outline text="this.setCursor(node);"/>
							<outline text="}"/>
							</outline>
						<outline text="this.markChanged();"/>
						<outline text="};"/>
						</outline>
					<outline text="this.deleteSubs = function() {">
						<outline text="var node = this.getCursor();"/>
						<outline text="if(node.length == 1) {">
							<outline text="if(node.children(&quot;ol&quot;).children().length &gt; 0){">
								<outline text="this.saveState();"/>
								<outline text="node.children(&quot;ol&quot;).empty();"/>
								<outline text="}"/>
								</outline>
							<outline text="}"/>
							</outline>
						<outline text="this.markChanged();"/>
						<outline text="};"/>
						</outline>
					<outline text="this.demote = function() {">
						<outline text="var node = this.getCursor();"/>
						<outline text="var movedSiblings = false;"/>
						<outline text="if(node.nextAll().length&gt;0){">
							<outline text="this.saveState();"/>
							<outline text="node.nextAll().each(function() {">
								<outline text="var sibling = $(this).clone(true, true);"/>
								<outline text="$(this).remove();"/>
								<outline text="sibling.appendTo(node.children(&quot;ol&quot;));"/>
								<outline text="node.removeClass(&quot;collapsed&quot;);"/>
								<outline text="});"/>
								</outline>
							<outline text="concordInstance.editor.recalculateLevels(node.find(&quot;.concord-node&quot;));"/>
							<outline text="this.markChanged();"/>
							<outline text="}"/>
							</outline>
						<outline text="};"/>
						</outline>
					<outline text="this.expand = function(triggerCallbacks) {">
						<outline text="if(triggerCallbacks == undefined){">
							<outline text="triggerCallbacks = true;"/>
							<outline text="}"/>
							</outline>
						<outline text="var node = this.getCursor();"/>
						<outline text="if(node.length == 1) {">
							<outline text="if(triggerCallbacks){">
								<outline text="concordInstance.fireCallback(&quot;opExpand&quot;, this.setCursorContext(node));"/>
								<outline text="}"/>
								</outline>
							<outline text="if(!node.hasClass(&quot;collapsed&quot;)){">
								<outline text="return;"/>
								<outline text="}"/>
								</outline>
							<outline text="node.removeClass(&quot;collapsed&quot;);"/>
							<outline text="var cursorPosition = node.offset().top;"/>
							<outline text="var cursorHeight =node.height();"/>
							<outline text="var windowPosition = $(window).scrollTop();"/>
							<outline text="var windowHeight = $(window).height (); "/>
							<outline text="var lineHeight = parseInt(node.children(&quot;.concord-wrapper&quot;).children(&quot;.concord-text&quot;).css(&quot;line-height&quot;)) + 6;"/>
							<outline text=""/>
							<outline text="if (flConcordScrollEnabled) { //6/24/14 by DW -- provide a way to disable automatic scrolling">
								<outline text="if (cursorHeight &gt; windowHeight) { //6/24/14 by DW">
									<outline text="var ctscroll = cursorPosition - ctPixelsAboveOutlineArea - lineHeight;"/>
									<outline text="if (ctscroll &gt; 0) {">
										<outline text="$(window).scrollTop (ctscroll);"/>
										<outline text="}"/>
										</outline>
									<outline text="}"/>
									</outline>
								<outline text="else {">
									<outline text="if (( cursorPosition &lt; windowPosition ) || ( (cursorPosition+cursorHeight) &gt; (windowPosition+windowHeight) ) ){">
										<outline text="if(cursorPosition &lt; windowPosition){">
											<outline text="$(window).scrollTop(cursorPosition);"/>
											<outline text="}else if ((cursorPosition+cursorHeight) &gt; (windowPosition+windowHeight)){">
												<outline text="if((cursorHeight+lineHeight) &lt; windowHeight){">
													<outline text="$(window).scrollTop(cursorPosition - (windowHeight-cursorHeight)+lineHeight);"/>
													<outline text="}else{">
														<outline text="$(window).scrollTop(cursorPosition);"/>
														<outline text="}"/>
														</outline>
													</outline>
												<outline text="}"/>
												</outline>
											</outline>
										<outline text="}"/>
										</outline>
									<outline text="}"/>
									</outline>
								<outline text=""/>
								<outline text="}"/>
								</outline>
							<outline text=""/>
							<outline text="this.markChanged();"/>
							<outline text="}"/>
							</outline>
						<outline text="};"/>
						</outline>
					<outline text="this.expandAllLevels = function() {">
						<outline text="var node = this.getCursor();"/>
						<outline text="if(node.length == 1) {">
							<outline text="node.removeClass(&quot;collapsed&quot;);"/>
							<outline text="node.find(&quot;.concord-node&quot;).removeClass(&quot;collapsed&quot;);"/>
							<outline text="}"/>
							</outline>
						<outline text="};"/>
						</outline>
					<outline text="this.focusCursor = function(){">
						<outline text="this.getCursor().children(&quot;.concord-wrapper&quot;).children(&quot;.concord-text&quot;).focus();"/>
						<outline text="};"/>
						</outline>
					<outline text="this.blurCursor = function(){">
						<outline text="this.getCursor().children(&quot;.concord-wrapper&quot;).children(&quot;.concord-text&quot;).blur();"/>
						<outline text="};"/>
						</outline>
					<outline text="this.fullCollapse = function() {">
						<outline text="root.find(&quot;.concord-node&quot;).each(function() {">
							<outline text="if($(this).children(&quot;ol&quot;).children().size() &gt; 0) {">
								<outline text="$(this).addClass(&quot;collapsed&quot;);"/>
								<outline text="}"/>
								</outline>
							<outline text="});"/>
							</outline>
						<outline text="var cursor = this.getCursor();"/>
						<outline text="var topParent = cursor.parents(&quot;.concord-node:last&quot;);"/>
						<outline text="if(topParent.length == 1) {">
							<outline text="concordInstance.editor.select(topParent);"/>
							<outline text="}"/>
							</outline>
						<outline text="};"/>
						</outline>
					<outline text="this.fullExpand = function() {">
						<outline text="root.find(&quot;.concord-node&quot;).removeClass(&quot;collapsed&quot;);"/>
						<outline text="};"/>
						</outline>
					<outline text="this.getCursor = function(){">
						<outline text="if(_cursor){">
							<outline text="return _cursor;"/>
							<outline text="}"/>
							</outline>
						<outline text="return root.find(&quot;.concord-cursor:first&quot;);"/>
						<outline text="};"/>
						</outline>
					<outline text="this.getCursorRef = function(){">
						<outline text="return this.setCursorContext(this.getCursor());"/>
						<outline text="};"/>
						</outline>
					<outline text="this.getHeaders = function(){">
						<outline text="var headers = {};"/>
						<outline text="if(root.data(&quot;head&quot;)){">
							<outline text="headers = root.data(&quot;head&quot;);"/>
							<outline text="}"/>
							</outline>
						<outline text="headers[&quot;title&quot;] = this.getTitle();"/>
						<outline text="return headers;"/>
						<outline text="},"/>
						</outline>
					<outline text="this.getLineText = function() {">
						<outline text="var node = this.getCursor();"/>
						<outline text="if(node.length == 1) {">
							<outline text="var text = node.children(&quot;.concord-wrapper:first&quot;).children(&quot;.concord-text:first&quot;).html();"/>
							<outline text="var textMatches = text.match(/^(.+)&lt;br&gt;\s*$/);"/>
							<outline text="if(textMatches){">
								<outline text="text = textMatches[1];"/>
								<outline text="}"/>
								</outline>
							<outline text="return concordInstance.editor.unescape(text);"/>
							<outline text="} else {">
								<outline text="return null;"/>
								<outline text="}"/>
								</outline>
							</outline>
						<outline text="};"/>
						</outline>
					<outline text="this.getRenderMode = function(){">
						<outline text="if(root.data(&quot;renderMode&quot;)!==undefined){">
							<outline text="return (root.data(&quot;renderMode&quot;)===true);"/>
							<outline text="}else{">
								<outline text="return true;"/>
								<outline text="}"/>
								</outline>
							</outline>
						<outline text="};"/>
						</outline>
					<outline text="this.getTitle = function() {">
						<outline text="return root.data(&quot;title&quot;);"/>
						<outline text="};"/>
						</outline>
					<outline text="this.go = function(direction, count, multiple, textMode) {">
						<outline text="if(count===undefined) {">
							<outline text="count = 1;"/>
							<outline text="}"/>
							</outline>
						<outline text="var cursor = this.getCursor();"/>
						<outline text="if(textMode==undefined){">
							<outline text="textMode = false;"/>
							<outline text="}"/>
							</outline>
						<outline text="this.setTextMode(textMode);"/>
						<outline text="var ableToMoveInDirection = false;"/>
						<outline text="switch(direction) {">
							<outline text="case up:">
								<outline text="for(var i = 0; i &lt; count; i++) {">
									<outline text="var prev = cursor.prev();"/>
									<outline text="if(prev.length == 1) {">
										<outline text="cursor = prev;"/>
										<outline text="ableToMoveInDirection = true;"/>
										<outline text="}else{">
											<outline text="break;"/>
											<outline text="}"/>
											</outline>
										</outline>
									<outline text="}"/>
									</outline>
								<outline text="this.setCursor(cursor, multiple);"/>
								<outline text="break;"/>
								</outline>
							<outline text="case down:">
								<outline text="for(var i = 0; i &lt; count; i++) {">
									<outline text="var next = cursor.next();"/>
									<outline text="if(next.length == 1) {">
										<outline text="cursor = next;"/>
										<outline text="ableToMoveInDirection = true;"/>
										<outline text="}else{">
											<outline text="break;"/>
											<outline text="}"/>
											</outline>
										</outline>
									<outline text="}"/>
									</outline>
								<outline text="this.setCursor(cursor, multiple);"/>
								<outline text="break;"/>
								</outline>
							<outline text="case left:">
								<outline text="for(var i = 0; i &lt; count; i++) {">
									<outline text="var parent = cursor.parents(&quot;.concord-node:first&quot;);"/>
									<outline text="if(parent.length == 1) {">
										<outline text="cursor = parent;"/>
										<outline text="ableToMoveInDirection = true;"/>
										<outline text="}else{">
											<outline text="break;"/>
											<outline text="}"/>
											</outline>
										</outline>
									<outline text="}"/>
									</outline>
								<outline text="this.setCursor(cursor, multiple);"/>
								<outline text="break;"/>
								</outline>
							<outline text="case right:">
								<outline text="for(var i = 0; i &lt; count; i++) {">
									<outline text="var firstSibling = cursor.children(&quot;ol&quot;).children(&quot;.concord-node:first&quot;);"/>
									<outline text="if(firstSibling.length == 1) {">
										<outline text="cursor = firstSibling;"/>
										<outline text="ableToMoveInDirection = true;"/>
										<outline text="}else{">
											<outline text="break;"/>
											<outline text="}"/>
											</outline>
										</outline>
									<outline text="}"/>
									</outline>
								<outline text="this.setCursor(cursor, multiple);"/>
								<outline text="break;"/>
								</outline>
							<outline text="case flatup:">
								<outline text="var nodeCount = 0;"/>
								<outline text="while(cursor &amp;&amp; (nodeCount &lt; count)) {">
									<outline text="var cursor = this._walk_up(cursor);"/>
									<outline text="if(cursor) {">
										<outline text="if(!cursor.hasClass(&quot;collapsed&quot;) &amp;&amp; (cursor.children(&quot;ol&quot;).children().size() &gt; 0)) {">
											<outline text="nodeCount++;"/>
											<outline text="ableToMoveInDirection = true;"/>
											<outline text="if(nodeCount == count) {">
												<outline text="this.setCursor(cursor, multiple);"/>
												<outline text="break;"/>
												</outline>
											<outline text="}"/>
											</outline>
										<outline text="}"/>
										</outline>
									<outline text="}"/>
									</outline>
								<outline text="}"/>
								<outline text="break;"/>
								</outline>
							<outline text="case flatdown:">
								<outline text="var nodeCount = 0;"/>
								<outline text="while(cursor &amp;&amp; (nodeCount &lt; count)) {">
									<outline text="var next = null;"/>
									<outline text="if(!cursor.hasClass(&quot;collapsed&quot;)) {">
										<outline text="var outline = cursor.children(&quot;ol&quot;);"/>
										<outline text="if(outline.length == 1) {">
											<outline text="var firstChild = outline.children(&quot;.concord-node:first&quot;);"/>
											<outline text="if(firstChild.length == 1) {">
												<outline text="next = firstChild;"/>
												<outline text="}"/>
												</outline>
											<outline text="}"/>
											</outline>
										<outline text="}"/>
										</outline>
									<outline text="if(!next) {">
										<outline text="next = this._walk_down(cursor);"/>
										<outline text="}"/>
										</outline>
									<outline text="cursor = next;"/>
									<outline text="if(cursor) {">
										<outline text="if(!cursor.hasClass(&quot;collapsed&quot;) &amp;&amp; (cursor.children(&quot;ol&quot;).children().size() &gt; 0)) {">
											<outline text="nodeCount++;"/>
											<outline text="ableToMoveInDirection = true;"/>
											<outline text="if(nodeCount == count) {">
												<outline text="this.setCursor(cursor, multiple);"/>
												<outline text="}"/>
												</outline>
											<outline text="}"/>
											</outline>
										<outline text="}"/>
										</outline>
									<outline text="}"/>
									</outline>
								<outline text="break;"/>
								</outline>
							<outline text="}"/>
							</outline>
						<outline text="this.markChanged();"/>
						<outline text="return ableToMoveInDirection;"/>
						<outline text="};"/>
						</outline>
					<outline text="this.insert = function(insertText, insertDirection, flInsertRawHtml) { //9/16/20 by DW -- new optional param -- flInsertRawHtml">
						<outline text="this.saveState();"/>
						<outline text="var level = this.getCursor().parents(&quot;.concord-node&quot;).length+1;"/>
						<outline text="var node = $(&quot;&lt;li&gt;&lt;/li&gt;&quot;);"/>
						<outline text="node.addClass(&quot;concord-node&quot;);"/>
						<outline text="switch(insertDirection){">
							<outline text="case right:">
								<outline text="level+=1;"/>
								<outline text="break;"/>
								</outline>
							<outline text="case left:">
								<outline text="level-=1;"/>
								<outline text="break;"/>
								</outline>
							<outline text="}"/>
							</outline>
						<outline text="node.addClass(&quot;concord-level-&quot;+level);"/>
						<outline text="var wrapper = $(&quot;&lt;div class='concord-wrapper'&gt;&lt;/div&gt;&quot;);"/>
						<outline text="var iconName=&quot;caret-right&quot;;"/>
						<outline text="var icon = ConcordUtil.getIconHtml (iconName);"/>
						<outline text="var icon = &quot;&lt;i&quot;+&quot; class=\&quot;node-icon fa fa-&quot;+ iconName +&quot;\&quot;&gt;&lt;&quot;+&quot;/i&gt;&quot;;" isComment="true"/>
						<outline text="wrapper.append(icon);"/>
						<outline text="wrapper.addClass(&quot;type-icon&quot;);"/>
						<outline text="var text = $(&quot;&lt;div class='concord-text' contenteditable='true'&gt;&lt;/div&gt;&quot;);"/>
						<outline text="text.addClass(&quot;concord-level-&quot;+level+&quot;-text&quot;);"/>
						<outline text="var outline = $(&quot;&lt;ol&gt;&lt;/ol&gt;&quot;);"/>
						<outline text="text.appendTo(wrapper);"/>
						<outline text="wrapper.appendTo(node);"/>
						<outline text="outline.appendTo(node);"/>
						<outline text="if(insertText &amp;&amp; (insertText!=&quot;&quot;)){">
							<outline text="if (flInsertRawHtml) { //9/16/20 by DW">
								<outline text="text.html(insertText);"/>
								<outline text="}"/>
								</outline>
							<outline text="else {">
								<outline text="text.html(concordInstance.editor.escape(insertText));"/>
								<outline text="}"/>
								</outline>
							<outline text="}"/>
							</outline>
						<outline text="var cursor = this.getCursor();"/>
						<outline text="if(!insertDirection) {">
							<outline text="insertDirection = down;"/>
							<outline text="}"/>
							</outline>
						<outline text="switch(insertDirection) {">
							<outline text="case down:">
								<outline text="cursor.after(node);"/>
								<outline text="break;"/>
								</outline>
							<outline text="case right:">
								<outline text="cursor.children(&quot;ol&quot;).prepend(node);"/>
								<outline text="this.expand(false);"/>
								<outline text="break;"/>
								</outline>
							<outline text="case up:">
								<outline text="cursor.before(node);"/>
								<outline text="break;"/>
								</outline>
							<outline text="case left:">
								<outline text="var parent = cursor.parents(&quot;.concord-node:first&quot;);"/>
								<outline text="if(parent.length == 1) {">
									<outline text="parent.after(node);"/>
									<outline text="}"/>
									</outline>
								<outline text="break;"/>
								</outline>
							<outline text="}"/>
							</outline>
						<outline text="this.setCursor(node);"/>
						<outline text="this.markChanged();"/>
						<outline text="concordInstance.fireCallback(&quot;opInsert&quot;, this.setCursorContext(node));"/>
						<outline text="return node;"/>
						<outline text="};"/>
						</outline>
					<outline text="this.insertImage = function(url){">
						<outline text="if(this.inTextMode()){">
							<outline text="document.execCommand(&quot;insertImage&quot;, null, url);"/>
							<outline text="}else{">
								<outline text="this.insert('&lt;img src=&quot;'+url+'&quot;&gt;', down);"/>
								<outline text="}"/>
								</outline>
							</outline>
						<outline text="};"/>
						</outline>
					<outline text="this.insertText = function(text){">
						<outline text="var nodes = $(&quot;&lt;ol&gt;&lt;/ol&gt;&quot;);"/>
						<outline text="var lastLevel = 0;"/>
						<outline text="var startingline = 0;"/>
						<outline text="var startinglevel = 0;"/>
						<outline text="var lastNode = null;"/>
						<outline text="var parent = null;"/>
						<outline text="var parents = {};"/>
						<outline text="var lines = text.split(&quot;\n&quot;);"/>
						<outline text="var workflowy=true;"/>
						<outline text="var workflowyParent = null;"/>
						<outline text="var firstlinewithcontent = 0;"/>
						<outline text="for(var i = 0; i &lt; lines.length; i++){">
							<outline text="var line = lines[i];"/>
							<outline text="if(!line.match(/^\s*$/)){">
								<outline text="firstlinewithcontent = i;"/>
								<outline text="break;"/>
								<outline text="}"/>
								</outline>
							<outline text="}"/>
							</outline>
						<outline text="if(lines.length&gt;(firstlinewithcontent+2)){">
							<outline text="if((lines[firstlinewithcontent].match(/^([\t\s]*)\-.*$/)==null) &amp;&amp; lines[firstlinewithcontent].match(/^.+$/) &amp;&amp; (lines[firstlinewithcontent+1]==&quot;&quot;)){">
								<outline text="startingline = firstlinewithcontent+2;"/>
								<outline text="var workflowyParent = concordInstance.editor.makeNode();"/>
								<outline text="workflowyParent.children(&quot;.concord-wrapper&quot;).children(&quot;.concord-text&quot;).html(lines[firstlinewithcontent]);"/>
								<outline text="}"/>
								</outline>
							<outline text="}"/>
							</outline>
						<outline text="for(var i = startingline; i &lt; lines.length; i++){">
							<outline text="var line = lines[i];"/>
							<outline text="if((line!=&quot;&quot;) &amp;&amp; !line.match(/^\s+$/) &amp;&amp; (line.match(/^([\t\s]*)\-.*$/)==null)){">
								<outline text="workflowy=false;"/>
								<outline text="break;"/>
								<outline text="}"/>
								</outline>
							<outline text="}"/>
							</outline>
						<outline text="if(!workflowy){">
							<outline text="startingline = 0;"/>
							<outline text="workflowyParent=null;"/>
							<outline text="}"/>
							</outline>
						<outline text="for(var i = startingline; i &lt; lines.length; i++){">
							<outline text="var line = lines[i];"/>
							<outline text="if((line!=&quot;&quot;) &amp;&amp; !line.match(/^\s+$/)){">
								<outline text="var matches = line.match(/^([\t\s]*)(.+)$/);"/>
								<outline text="var node = concordInstance.editor.makeNode();"/>
								<outline text="var nodeText = concordInstance.editor.escape(matches[2]);"/>
								<outline text="if(workflowy){">
									<outline text="var nodeTextMatches = nodeText.match(/^([\t\s]*)\-\s*(.+)$/)"/>
									<outline text="if(nodeTextMatches!=null){">
										<outline text="nodeText = nodeTextMatches[2];"/>
										<outline text="}"/>
										</outline>
									<outline text="}"/>
									</outline>
								<outline text="node.children(&quot;.concord-wrapper&quot;).children(&quot;.concord-text&quot;).html(nodeText);"/>
								<outline text="var level = startinglevel;"/>
								<outline text="if(matches[1]){">
									<outline text="if(workflowy){">
										<outline text="level = (matches[1].length / 2) + startinglevel;"/>
										<outline text="}"/>
										</outline>
									<outline text="else {">
										<outline text="level = matches[1].length + startinglevel;"/>
										<outline text="}"/>
										</outline>
									<outline text="if(level&gt;lastLevel){">
										<outline text="parents[lastLevel]=lastNode;"/>
										<outline text="parent = lastNode;"/>
										<outline text="}else if ((level&gt;0) &amp;&amp; (level &lt; lastLevel)){">
											<outline text="parent = parents[level-1];"/>
											<outline text="}"/>
											</outline>
										</outline>
									<outline text="}"/>
									</outline>
								<outline text="if(parent &amp;&amp; (level &gt; 0)){">
									<outline text="parent.children(&quot;ol&quot;).append(node);"/>
									<outline text="parent.addClass(&quot;collapsed&quot;);"/>
									<outline text="}else{">
										<outline text="parents = {};"/>
										<outline text="nodes.append(node);"/>
										<outline text="}"/>
										</outline>
									</outline>
								<outline text="lastNode = node;"/>
								<outline text="lastLevel = level;"/>
								<outline text="}"/>
								</outline>
							<outline text="}"/>
							</outline>
						<outline text="if(workflowyParent){">
							<outline text="if(nodes.children().length &gt; 0){">
								<outline text="workflowyParent.addClass(&quot;collapsed&quot;);"/>
								<outline text="}"/>
								</outline>
							<outline text="var clonedNodes = nodes.clone();"/>
							<outline text="clonedNodes.children().appendTo(workflowyParent.children(&quot;ol&quot;));"/>
							<outline text="nodes = $(&quot;&lt;ol&gt;&lt;/ol&gt;&quot;);"/>
							<outline text="nodes.append(workflowyParent);"/>
							<outline text="}"/>
							</outline>
						<outline text="if(nodes.children().length&gt;0){">
							<outline text="this.saveState();"/>
							<outline text="this.setTextMode(false);"/>
							<outline text="var cursor = this.getCursor();"/>
							<outline text="nodes.children().insertAfter(cursor);"/>
							<outline text="this.setCursor(cursor.next());"/>
							<outline text="concordInstance.root.removeData(&quot;clipboard&quot;);"/>
							<outline text="this.markChanged();"/>
							<outline text="concordInstance.editor.recalculateLevels();"/>
							<outline text="}"/>
							</outline>
						<outline text="},"/>
						</outline>
					<outline text="this.insertXml = function(opmltext,dir){">
						<outline text="this.saveState();"/>
						<outline text="var doc = null;"/>
						<outline text="var nodes = $(&quot;&lt;ol&gt;&lt;/ol&gt;&quot;);"/>
						<outline text="var cursor = this.getCursor();"/>
						<outline text="var level = cursor.parents(&quot;.concord-node&quot;).length+1;"/>
						<outline text="if(!dir){">
							<outline text="dir = down;"/>
							<outline text="}"/>
							</outline>
						<outline text="switch(dir){">
							<outline text="case right:">
								<outline text="level+=1;"/>
								<outline text="break;"/>
								</outline>
							<outline text="case left:">
								<outline text="level-=1;"/>
								<outline text="break;"/>
								</outline>
							<outline text="}"/>
							</outline>
						<outline text="if(typeof opmltext == &quot;string&quot;) {">
							<outline text="doc = $($.parseXML(opmltext));"/>
							<outline text="} else {">
								<outline text="doc = $(opmltext);"/>
								<outline text="}"/>
								</outline>
							</outline>
						<outline text="doc.find(&quot;body&quot;).children(&quot;outline&quot;).each(function() {">
							<outline text="nodes.append(concordInstance.editor.build($(this), true, level));"/>
							<outline text="});"/>
							</outline>
						<outline text="var expansionState = doc.find(&quot;expansionState&quot;);"/>
						<outline text="if(expansionState &amp;&amp; expansionState.text() &amp;&amp; (expansionState.text()!=&quot;&quot;)){">
							<outline text="var expansionStates = expansionState.text().split(&quot;,&quot;);"/>
							<outline text="var nodeId=1;"/>
							<outline text="nodes.find(&quot;.concord-node&quot;).each(function(){">
								<outline text="if(expansionStates.indexOf(&quot;&quot;+nodeId) &gt;= 0){">
									<outline text="$(this).removeClass(&quot;collapsed&quot;);"/>
									<outline text="}"/>
									</outline>
								<outline text="nodeId++;"/>
								<outline text="});"/>
								</outline>
							<outline text="}"/>
							</outline>
						<outline text="switch(dir) {">
							<outline text="case down:">
								<outline text="nodes.children().insertAfter(cursor);"/>
								<outline text="break;"/>
								</outline>
							<outline text="case right:">
								<outline text="nodes.children().prependTo(cursor.children(&quot;ol&quot;));"/>
								<outline text="this.expand(false);"/>
								<outline text="break;"/>
								</outline>
							<outline text="case up:">
								<outline text="nodes.children().insertBefore(cursor);"/>
								<outline text="break;"/>
								</outline>
							<outline text="case left:">
								<outline text="var parent = cursor.parents(&quot;.concord-node:first&quot;);"/>
								<outline text="if(parent.length == 1) {">
									<outline text="nodes.children().insertAfter(parent);"/>
									<outline text="}"/>
									</outline>
								<outline text="break;"/>
								</outline>
							<outline text="}"/>
							</outline>
						<outline text="this.markChanged();"/>
						<outline text="return true;"/>
						<outline text="};"/>
						</outline>
					<outline text="this.inTextMode = function(){">
						<outline text="return root.hasClass(&quot;textMode&quot;);"/>
						<outline text="};"/>
						</outline>
					<outline text="this.italic = function(){">
						<outline text="this.saveState();"/>
						<outline text="if(this.inTextMode()){">
							<outline text="document.execCommand(&quot;italic&quot;);"/>
							<outline text="}else{">
								<outline text="this.focusCursor();"/>
								<outline text="document.execCommand(&quot;selectAll&quot;);"/>
								<outline text="document.execCommand(&quot;italic&quot;);"/>
								<outline text="document.execCommand(&quot;unselect&quot;);"/>
								<outline text="this.blurCursor();"/>
								<outline text="concordInstance.pasteBinFocus();"/>
								<outline text="}"/>
								</outline>
							</outline>
						<outline text="this.markChanged();"/>
						<outline text="};"/>
						</outline>
					<outline text="this.level = function(){">
						<outline text="return this.getCursor().parents(&quot;.concord-node&quot;).length+1;"/>
						<outline text="},"/>
						</outline>
					<outline text="this.link = function(url){">
						<outline text="if(this.inTextMode()){">
							<outline text="if(!concord.handleEvents){">
								<outline text="var instance = this;"/>
								<outline text="concord.onResume(function(){">
									<outline text="instance.link(url);"/>
									<outline text="});"/>
									</outline>
								<outline text="return;"/>
								<outline text="}"/>
								</outline>
							<outline text="var range = concordInstance.editor.getSelection();"/>
							<outline text="if(range===undefined){">
								<outline text="concordInstance.editor.restoreSelection();"/>
								<outline text="}"/>
								</outline>
							<outline text="if(concordInstance.editor.getSelection()){">
								<outline text="this.saveState();"/>
								<outline text="document.execCommand(&quot;createLink&quot;, null, url);"/>
								<outline text="this.markChanged();"/>
								<outline text="}"/>
								</outline>
							<outline text="}"/>
							</outline>
						<outline text="};"/>
						</outline>
					<outline text="this.markChanged = function() {">
						<outline text="root.data(&quot;changed&quot;, true);"/>
						<outline text="if(!this.inTextMode()){">
							<outline text="root.find(&quot;.concord-node.dirty&quot;).removeClass(&quot;dirty&quot;);"/>
							<outline text="}"/>
							</outline>
						<outline text="return true;"/>
						<outline text="};"/>
						</outline>
					<outline text="this.paste = function(){">
						<outline text="if(!this.inTextMode()){">
							<outline text="if(root.data(&quot;clipboard&quot;)!=null){">
								<outline text="var pasteNodes = root.data(&quot;clipboard&quot;).clone(true,true);"/>
								<outline text="if(pasteNodes.length&gt;0){">
									<outline text="this.saveState();"/>
									<outline text="root.find(&quot;.selected&quot;).removeClass(&quot;selected&quot;);"/>
									<outline text="pasteNodes.insertAfter(this.getCursor());"/>
									<outline text="this.setCursor($(pasteNodes[0]), (pasteNodes.length&gt;1));"/>
									<outline text="this.markChanged();"/>
									<outline text="}"/>
									</outline>
								<outline text="}"/>
								</outline>
							<outline text="}"/>
							</outline>
						<outline text="};"/>
						</outline>
					<outline text="this.promote = function() {">
						<outline text="var node = this.getCursor();"/>
						<outline text="if(node.children(&quot;ol&quot;).children().length &gt; 0){">
							<outline text="this.saveState();"/>
							<outline text="node.children(&quot;ol&quot;).children().reverse().each(function() {">
								<outline text="var child = $(this).clone(true, true);"/>
								<outline text="$(this).remove();"/>
								<outline text="node.after(child);"/>
								<outline text="});"/>
								</outline>
							<outline text="concordInstance.editor.recalculateLevels(node.parent().find(&quot;.concord-node&quot;));"/>
							<outline text="this.markChanged();"/>
							<outline text="}"/>
							</outline>
						<outline text="};"/>
						</outline>
					<outline text="this.redraw = function(){">
						<outline text="var ct = 1;"/>
						<outline text="var cursorIndex = 1;"/>
						<outline text="var wasChanged = this.changed();"/>
						<outline text="root.find(&quot;.concord-node:visible&quot;).each(function(){">
							<outline text="if($(this).hasClass(&quot;concord-cursor&quot;)){">
								<outline text="cursorIndex=ct;"/>
								<outline text="return false;"/>
								<outline text="}"/>
								</outline>
							<outline text="ct++;"/>
							<outline text="});"/>
							</outline>
						<outline text="this.xmlToOutline(this.outlineToXml());"/>
						<outline text="ct=1;"/>
						<outline text="var thisOp = this;"/>
						<outline text="root.find(&quot;.concord-node:visible&quot;).each(function(){">
							<outline text="if(cursorIndex==ct){">
								<outline text="thisOp.setCursor($(this));"/>
								<outline text="return false;"/>
								<outline text="}"/>
								</outline>
							<outline text="ct++;"/>
							<outline text="});"/>
							</outline>
						<outline text="if(wasChanged){">
							<outline text="this.markChanged();"/>
							<outline text="}"/>
							</outline>
						<outline text="};"/>
						</outline>
					<outline text="this.reorg = function(direction, count) {">
						<outline text="if(count===undefined) {">
							<outline text="count = 1;"/>
							<outline text="}"/>
							</outline>
						<outline text="var ableToMoveInDirection = false;"/>
						<outline text="var cursor = this.getCursor();"/>
						<outline text="var range = undefined;"/>
						<outline text="var toMove = this.getCursor();"/>
						<outline text="var selected = root.find(&quot;.selected&quot;);"/>
						<outline text="var iteration = 1;"/>
						<outline text="if(selected.length&gt;1){">
							<outline text="cursor = root.find(&quot;.selected:first&quot;);"/>
							<outline text="toMove = root.find(&quot;.selected&quot;);"/>
							<outline text="}"/>
							</outline>
						<outline text="switch(direction) {">
							<outline text="case up:">
								<outline text="var prev = cursor.prev();"/>
								<outline text="if(prev.length==1) {">
									<outline text="while(iteration &lt; count){">
										<outline text="if(prev.prev().length==1){">
											<outline text="prev = prev.prev();"/>
											<outline text="}"/>
											</outline>
										<outline text="else{">
											<outline text="break;"/>
											<outline text="}"/>
											</outline>
										<outline text="iteration++;"/>
										<outline text="}"/>
										</outline>
									<outline text="this.saveState();"/>
									<outline text="var clonedMove = toMove.clone(true, true);"/>
									<outline text="toMove.remove();"/>
									<outline text="clonedMove.insertBefore(prev);"/>
									<outline text="ableToMoveInDirection = true;"/>
									<outline text="}"/>
									</outline>
								<outline text="break;"/>
								</outline>
							<outline text="case down:">
								<outline text="if(!this.inTextMode()){">
									<outline text="cursor = root.find(&quot;.selected:last&quot;);"/>
									<outline text="}"/>
									</outline>
								<outline text="var next = cursor.next();"/>
								<outline text="if(next.length==1) {">
									<outline text="while(iteration &lt; count){">
										<outline text="if(next.next().length==1){">
											<outline text="next = next.next();"/>
											<outline text="}"/>
											</outline>
										<outline text="else{">
											<outline text="break;"/>
											<outline text="}"/>
											</outline>
										<outline text="iteration++;"/>
										<outline text="}"/>
										</outline>
									<outline text="this.saveState();"/>
									<outline text="var clonedMove = toMove.clone(true, true);"/>
									<outline text="toMove.remove();"/>
									<outline text="clonedMove.insertAfter(next);"/>
									<outline text="ableToMoveInDirection = true;"/>
									<outline text="}"/>
									</outline>
								<outline text="break;"/>
								</outline>
							<outline text="case left:">
								<outline text="var outline = cursor.parent();"/>
								<outline text="if(!outline.hasClass(&quot;concord-root&quot;)) {">
									<outline text="var parent = outline.parent();"/>
									<outline text="while(iteration &lt; count){">
										<outline text="var parentParent = parent.parents(&quot;.concord-node:first&quot;);"/>
										<outline text="if(parentParent.length==1){">
											<outline text="parent = parentParent;"/>
											<outline text="}"/>
											</outline>
										<outline text="else{">
											<outline text="break;"/>
											<outline text="}"/>
											</outline>
										<outline text="iteration++;"/>
										<outline text="}"/>
										</outline>
									<outline text="this.saveState();"/>
									<outline text="var clonedMove = toMove.clone(true, true);"/>
									<outline text="toMove.remove();"/>
									<outline text="clonedMove.insertAfter(parent);"/>
									<outline text="concordInstance.editor.recalculateLevels(parent.nextAll(&quot;.concord-node&quot;));"/>
									<outline text="ableToMoveInDirection = true;"/>
									<outline text="}"/>
									</outline>
								<outline text="break;"/>
								</outline>
							<outline text="case right:">
								<outline text="var prev = cursor.prev();"/>
								<outline text="if(prev.length == 1) {">
									<outline text="this.saveState();"/>
									<outline text="while(iteration &lt; count){">
										<outline text="if(prev.children(&quot;ol&quot;).length==1){">
											<outline text="var prevNode = prev.children(&quot;ol&quot;).children(&quot;.concord-node:last&quot;);"/>
											<outline text="if(prevNode.length==1){">
												<outline text="prev = prevNode;"/>
												<outline text="}"/>
												</outline>
											<outline text="else{">
												<outline text="break;"/>
												<outline text="}"/>
												</outline>
											<outline text="}"/>
											</outline>
										<outline text="else{">
											<outline text="break;"/>
											<outline text="}"/>
											</outline>
										<outline text="iteration++;"/>
										<outline text="}"/>
										</outline>
									<outline text="var prevOutline = prev.children(&quot;ol&quot;);"/>
									<outline text="if(prevOutline.length == 0) {">
										<outline text="prevOutline = $(&quot;&lt;ol&gt;&lt;/ol&gt;&quot;);"/>
										<outline text="prevOutline.appendTo(prev);"/>
										<outline text="}"/>
										</outline>
									<outline text="var clonedMove = toMove.clone(true, true);"/>
									<outline text="toMove.remove();"/>
									<outline text="clonedMove.appendTo(prevOutline);"/>
									<outline text="prev.removeClass(&quot;collapsed&quot;);"/>
									<outline text="concordInstance.editor.recalculateLevels(prev.find(&quot;.concord-node&quot;));"/>
									<outline text="ableToMoveInDirection = true;"/>
									<outline text="}"/>
									</outline>
								<outline text="break;"/>
								</outline>
							<outline text="}"/>
							</outline>
						<outline text="if(ableToMoveInDirection){">
							<outline text="if(this.inTextMode()){">
								<outline text="this.setCursor(this.getCursor());"/>
								<outline text="}"/>
								</outline>
							<outline text="this.markChanged();"/>
							<outline text="var node = this.getCursor (); //5/9/21 by DW"/>
							<outline text="concordInstance.fireCallback (&quot;opReorg&quot;, this.setCursorContext (node)); //5/9/21 by DW"/>
							<outline text="}"/>
							</outline>
						<outline text="return ableToMoveInDirection;"/>
						<outline text="};"/>
						</outline>
					<outline text="this.runSelection = function(){">
						<outline text="var value = eval (this.getLineText());"/>
						<outline text="this.deleteSubs();"/>
						<outline text="this.insert(value, &quot;right&quot;);"/>
						<outline text="concordInstance.script.makeComment();"/>
						<outline text="this.go(&quot;left&quot;, 1);"/>
						<outline text="};"/>
						</outline>
					<outline text="this.saveState = function(){">
						<outline text="root.data(&quot;change&quot;, root.children().clone(true, true));"/>
						<outline text="root.data(&quot;changeTextMode&quot;, this.inTextMode());"/>
						<outline text="if(this.inTextMode()){">
							<outline text="var range = concordInstance.editor.getSelection();"/>
							<outline text="if( range){">
								<outline text="root.data(&quot;changeRange&quot;,range.cloneRange());"/>
								<outline text="}else{">
									<outline text="root.data(&quot;changeRange&quot;, undefined);"/>
									<outline text="}"/>
									</outline>
								</outline>
							<outline text="}else{">
								<outline text="root.data(&quot;changeRange&quot;, undefined);"/>
								<outline text="}"/>
								</outline>
							</outline>
						<outline text="return true;"/>
						<outline text="};"/>
						</outline>
					<outline text="this.setCursor = function(node, multiple, multipleRange){">
						<outline text="root.find(&quot;.concord-cursor&quot;).removeClass(&quot;concord-cursor&quot;);"/>
						<outline text="node.addClass(&quot;concord-cursor&quot;);"/>
						<outline text="if(this.inTextMode()){">
							<outline text="concordInstance.editor.edit(node);"/>
							<outline text="}else{">
								<outline text="concordInstance.editor.select(node, multiple, multipleRange);"/>
								<outline text="concordInstance.pasteBinFocus();"/>
								<outline text="}"/>
								</outline>
							</outline>
						<outline text="concordInstance.fireCallback(&quot;opCursorMoved&quot;, this.setCursorContext(node));"/>
						<outline text="concordInstance.editor.hideContextMenu();"/>
						<outline text="};"/>
						</outline>
					<outline text="this.setCursorContext = function(cursor){">
						<outline text="return new ConcordOp(root,concordInstance,cursor);"/>
						<outline text="};"/>
						</outline>
					<outline text="this.setHeaders = function(headers){">
						<outline text="root.data(&quot;head&quot;, headers);"/>
						<outline text="this.markChanged();"/>
						<outline text="},"/>
						</outline>
					<outline text="this.setLineText = function(text) {">
						<outline text="this.saveState();"/>
						<outline text="var node = this.getCursor();"/>
						<outline text="if(node.length == 1) {">
							<outline text="node.children(&quot;.concord-wrapper:first&quot;).children(&quot;.concord-text:first&quot;).html(concordInstance.editor.escape(text));"/>
							<outline text="return true;"/>
							<outline text="} else {">
								<outline text="return false;"/>
								<outline text="}"/>
								</outline>
							</outline>
						<outline text="this.markChanged();"/>
						<outline text="};"/>
						</outline>
					<outline text="this.setRenderMode = function(mode){">
						<outline text="root.data(&quot;renderMode&quot;, mode);"/>
						<outline text="this.redraw();"/>
						<outline text="return true;"/>
						<outline text="};"/>
						</outline>
					<outline text="this.setStyle = function(css){">
						<outline text="root.parent().find(&quot;style.customStyle&quot;).remove();"/>
						<outline text="root.before('&lt;style type=&quot;text/css&quot; class=&quot;customStyle&quot;&gt;'+ css + '&lt;/style&gt;');"/>
						<outline text="return true;"/>
						<outline text="};"/>
						</outline>
					<outline text="this.setTextMode = function(textMode){">
						<outline text="var readonly = concordInstance.prefs()[&quot;readonly&quot;];"/>
						<outline text="if(readonly==undefined){">
							<outline text="readonly = false;"/>
							<outline text="}"/>
							</outline>
						<outline text="if(readonly){">
							<outline text="return;"/>
							<outline text="}"/>
							</outline>
						<outline text="if(root.hasClass(&quot;textMode&quot;) == textMode){">
							<outline text="return;"/>
							<outline text="}"/>
							</outline>
						<outline text="if(textMode==true){">
							<outline text="root.addClass(&quot;textMode&quot;);"/>
							<outline text="concordInstance.editor.editorMode();"/>
							<outline text="concordInstance.editor.edit(this.getCursor());"/>
							<outline text="}else{">
								<outline text="root.removeClass(&quot;textMode&quot;);"/>
								<outline text="root.find(&quot;.editing&quot;).removeClass(&quot;editing&quot;);"/>
								<outline text="this.blurCursor();"/>
								<outline text="concordInstance.editor.select(this.getCursor());"/>
								<outline text="}"/>
								</outline>
							</outline>
						<outline text="};"/>
						</outline>
					<outline text="this.setTitle = function(title) {">
						<outline text="root.data(&quot;title&quot;, title);"/>
						<outline text="return true;"/>
						<outline text="};"/>
						</outline>
					<outline text="this.strikethrough = function(){">
						<outline text="this.saveState();"/>
						<outline text="if(this.inTextMode()){">
							<outline text="document.execCommand(&quot;strikeThrough&quot;);"/>
							<outline text="}else{">
								<outline text="this.focusCursor();"/>
								<outline text="document.execCommand(&quot;selectAll&quot;);"/>
								<outline text="document.execCommand(&quot;strikeThrough&quot;);"/>
								<outline text="document.execCommand(&quot;unselect&quot;);"/>
								<outline text="this.blurCursor();"/>
								<outline text="concordInstance.pasteBinFocus();"/>
								<outline text="}"/>
								</outline>
							</outline>
						<outline text="this.markChanged();"/>
						<outline text="};"/>
						</outline>
					<outline text="this.subsExpanded = function() {">
						<outline text="var node = this.getCursor();"/>
						<outline text="if(node.length == 1) {">
							<outline text="if(!node.hasClass(&quot;collapsed&quot;) &amp;&amp; (node.children(&quot;ol&quot;).children().size() &gt; 0)) {">
								<outline text="return true;"/>
								<outline text="} else {">
									<outline text="return false;"/>
									<outline text="}"/>
									</outline>
								</outline>
							<outline text="}"/>
							</outline>
						<outline text="return false;"/>
						<outline text="};"/>
						</outline>
					<outline text="this.outlineToText = function(){">
						<outline text="var text = &quot;&quot;;"/>
						<outline text="root.children(&quot;.concord-node&quot;).each(function() {">
							<outline text="text+= concordInstance.editor.textLine($(this));"/>
							<outline text="});"/>
							</outline>
						<outline text="return text;"/>
						<outline text="};"/>
						</outline>
					<outline text="this.saveCursor = function () { //8/5/14 by DW -- so we can save the location of the cursor in an OPML file">
						<outline text="var cursor = this.getCursor (), prev, ct = 0;"/>
						<outline text="while (true) {">
							<outline text="var prev = this._walk_up (cursor);"/>
							<outline text="if (prev) {">
								<outline text="cursor = prev;"/>
								<outline text="ct++;"/>
								<outline text="}"/>
								</outline>
							<outline text="else {">
								<outline text="break;"/>
								<outline text="}"/>
								</outline>
							<outline text="}"/>
							</outline>
						<outline text="return (ct);"/>
						<outline text="}"/>
						</outline>
					<outline text="this.sort = function () { //3/7/20 by DW -- sort the list containing the bar cursor headline">
						<outline text="this.saveState ();"/>
						<outline text="var mycursor = this.getCursor ();"/>
						<outline text="var parentnode = $(mycursor).parent ();"/>
						<outline text="var items = $(parentnode).children ();"/>
						<outline text="items.sort (function (a, b) {">
							<outline text="var keyA = $(a).text ().toLowerCase ();"/>
							<outline text="var keyB = $(b).text ().toLowerCase ();"/>
							<outline text="if (keyA &lt; keyB) return -1;"/>
							<outline text="if (keyA &gt; keyB) return 1;"/>
							<outline text="return 0;"/>
							<outline text="});"/>
							</outline>
						<outline text="$.each (items, function (i, li) {">
							<outline text="parentnode.append (li); //removes it from the old spot and moves it"/>
							<outline text="});"/>
							</outline>
						<outline text="this.markChanged ();"/>
						<outline text="}"/>
						</outline>
					<outline text="this.outlineToXml = function(ownerName, ownerEmail, ownerId) {">
						<outline text="var head = this.getHeaders();"/>
						<outline text="if(ownerName) {">
							<outline text="head[&quot;ownerName&quot;] = ownerName;"/>
							<outline text="}"/>
							</outline>
						<outline text="if(ownerEmail) {">
							<outline text="head[&quot;ownerEmail&quot;] = ownerEmail;"/>
							<outline text="}"/>
							</outline>
						<outline text="if(ownerId) {">
							<outline text="head[&quot;ownerId&quot;] = ownerId;"/>
							<outline text="}"/>
							</outline>
						<outline text="var title = this.getTitle();"/>
						<outline text="if(!title) {">
							<outline text="title = &quot;&quot;;"/>
							<outline text="}"/>
							</outline>
						<outline text="head[&quot;title&quot;] = title;"/>
						<outline text="head[&quot;dateModified&quot;] = (new Date()).toGMTString();"/>
						<outline text="var expansionStates = [];"/>
						<outline text="var nodeId = 1;"/>
						<outline text="var cursor = root.find(&quot;.concord-node:first&quot;);"/>
						<outline text="do {">
							<outline text="if(cursor) {">
								<outline text="if(!cursor.hasClass(&quot;collapsed&quot;) &amp;&amp; (cursor.children(&quot;ol&quot;).children().size() &gt; 0)) {">
									<outline text="expansionStates.push(nodeId);"/>
									<outline text="}"/>
									</outline>
								<outline text="nodeId++;"/>
								<outline text="}else{">
									<outline text="break;"/>
									<outline text="}"/>
									</outline>
								</outline>
							<outline text="var next = null;"/>
							<outline text="if(!cursor.hasClass(&quot;collapsed&quot;)) {">
								<outline text="var outline = cursor.children(&quot;ol&quot;);"/>
								<outline text="if(outline.length == 1) {">
									<outline text="var firstChild = outline.children(&quot;.concord-node:first&quot;);"/>
									<outline text="if(firstChild.length == 1) {">
										<outline text="next = firstChild;"/>
										<outline text="}"/>
										</outline>
									<outline text="}"/>
									</outline>
								<outline text="}"/>
								</outline>
							<outline text="if(!next) {">
								<outline text="next = this._walk_down(cursor);"/>
								<outline text="}"/>
								</outline>
							<outline text="cursor = next;"/>
							<outline text="} while(cursor!=null);"/>
							</outline>
						<outline text="head[&quot;expansionState&quot;] = expansionStates.join(&quot;,&quot;);"/>
						<outline text=""/>
						<outline text="head[&quot;lastCursor&quot;] = this.saveCursor (); //8/5/14 by DW"/>
						<outline text=""/>
						<outline text="var opml = '';"/>
						<outline text="var indent=0;"/>
						<outline text="var add = function(s){">
							<outline text="for(var i = 0; i &lt; indent; i++){">
								<outline text="opml+='\t';"/>
								<outline text="}"/>
								<outline text="opml+=s+'\n';"/>
								</outline>
							<outline text="};"/>
							</outline>
						<outline text="add('&lt;?xml version=&quot;1.0&quot;?&gt;');"/>
						<outline text="add('&lt;opml version=&quot;2.0&quot;&gt;');"/>
						<outline text="indent++;"/>
						<outline text="add('&lt;head&gt;');"/>
						<outline text="indent++;"/>
						<outline text="for(var headName in head){">
							<outline text="if(head[headName]!==undefined){">
								<outline text="add('&lt;'+headName+'&gt;' + ConcordUtil.escapeXml(head[headName]) + '&lt;/' + headName + '&gt;');"/>
								<outline text="}"/>
								</outline>
							<outline text="}"/>
							</outline>
						<outline text="add('&lt;/head&gt;');"/>
						<outline text="indent--;"/>
						<outline text="add('&lt;body&gt;');"/>
						<outline text="indent++;"/>
						<outline text="root.children(&quot;.concord-node&quot;).each(function() {">
							<outline text="opml += concordInstance.editor.opmlLine($(this), indent);"/>
							<outline text="});"/>
							</outline>
						<outline text="add('&lt;/body&gt;');"/>
						<outline text="indent--;"/>
						<outline text="add('&lt;/opml&gt;');"/>
						<outline text="return opml;"/>
						<outline text="};"/>
						</outline>
					<outline text="this.undo = function(){">
						<outline text="var stateBeforeChange = root.children().clone(true, true);"/>
						<outline text="var textModeBeforeChange = this.inTextMode();"/>
						<outline text="var beforeRange = undefined;"/>
						<outline text="if(this.inTextMode()){">
							<outline text="var range = concordInstance.editor.getSelection();"/>
							<outline text="if(range){">
								<outline text="beforeRange = range.cloneRange();"/>
								<outline text="}"/>
								</outline>
							<outline text="}"/>
							</outline>
						<outline text="if(root.data(&quot;change&quot;)){">
							<outline text="root.empty();"/>
							<outline text="root.data(&quot;change&quot;).appendTo(root);"/>
							<outline text="this.setTextMode(root.data(&quot;changeTextMode&quot;));"/>
							<outline text="if(this.inTextMode()){">
								<outline text="this.focusCursor();"/>
								<outline text="var range = root.data(&quot;changeRange&quot;);"/>
								<outline text="if(range){">
									<outline text="concordInstance.editor.restoreSelection(range);"/>
									<outline text="}"/>
									</outline>
								<outline text="}"/>
								</outline>
							<outline text="root.data(&quot;change&quot;, stateBeforeChange);"/>
							<outline text="root.data(&quot;changeTextMode&quot;, textModeBeforeChange);"/>
							<outline text="root.data(&quot;changeRange&quot;, beforeRange);"/>
							<outline text="return true;"/>
							<outline text="}"/>
							</outline>
						<outline text="return false;"/>
						<outline text="};"/>
						</outline>
					<outline text="this.visitLevel = function(cb){">
						<outline text="var cursor = this.getCursor();"/>
						<outline text="var op = this;"/>
						<outline text="cursor.children(&quot;ol&quot;).children().each(function(){">
							<outline text="var subCursorContext = op.setCursorContext($(this));"/>
							<outline text="cb(subCursorContext);"/>
							<outline text="});"/>
							</outline>
						<outline text="return true;"/>
						<outline text="};"/>
						</outline>
					<outline text="this.visitToSummit = function(cb){">
						<outline text="var cursor = this.getCursor();"/>
						<outline text="while(cb(this.setCursorContext(cursor))){">
							<outline text="var parent = cursor.parents(&quot;.concord-node:first&quot;);"/>
							<outline text="if(parent.length==1){">
								<outline text="cursor=parent;"/>
								<outline text="}else{">
									<outline text="break;"/>
									<outline text="}"/>
									</outline>
								</outline>
							<outline text="}"/>
							</outline>
						<outline text="return true;"/>
						<outline text="};"/>
						</outline>
					<outline text="this.visitAll = function(cb){">
						<outline text="var op = this;"/>
						<outline text="root.find(&quot;.concord-node&quot;).each(function(){">
							<outline text="var subCursorContext = op.setCursorContext($(this));"/>
							<outline text="var retVal = cb(subCursorContext);"/>
							<outline text="if((retVal!==undefined) &amp;&amp; (retVal===false)){">
								<outline text="return false;"/>
								<outline text="}"/>
								</outline>
							<outline text="});"/>
							</outline>
						<outline text="},"/>
						</outline>
					<outline text="this.wipe = function() {">
						<outline text="if(root.find(&quot;.concord-node&quot;).length &gt; 0){">
							<outline text="this.saveState();"/>
							<outline text="}"/>
							</outline>
						<outline text="root.empty();"/>
						<outline text="var node = concordInstance.editor.makeNode();"/>
						<outline text="root.append(node);"/>
						<outline text="this.setTextMode(false);"/>
						<outline text="this.setCursor(node);"/>
						<outline text="this.markChanged();"/>
						<outline text="};"/>
						</outline>
					<outline text="this.xmlToOutline = function(xmlText, flSetFocus, flInsertRawHtml) { //2/22/14 by DW -- new param, flSetFocus. 9/18/20 by DW -- flInsertRawHtml">
						<outline text=""/>
						<outline text="if (flSetFocus == undefined) { //2/22/14 by DW">
							<outline text="flSetFocus = true;"/>
							<outline text="}"/>
							</outline>
						<outline text=""/>
						<outline text="var doc = null;"/>
						<outline text="if(typeof xmlText == &quot;string&quot;) {">
							<outline text="doc = $($.parseXML(xmlText));"/>
							<outline text="} else {">
								<outline text="doc = $(xmlText);"/>
								<outline text="}"/>
								</outline>
							</outline>
						<outline text="root.empty();"/>
						<outline text="var title = &quot;&quot;;"/>
						<outline text="if(doc.find(&quot;title:first&quot;).length==1){">
							<outline text="title = doc.find(&quot;title:first&quot;).text();"/>
							<outline text="}"/>
							</outline>
						<outline text="this.setTitle(title);"/>
						<outline text="var headers = {};"/>
						<outline text="doc.find(&quot;head&quot;).children().each(function(){">
							<outline text="headers[$(this).prop(&quot;tagName&quot;)] = $(this).text();"/>
							<outline text="});"/>
							</outline>
						<outline text="root.data(&quot;head&quot;, headers);"/>
						<outline text="doc.find(&quot;body&quot;).children(&quot;outline&quot;).each(function() {">
							<outline text="root.append(concordInstance.editor.build($(this), true, undefined, flInsertRawHtml)); //9/18/20 by DW -- pass new flInsertRawHtml param"/>
							<outline text="});"/>
							</outline>
						<outline text="root.data(&quot;changed&quot;, false);"/>
						<outline text="root.removeData(&quot;previousChange&quot;);"/>
						<outline text="var expansionState = doc.find(&quot;expansionState&quot;);"/>
						<outline text="if(expansionState &amp;&amp; expansionState.text() &amp;&amp; (expansionState.text()!=&quot;&quot;)){">
							<outline text="var expansionStates = expansionState.text().split(/\s*,\s*/);"/>
							<outline text="var nodeId = 1;"/>
							<outline text="var cursor = root.find(&quot;.concord-node:first&quot;);"/>
							<outline text="do {">
								<outline text="if(cursor) {">
									<outline text="if(expansionStates.indexOf(&quot;&quot;+nodeId) &gt;= 0){">
										<outline text="cursor.removeClass(&quot;collapsed&quot;);"/>
										<outline text="}"/>
										</outline>
									<outline text="nodeId++;"/>
									<outline text="}else{">
										<outline text="break;"/>
										<outline text="}"/>
										</outline>
									</outline>
								<outline text="var next = null;"/>
								<outline text="if(!cursor.hasClass(&quot;collapsed&quot;)) {">
									<outline text="var outline = cursor.children(&quot;ol&quot;);"/>
									<outline text="if(outline.length == 1) {">
										<outline text="var firstChild = outline.children(&quot;.concord-node:first&quot;);"/>
										<outline text="if(firstChild.length == 1) {">
											<outline text="next = firstChild;"/>
											<outline text="}"/>
											</outline>
										<outline text="}"/>
										</outline>
									<outline text="}"/>
									</outline>
								<outline text="if(!next) {">
									<outline text="next = this._walk_down(cursor);"/>
									<outline text="}"/>
									</outline>
								<outline text="cursor = next;"/>
								<outline text="} while(cursor!=null);"/>
								</outline>
							<outline text="}"/>
							</outline>
						<outline text="this.setTextMode(false);"/>
						<outline text=""/>
						<outline text="if (flSetFocus) {">
							<outline text="var lastCursor = doc.find (&quot;lastCursor&quot;); //8/5/14 by DW"/>
							<outline text="this.setCursor (root.find (&quot;.concord-node:first&quot;));"/>
							<outline text="if (lastCursor &amp;&amp; lastCursor.text () &amp;&amp; (lastCursor.text () != &quot;&quot;)) { //8/5/14 by DW">
								<outline text="var ix = parseInt (lastCursor.text ());"/>
								<outline text="if (ix != NaN) {">
									<outline text="var cursor = this.getCursor (), flCursorMoved = false;"/>
									<outline text="for (var i = 1; i &lt;= ix; i++) {">
										<outline text="var next = null;"/>
										<outline text="if (!cursor) { //1/15/24 by DW" created="Mon, 15 Jan 2024 15:15:26 GMT">
											<outline text="return;" created="Mon, 15 Jan 2024 15:22:53 GMT"/>
											<outline text="}" created="Mon, 15 Jan 2024 15:15:26 GMT"/>
											</outline>
										<outline text="if (!cursor.hasClass (&quot;collapsed&quot;)) {">
											<outline text="var outline = cursor.children (&quot;ol&quot;);"/>
											<outline text="if (outline.length == 1) {">
												<outline text="var firstChild = outline.children (&quot;.concord-node:first&quot;);"/>
												<outline text="if (firstChild.length == 1) {">
													<outline text="next = firstChild;"/>
													<outline text="}"/>
													</outline>
												<outline text="}"/>
												</outline>
											<outline text="}"/>
											</outline>
										<outline text="if (!next) {">
											<outline text="next = this._walk_down (cursor);"/>
											<outline text="}"/>
											</outline>
										<outline text="cursor = next;"/>
										<outline text="flCursorMoved = true;"/>
										<outline text="}"/>
										</outline>
									<outline text="if (flCursorMoved) {">
										<outline text="this.setCursor (next);"/>
										<outline text="}"/>
										</outline>
									<outline text="}"/>
									</outline>
								<outline text="}"/>
								</outline>
							<outline text="}"/>
							</outline>
						<outline text=""/>
						<outline text="root.data(&quot;currentChange&quot;, root.children().clone(true, true));"/>
						<outline text="return true;"/>
						<outline text="};"/>
						</outline>
					<outline text="this.attributes = new ConcordOpAttributes(concordInstance, this.getCursor());"/>
					<outline text="}"/>
					</outline>
				<outline text="function ConcordOpAttributes(concordInstance, cursor) {">
					<outline text="this._cssTextClassName = &quot;cssTextClass&quot;;"/>
					<outline text="this._cssTextClass = function(newValue){">
						<outline text="if(newValue===undefined){">
							<outline text="return;"/>
							<outline text="}"/>
							</outline>
						<outline text="var newCssClasses = newValue.split(/\s+/);"/>
						<outline text="var concordText = cursor.children(&quot;.concord-wrapper:first&quot;).children(&quot;.concord-text:first&quot;);"/>
						<outline text="var currentCssClass = concordText.attr(&quot;class&quot;);"/>
						<outline text="if(currentCssClass){">
							<outline text="var cssClassesArray = currentCssClass.split(/\s+/);"/>
							<outline text="for(var i in cssClassesArray){">
								<outline text="var className = cssClassesArray[i];"/>
								<outline text="if(className.match(/^concord\-.+$/) == null){">
									<outline text="concordText.removeClass(className);"/>
									<outline text="}"/>
									</outline>
								<outline text="}"/>
								</outline>
							<outline text="}"/>
							</outline>
						<outline text="for(var j in newCssClasses){">
							<outline text="var newClass = newCssClasses[j];"/>
							<outline text="concordText.addClass(newClass);"/>
							<outline text="}"/>
							</outline>
						<outline text="};"/>
						</outline>
					<outline text="this.addGroup = function(attributes) {">
						<outline text="if(attributes[&quot;type&quot;]){">
							<outline text="cursor.attr(&quot;opml-type&quot;, attributes[&quot;type&quot;]);"/>
							<outline text="}"/>
							</outline>
						<outline text="else {">
							<outline text="cursor.removeAttr(&quot;opml-type&quot;);"/>
							<outline text="}"/>
							</outline>
						<outline text="this._cssTextClass(attributes[this._cssTextClassName]);"/>
						<outline text="var finalAttributes = this.getAll();"/>
						<outline text="var iconAttribute = &quot;type&quot;;"/>
						<outline text="if(attributes[&quot;icon&quot;]){">
							<outline text="iconAttribute = &quot;icon&quot;;"/>
							<outline text="}"/>
							</outline>
						<outline text="for(var name in attributes){">
							<outline text="finalAttributes[name] = attributes[name];"/>
							<outline text="if(name==iconAttribute){">
								<outline text="var value = attributes[name];"/>
								<outline text="var wrapper = cursor.children(&quot;.concord-wrapper&quot;);"/>
								<outline text="var iconName = null;"/>
								<outline text="if((name == &quot;type&quot;) &amp;&amp; concordInstance.prefs() &amp;&amp; concordInstance.prefs().typeIcons &amp;&amp; concordInstance.prefs().typeIcons[value]){">
									<outline text="iconName = concordInstance.prefs().typeIcons[value];"/>
									<outline text="}else if (name==&quot;icon&quot;){">
										<outline text="iconName = value;"/>
										<outline text="}"/>
										</outline>
									</outline>
								<outline text="if(iconName){">
									<outline text="var icon = ConcordUtil.getIconHtml (iconName);"/>
									<outline text="var icon = &quot;&lt;i&quot;+&quot; class=\&quot;node-icon fa fa-&quot;+ iconName +&quot;\&quot;&gt;&lt;&quot;+&quot;/i&gt;&quot;;" isComment="true"/>
									<outline text="wrapper.children(&quot;.node-icon:first&quot;).replaceWith(icon);"/>
									<outline text="}"/>
									</outline>
								<outline text="}"/>
								</outline>
							<outline text="}"/>
							</outline>
						<outline text="cursor.data(&quot;attributes&quot;, finalAttributes);"/>
						<outline text="concordInstance.op.markChanged();"/>
						<outline text="return finalAttributes;"/>
						<outline text="};"/>
						</outline>
					<outline text="this.setGroup = function(attributes) {">
						<outline text="if(attributes[this._cssTextClassName]!==undefined){">
							<outline text="this._cssTextClass(attributes[this._cssTextClassName]);"/>
							<outline text="}"/>
							</outline>
						<outline text="else {">
							<outline text="this._cssTextClass(&quot;&quot;);"/>
							<outline text="}"/>
							</outline>
						<outline text="cursor.data(&quot;attributes&quot;, attributes);"/>
						<outline text="var wrapper = cursor.children(&quot;.concord-wrapper&quot;);"/>
						<outline text="$(cursor[0].attributes).each(function() {">
							<outline text="var matches = this.name.match(/^opml-(.+)$/)"/>
							<outline text="if(matches) {">
								<outline text="var name = matches[1];"/>
								<outline text="if(!attributes[name]) {">
									<outline text="cursor.removeAttr(this.name);"/>
									<outline text="}"/>
									</outline>
								<outline text="}"/>
								</outline>
							<outline text="});"/>
							</outline>
						<outline text="var iconAttribute = &quot;type&quot;;"/>
						<outline text="if(attributes[&quot;icon&quot;]){">
							<outline text="iconAttribute = &quot;icon&quot;;"/>
							<outline text="}"/>
							</outline>
						<outline text="if(name==&quot;type&quot;){">
							<outline text="cursor.attr(&quot;opml-&quot; + name, attributes[name]);"/>
							<outline text="}"/>
							</outline>
						<outline text="for(var name in attributes) {">
							<outline text="if(name==iconAttribute){">
								<outline text="var value = attributes[name];"/>
								<outline text="var wrapper = cursor.children(&quot;.concord-wrapper&quot;);"/>
								<outline text="var iconName = null;"/>
								<outline text="if((name == &quot;type&quot;) &amp;&amp; concordInstance.prefs() &amp;&amp; concordInstance.prefs().typeIcons &amp;&amp; concordInstance.prefs().typeIcons[value]){">
									<outline text="iconName = concordInstance.prefs().typeIcons[value];"/>
									<outline text="}else if (name==&quot;icon&quot;){">
										<outline text="iconName = value;"/>
										<outline text="}"/>
										</outline>
									</outline>
								<outline text="if(iconName){">
									<outline text="var icon = ConcordUtil.getIconHtml (iconName);"/>
									<outline text="var icon = &quot;&lt;i&quot;+&quot; class=\&quot;node-icon fa fa-&quot;+ iconName +&quot;\&quot;&gt;&lt;&quot;+&quot;/i&gt;&quot;;" isComment="true"/>
									<outline text="wrapper.children(&quot;.node-icon:first&quot;).replaceWith(icon);"/>
									<outline text="}"/>
									</outline>
								<outline text="}"/>
								</outline>
							<outline text="}"/>
							</outline>
						<outline text="concordInstance.op.markChanged();"/>
						<outline text="return attributes;"/>
						<outline text="};"/>
						</outline>
					<outline text="this.getAll = function() {">
						<outline text="if(cursor.data(&quot;attributes&quot;) !== undefined){">
							<outline text="return cursor.data(&quot;attributes&quot;);"/>
							<outline text="}"/>
							</outline>
						<outline text="return {};"/>
						<outline text="};"/>
						</outline>
					<outline text="this.getOne = function(name) {">
						<outline text="return this.getAll()[name];"/>
						<outline text="};"/>
						</outline>
					<outline text="this.makeEmpty = function() {">
						<outline text="this._cssTextClass(&quot;&quot;);"/>
						<outline text="var numAttributes = 0;"/>
						<outline text="var atts = this.getAll();"/>
						<outline text="if(atts !== undefined){">
							<outline text="for(var i in atts){">
								<outline text="numAttributes++;"/>
								<outline text="}"/>
								</outline>
							<outline text="}"/>
							</outline>
						<outline text="cursor.removeData(&quot;attributes&quot;);"/>
						<outline text="var removedAnyAttributes = (numAttributes &gt; 0);"/>
						<outline text="var attributes = {};"/>
						<outline text="$(cursor[0].attributes).each(function() {">
							<outline text="var matches = this.name.match(/^opml-(.+)$/)"/>
							<outline text="if(matches) {">
								<outline text="cursor.removeAttr(this.name);"/>
								<outline text="}"/>
								</outline>
							<outline text="});"/>
							</outline>
						<outline text="if(removedAnyAttributes){">
							<outline text="concordInstance.op.markChanged();"/>
							<outline text="}"/>
							</outline>
						<outline text="return removedAnyAttributes;"/>
						<outline text="};"/>
						</outline>
					<outline text="this.setOne = function(name, value) {">
						<outline text="if(name==this._cssTextClassName){">
							<outline text="this._cssTextClass(value);"/>
							<outline text="}"/>
							</outline>
						<outline text="var atts = this.getAll();"/>
						<outline text="atts[name]=value;"/>
						<outline text="cursor.data(&quot;attributes&quot;, atts);"/>
						<outline text="if((name==&quot;type&quot; )|| (name==&quot;icon&quot;)){">
							<outline text="cursor.attr(&quot;opml-&quot; + name, value);"/>
							<outline text="var wrapper = cursor.children(&quot;.concord-wrapper&quot;);"/>
							<outline text="var iconName = null;"/>
							<outline text="if((name == &quot;type&quot;) &amp;&amp; concordInstance.prefs() &amp;&amp; concordInstance.prefs().typeIcons &amp;&amp; concordInstance.prefs().typeIcons[value]){">
								<outline text="iconName = concordInstance.prefs().typeIcons[value];"/>
								<outline text="}else if (name==&quot;icon&quot;){">
									<outline text="iconName = value;"/>
									<outline text="}"/>
									</outline>
								</outline>
							<outline text="if(iconName){">
								<outline text="var icon = ConcordUtil.getIconHtml (iconName);"/>
								<outline text="var icon = &quot;&lt;i&quot;+&quot; class=\&quot;node-icon fa fa-&quot;+ iconName +&quot;\&quot;&gt;&lt;&quot;+&quot;/i&gt;&quot;;" isComment="true"/>
								<outline text="wrapper.children(&quot;.node-icon:first&quot;).replaceWith(icon);"/>
								<outline text="}"/>
								</outline>
							<outline text="}"/>
							</outline>
						<outline text="concordInstance.op.markChanged();"/>
						<outline text="return true;"/>
						<outline text="};"/>
						</outline>
					<outline text="this.exists = function(name){">
						<outline text="if(this.getOne(name) !== undefined){">
							<outline text="return true;"/>
							<outline text="}else{">
								<outline text="return false;"/>
								<outline text="}"/>
								</outline>
							</outline>
						<outline text="};"/>
						</outline>
					<outline text="this.removeOne = function(name){">
						<outline text="if(this.getAll()[name]){">
							<outline text="if(name == this._cssTextClassName){">
								<outline text="this._cssTextClass(&quot;&quot;);"/>
								<outline text="}"/>
								</outline>
							<outline text="delete this.getAll()[name];"/>
							<outline text="concordInstance.op.markChanged();"/>
							<outline text="return true;"/>
							<outline text="}"/>
							</outline>
						<outline text="return false;"/>
						<outline text="};"/>
						</outline>
					<outline text="}"/>
					</outline>
				<outline text="function ConcordScript(root, concordInstance){">
					<outline text="this.isComment = function(){">
						<outline text="if(concordInstance.op.attributes.getOne(&quot;isComment&quot;)!== undefined){">
							<outline text="return concordInstance.op.attributes.getOne(&quot;isComment&quot;)==&quot;true&quot;;"/>
							<outline text="}"/>
							</outline>
						<outline text="var parentIsAComment=false;"/>
						<outline text="concordInstance.op.getCursor().parents(&quot;.concord-node&quot;).each(function(){">
							<outline text="if(concordInstance.op.setCursorContext($(this)).attributes.getOne(&quot;isComment&quot;) == &quot;true&quot;){">
								<outline text="parentIsAComment = true;"/>
								<outline text="return;"/>
								<outline text="}"/>
								</outline>
							<outline text="});"/>
							</outline>
						<outline text="return parentIsAComment;"/>
						<outline text="};"/>
						</outline>
					<outline text="this.makeComment = function(){">
						<outline text="concordInstance.op.attributes.setOne(&quot;isComment&quot;, &quot;true&quot;);"/>
						<outline text="concordInstance.op.getCursor().addClass(&quot;concord-comment&quot;);"/>
						<outline text="return true;"/>
						<outline text="};"/>
						</outline>
					<outline text="this.unComment = function(){">
						<outline text="concordInstance.op.attributes.setOne(&quot;isComment&quot;, &quot;false&quot;);"/>
						<outline text="concordInstance.op.getCursor().removeClass(&quot;concord-comment&quot;);"/>
						<outline text="return true;"/>
						<outline text="};"/>
						</outline>
					<outline text="}"/>
					</outline>
				<outline text="function Op(opmltext){">
					<outline text="var fakeDom = $(&quot;&lt;div&gt;&lt;/div&gt;&quot;);"/>
					<outline text="fakeDom.concord().op.xmlToOutline(opmltext);"/>
					<outline text="return fakeDom.concord().op;"/>
					<outline text="}"/>
					</outline>
				<outline text="(function($) {">
					<outline text="$.fn.concord = function(options) {">
						<outline text="return new ConcordOutline($(this), options);"/>
						<outline text="};"/>
						</outline>
					<outline text="$(document).on(&quot;keydown&quot;, function(event) {">
						<outline text="if(!concord.handleEvents){">
							<outline text="return;"/>
							<outline text="}"/>
							</outline>
						<outline text="if($(event.target).is(&quot;input&quot;)||$(event.target).is(&quot;textarea&quot;)){">
							<outline text="return;"/>
							<outline text="}"/>
							</outline>
						<outline text="var focusRoot = concord.getFocusRoot();"/>
						<outline text="if(focusRoot==null){">
							<outline text="return;"/>
							<outline text="}"/>
							</outline>
						<outline text="var context = focusRoot;"/>
						<outline text="context.data(&quot;keydownEvent&quot;, event);"/>
						<outline text="var concordInstance = new ConcordOutline(context.parent());"/>
						<outline text="var readonly = concordInstance.prefs()[&quot;readonly&quot;];"/>
						<outline text="if(readonly==undefined){">
							<outline text="readonly=false;"/>
							<outline text="}"/>
							</outline>
						<outline text="// Readonly exceptions for arrow keys and cmd-comma"/>
						<outline text="if(readonly){">
							<outline text="if( (event.which&gt;=37) &amp;&amp; (event.which &lt;=40) ){">
								<outline text="readonly = false;"/>
								<outline text="}"/>
								</outline>
							<outline text="else if( (event.metaKey || event.ctrlKey) &amp;&amp; (event.which==188) ){">
								<outline text="readonly = false;"/>
								<outline text="}"/>
								</outline>
							<outline text="}"/>
							</outline>
						<outline text="if(!readonly){">
							<outline text="var keystrokeString = ConcordUtil.getKeystroke (event);"/>
							<outline text="event.concord = { //2/17/20 by DW">
								<outline text="keystrokeString, "/>
								<outline text="flKeyCaptured: false"/>
								<outline text="};"/>
								</outline>
							<outline text="concordInstance.fireCallback(&quot;opKeystroke&quot;, event);"/>
							<outline text="var keyCaptured = event.concord.flKeyCaptured;"/>
							<outline text="var commandKey = event.metaKey || event.ctrlKey;"/>
							<outline text="console.log (&quot;keydown: keystrokeString == &quot; + keystrokeString + &quot;, event.metaKey == &quot; + event.metaKey)" isComment="true"/>
							<outline text="switch (keystrokeString) {">
								<outline text="case &quot;backspace&quot;:">
									<outline text="if (concord.mobile) {">
										<outline text="if((concordInstance.op.getLineText()==&quot;&quot;) || (concordInstance.op.getLineText()==&quot;&lt;br&gt;&quot;)){">
											<outline text="event.preventDefault();"/>
											<outline text="concordInstance.op.deleteLine();"/>
											<outline text="}"/>
											</outline>
										<outline text="}"/>
										</outline>
									<outline text="else {">
										<outline text="if(concordInstance.op.inTextMode()) {">
											<outline text="if(!concordInstance.op.getCursor().hasClass(&quot;dirty&quot;)){">
												<outline text="concordInstance.op.saveState();"/>
												<outline text="concordInstance.op.getCursor().addClass(&quot;dirty&quot;);"/>
												<outline text="}"/>
												</outline>
											<outline text="}else{">
												<outline text="keyCaptured = true;"/>
												<outline text="event.preventDefault();"/>
												<outline text="concordInstance.op.deleteLine();"/>
												<outline text="}"/>
												</outline>
											</outline>
										<outline text="}"/>
										</outline>
									<outline text="break;"/>
									</outline>
								<outline text="case &quot;meta-backspace&quot;: //cmd-backspace -- 2/6/20 by DW">
									<outline text="function cmdBackspace () {">
										<outline text="var rightstring = concordInstance.op.getLineText ();"/>
										<outline text="if (concordInstance.op.countSubs () &gt; 0) { //has subs">
											<outline text="return (false);"/>
											<outline text="}"/>
											</outline>
										<outline text="if (!concordInstance.op.go (up, 1)) { //it's the first line at the level, nothing to merge with">
											<outline text="return (false);"/>
											<outline text="}"/>
											</outline>
										<outline text="if (concordInstance.op.countSubs () &gt; 0) { //has subs">
											<outline text="concordInstance.op.go (down, 1);"/>
											<outline text="return (false);"/>
											<outline text="}"/>
											</outline>
										<outline text="concordInstance.op.setLineText (concordInstance.op.getLineText () + rightstring);"/>
										<outline text="concordInstance.op.go (down, 1)"/>
										<outline text="concordInstance.op.deleteLine (); //moves cursor up before deleting"/>
										<outline text="return (true);"/>
										<outline text="}"/>
										</outline>
									<outline text="if (!cmdBackspace ()) {">
										<outline text="ConcordUtil.speakerBeep ();"/>
										<outline text="}"/>
										</outline>
									<outline text="break;"/>
									</outline>
								<outline text="case &quot;tab&quot;: ">
									<outline text="keyCaptured = true;"/>
									<outline text="event.preventDefault();"/>
									<outline text="event.stopPropagation();"/>
									<outline text="if(event.shiftKey) {">
										<outline text="concordInstance.op.reorg(left)"/>
										<outline text="} else {">
											<outline text="concordInstance.op.reorg(right);"/>
											<outline text="}"/>
											</outline>
										</outline>
									<outline text="break;"/>
									</outline>
								<outline text="case &quot;select-all&quot;:">
									<outline text="keyCaptured = true;"/>
									<outline text="event.preventDefault();"/>
									<outline text="var cursor = concordInstance.op.getCursor();"/>
									<outline text="if(concordInstance.op.inTextMode()){">
										<outline text="concordInstance.op.focusCursor();"/>
										<outline text="document.execCommand('selectAll',false,null);"/>
										<outline text="}else{">
											<outline text="concordInstance.editor.selectionMode();"/>
											<outline text="cursor.parent().children().addClass(&quot;selected&quot;);"/>
											<outline text="}"/>
											</outline>
										</outline>
									<outline text="break;"/>
									</outline>
								<outline text="case &quot;reorg-up&quot;:">
									<outline text="keyCaptured = true;"/>
									<outline text="event.preventDefault();"/>
									<outline text="concordInstance.op.reorg(up);"/>
									<outline text="break;"/>
									</outline>
								<outline text="case &quot;reorg-down&quot;:">
									<outline text="keyCaptured = true;"/>
									<outline text="event.preventDefault ();"/>
									<outline text="concordInstance.op.reorg (down);"/>
									<outline text="break;"/>
									</outline>
								<outline text="case &quot;reorg-left&quot;:">
									<outline text="keyCaptured = true;"/>
									<outline text="event.preventDefault ();"/>
									<outline text="concordInstance.op.reorg (left);"/>
									<outline text="break;"/>
									</outline>
								<outline text="case &quot;reorg-right&quot;:">
									<outline text="keyCaptured = true;"/>
									<outline text="event.preventDefault ();"/>
									<outline text="concordInstance.op.reorg (right);"/>
									<outline text="break;"/>
									</outline>
								<outline text="case &quot;promote&quot;:">
									<outline text="keyCaptured = true;"/>
									<outline text="event.preventDefault();"/>
									<outline text="concordInstance.op.promote();"/>
									<outline text="break;"/>
									</outline>
								<outline text="case &quot;demote&quot;:">
									<outline text="keyCaptured = true;"/>
									<outline text="event.preventDefault();"/>
									<outline text="concordInstance.op.demote();"/>
									<outline text="break;"/>
									</outline>
								<outline text="case &quot;return&quot;:">
									<outline text="if(concord.mobile){">
										<outline text="//Mobile"/>
										<outline text="event.preventDefault();"/>
										<outline text="keyCaptured=true;"/>
										<outline text="var cursor = concordInstance.op.getCursor();"/>
										<outline text="var clonedCursor = cursor.clone(true, true);"/>
										<outline text="clonedCursor.removeClass(&quot;concord-cursor&quot;);"/>
										<outline text="cursor.removeClass(&quot;selected&quot;);"/>
										<outline text="cursor.removeClass(&quot;dirty&quot;);"/>
										<outline text="cursor.removeClass(&quot;collapsed&quot;);"/>
										<outline text="concordInstance.op.setLineText(&quot;&quot;);"/>
										<outline text="var icon = ConcordUtil.getIconHtml (&quot;caret-right&quot;);"/>
										<outline text="var icon = &quot;&lt;i&quot;+&quot; class=\&quot;node-icon fa fa-caret-right\&quot;&gt;&lt;&quot;+&quot;/i&gt;&quot;;" isComment="true"/>
										<outline text="cursor.children(&quot;.concord-wrapper&quot;).children(&quot;.node-icon&quot;).replaceWith(icon);"/>
										<outline text="clonedCursor.insertBefore(cursor);"/>
										<outline text="concordInstance.op.attributes.makeEmpty();"/>
										<outline text="concordInstance.op.deleteSubs();"/>
										<outline text="concordInstance.op.focusCursor();"/>
										<outline text="concordInstance.fireCallback(&quot;opInsert&quot;, concordInstance.op.setCursorContext(cursor));"/>
										<outline text="}"/>
										</outline>
									<outline text="else{">
										<outline text="event.preventDefault();"/>
										<outline text="keyCaptured=true;"/>
										<outline text="if(event.originalEvent &amp;&amp; ((event.originalEvent.keyLocation &amp;&amp; (event.originalEvent.keyLocation != 0)) || (event.originalEvent.location &amp;&amp; (event.originalEvent.location != 0))) ){">
											<outline text="concordInstance.op.setTextMode(!concordInstance.op.inTextMode());"/>
											<outline text="}else{">
												<outline text="var direction = down;"/>
												<outline text="if(concordInstance.op.subsExpanded()){">
													<outline text="direction=right;"/>
													<outline text="}"/>
													</outline>
												<outline text="var node = concordInstance.op.insert(&quot;&quot;, direction);"/>
												<outline text="concordInstance.op.setTextMode(true);"/>
												<outline text="concordInstance.op.focusCursor();"/>
												<outline text="}"/>
												</outline>
											</outline>
										<outline text="}"/>
										</outline>
									<outline text="break;"/>
									</outline>
								<outline text="case &quot;meta-return&quot;: //cmd-return -- 2/6/20 by DW">
									<outline text="if (concordInstance.op.inTextMode ()) {">
										<outline text="if (concordInstance.op.countSubs () == 0) { //no subs">
											<outline text="function getCaretPosition (node) {">
												<outline text="var range = window.getSelection().getRangeAt(0);"/>
												<outline text="var preCaretRange = range.cloneRange(), caretPosition;"/>
												<outline text="var tmp = document.createElement(&quot;div&quot;);"/>
												<outline text="preCaretRange.selectNodeContents(node);"/>
												<outline text="preCaretRange.setEnd(range.endContainer, range.endOffset);"/>
												<outline text="tmp.appendChild(preCaretRange.cloneContents());"/>
												<outline text="caretPosition = tmp.innerHTML.length;"/>
												<outline text="tmp.parentNode.removeChild (tmp);" isComment="true"/>
												<outline text="return caretPosition;"/>
												<outline text="}"/>
												</outline>
											<outline text="var text = concordInstance.op.getCursor ().children (&quot;.concord-wrapper:first&quot;).children (&quot;.concord-text:first&quot;);"/>
											<outline text="var ixcaret = getCaretPosition (text.get (0));"/>
											<outline text="var linetext = concordInstance.op.getLineText ();"/>
											<outline text="var leftstring = ConcordUtil.stringMid (linetext, 1, ixcaret);"/>
											<outline text="var rightstring = ConcordUtil.stringDelete (linetext, 1, ixcaret);"/>
											<outline text="console.log (&quot;cmd-return: leftstring == &quot; + leftstring + &quot;, rightstring == &quot; + rightstring);" isComment="true"/>
											<outline text="concordInstance.op.setLineText (leftstring);"/>
											<outline text="concordInstance.op.insert (rightstring, down);"/>
											<outline text="}"/>
											</outline>
										<outline text="else {">
											<outline text="console.log (&quot;Can't split this headline because it has subs.&quot;);"/>
											<outline text="ConcordUtil.speakerBeep ();"/>
											<outline text="}"/>
											</outline>
										<outline text="}"/>
										</outline>
									<outline text="else {">
										<outline text="console.log (&quot;Can't split this headline because you're not in text mode.&quot;);"/>
										<outline text="ConcordUtil.speakerBeep ();"/>
										<outline text="}"/>
										</outline>
									<outline text="break;"/>
									</outline>
								<outline text="case &quot;cursor-left&quot;:">
									<outline text="var active = false;"/>
									<outline text="if($(event.target).hasClass(&quot;concord-text&quot;)) {">
										<outline text="if(event.target.selectionStart &gt; 0) {">
											<outline text="active = false;"/>
											<outline text="}"/>
											</outline>
										<outline text="}"/>
										</outline>
									<outline text="if(context.find(&quot;.concord-cursor.selected&quot;).length == 1) {">
										<outline text="active = true;"/>
										<outline text="}"/>
										</outline>
									<outline text="if(active) {">
										<outline text="keyCaptured = true;"/>
										<outline text="event.preventDefault();"/>
										<outline text="var cursor = concordInstance.op.getCursor();"/>
										<outline text="var prev = concordInstance.op._walk_up(cursor);"/>
										<outline text="if(prev) {">
											<outline text="concordInstance.op.setCursor(prev);"/>
											<outline text="}"/>
											</outline>
										<outline text="}"/>
										</outline>
									<outline text="break;"/>
									</outline>
								<outline text="case &quot;cursor-up&quot;:">
									<outline text="keyCaptured = true;"/>
									<outline text="event.preventDefault();"/>
									<outline text="if(concordInstance.op.inTextMode()){">
										<outline text="var cursor = concordInstance.op.getCursor();"/>
										<outline text="var prev = concordInstance.op._walk_up(cursor);"/>
										<outline text="if(prev) {">
											<outline text="concordInstance.op.setCursor(prev);"/>
											<outline text="}"/>
											</outline>
										<outline text="}else{">
											<outline text="concordInstance.op.go(up,1,event.shiftKey, concordInstance.op.inTextMode());"/>
											<outline text="}"/>
											</outline>
										</outline>
									<outline text="break;"/>
									</outline>
								<outline text="case &quot;cursor-right&quot;:">
									<outline text="var active = false;"/>
									<outline text="if(context.find(&quot;.concord-cursor.selected&quot;).length == 1) {">
										<outline text="active = true;"/>
										<outline text="}"/>
										</outline>
									<outline text="if(active) {">
										<outline text="keyCaptured = true;"/>
										<outline text="event.preventDefault();"/>
										<outline text="var next = null;"/>
										<outline text="var cursor = concordInstance.op.getCursor();"/>
										<outline text="if(!cursor.hasClass(&quot;collapsed&quot;)) {">
											<outline text="var outline = cursor.children(&quot;ol&quot;);"/>
											<outline text="if(outline.length == 1) {">
												<outline text="var firstChild = outline.children(&quot;.concord-node:first&quot;);"/>
												<outline text="if(firstChild.length == 1) {">
													<outline text="next = firstChild;"/>
													</outline>
												<outline text="}"/>
												</outline>
											<outline text="}"/>
											</outline>
										<outline text="}"/>
										<outline text="if(!next) {">
											<outline text="next = concordInstance.op._walk_down(cursor);"/>
											</outline>
										<outline text="}"/>
										<outline text="if(next) {">
											<outline text="concordInstance.op.setCursor(next);"/>
											<outline text="}"/>
											</outline>
										<outline text="}"/>
										</outline>
									<outline text="break;"/>
									</outline>
								<outline text="case &quot;cursor-down&quot;:">
									<outline text="keyCaptured = true;"/>
									<outline text="event.preventDefault();"/>
									<outline text="if(concordInstance.op.inTextMode()){">
										<outline text="var next = null;"/>
										<outline text="var cursor = concordInstance.op.getCursor();"/>
										<outline text="if(!cursor.hasClass(&quot;collapsed&quot;)) {">
											<outline text="var outline = cursor.children(&quot;ol&quot;);"/>
											<outline text="if(outline.length == 1) {">
												<outline text="var firstChild = outline.children(&quot;.concord-node:first&quot;);"/>
												<outline text="if(firstChild.length == 1) {">
													<outline text="next = firstChild;"/>
													</outline>
												<outline text="}"/>
												</outline>
											<outline text="}"/>
											</outline>
										<outline text="}"/>
										<outline text="if(!next) {">
											<outline text="next = concordInstance.op._walk_down(cursor);"/>
											</outline>
										<outline text="}"/>
										<outline text="if(next) {">
											<outline text="concordInstance.op.setCursor(next);"/>
											<outline text="}"/>
											</outline>
										<outline text="}else{">
											<outline text="concordInstance.op.go(down,1, event.shiftKey, concordInstance.op.inTextMode());"/>
											<outline text="}"/>
											</outline>
										</outline>
									<outline text="break;"/>
									</outline>
								<outline text="case &quot;delete&quot;:">
									<outline text="if(concordInstance.op.inTextMode()) {">
										<outline text="if(!concordInstance.op.getCursor().hasClass(&quot;dirty&quot;)){">
											<outline text="concordInstance.op.saveState();"/>
											<outline text="concordInstance.op.getCursor().addClass(&quot;dirty&quot;);"/>
											<outline text="}"/>
											</outline>
										<outline text="}else{">
											<outline text="keyCaptured = true;"/>
											<outline text="event.preventDefault();"/>
											<outline text="concordInstance.op.deleteLine();"/>
											<outline text="}"/>
											</outline>
										</outline>
									<outline text="break;"/>
									</outline>
								<outline text="case &quot;undo&quot;:">
									<outline text="keyCaptured=true;"/>
									<outline text="event.preventDefault();"/>
									<outline text="concordInstance.op.undo();"/>
									<outline text="break;"/>
									</outline>
								<outline text="case &quot;cut&quot;:">
									<outline text="if(concordInstance.op.inTextMode()){">
										<outline text="if(concordInstance.op.getLineText()==&quot;&quot;){">
											<outline text="keyCaptured=true;"/>
											<outline text="event.preventDefault();"/>
											<outline text="concordInstance.op.deleteLine();"/>
											<outline text="}"/>
											</outline>
										<outline text="else {">
											<outline text="concordInstance.op.saveState();"/>
											<outline text="}"/>
											</outline>
										<outline text="}"/>
										</outline>
									<outline text="break;"/>
									</outline>
								<outline text="case &quot;copy&quot;: //problem!">
									<outline text="if(false&amp;&amp;commandKey){">
										<outline text="if(concordInstance.op.inTextMode()){">
											<outline text="if(concordInstance.op.getLineText()!=&quot;&quot;){">
												<outline text="concordInstance.root.removeData(&quot;clipboard&quot;);"/>
												<outline text="}"/>
												</outline>
											<outline text="}else{">
												<outline text="keyCaptured=true;"/>
												<outline text="event.preventDefault();"/>
												<outline text="concordInstance.op.copy();"/>
												<outline text="}"/>
												</outline>
											</outline>
										<outline text="}"/>
										</outline>
									<outline text="break;"/>
									</outline>
								<outline text="case &quot;paste&quot;: //problem!">
									<outline text="break;"/>
									</outline>
								<outline text="case &quot;toggle-comment&quot;:">
									<outline text="if(concordInstance.script.isComment()){">
										<outline text="concordInstance.script.unComment();"/>
										<outline text="}else{">
											<outline text="concordInstance.script.makeComment();"/>
											<outline text="}"/>
											</outline>
										</outline>
									<outline text="break;"/>
									</outline>
								<outline text="case &quot;italicize&quot;:">
									<outline text="keyCaptured=true;"/>
									<outline text="event.preventDefault();"/>
									<outline text="concordInstance.op.italic();"/>
									<outline text="break;"/>
									</outline>
								<outline text="case &quot;bolden&quot;:">
									<outline text="keyCaptured=true;"/>
									<outline text="event.preventDefault();"/>
									<outline text="concordInstance.op.bold();"/>
									<outline text="break;"/>
									</outline>
								<outline text="case &quot;toggle-render&quot;:">
									<outline text="keyCaptured=true;"/>
									<outline text="event.preventDefault();"/>
									<outline text="concordInstance.op.setRenderMode(!concordInstance.op.getRenderMode());"/>
									<outline text="break;"/>
									</outline>
								<outline text="case &quot;toggle-expand&quot;:">
									<outline text="keyCaptured=true;"/>
									<outline text="event.preventDefault();"/>
									<outline text="if(concordInstance.op.subsExpanded()){">
										<outline text="concordInstance.op.collapse();"/>
										<outline text="}else{">
											<outline text="concordInstance.op.expand();"/>
											<outline text="}"/>
											</outline>
										</outline>
									<outline text="break;"/>
									</outline>
								<outline text="case &quot;run-selection&quot;:">
									<outline text="if (!keyCaptured) { //2/19/21 by DW" created="Fri, 19 Feb 2021 15:41:36 GMT">
										<outline text="keyCaptured=true;"/>
										<outline text="event.preventDefault();"/>
										<outline text="concordInstance.op.runSelection();"/>
										<outline text="}" created="Fri, 19 Feb 2021 15:41:39 GMT"/>
										</outline>
									<outline text="break;"/>
									</outline>
								<outline text="default:">
									<outline text="keyCaptured = false;"/>
									</outline>
								<outline text="}"/>
								</outline>
							<outline text="if(!keyCaptured) {">
								<outline text="if((event.which &gt;= 32) &amp;&amp; ((event.which &lt; 112) || (event.which &gt; 123)) &amp;&amp; (event.which &lt; 1000) &amp;&amp; !commandKey) {">
									<outline text="var node = concordInstance.op.getCursor();"/>
									<outline text="if(concordInstance.op.inTextMode()) {">
										<outline text="if(!node.hasClass(&quot;dirty&quot;)){">
											<outline text="concordInstance.op.saveState();"/>
											<outline text="}"/>
											</outline>
										<outline text="node.addClass(&quot;dirty&quot;);"/>
										<outline text="} else {">
											<outline text="concordInstance.op.setTextMode(true);"/>
											<outline text="concordInstance.op.saveState();"/>
											<outline text="concordInstance.editor.edit(node, true);"/>
											<outline text="node.addClass(&quot;dirty&quot;);"/>
											<outline text="}"/>
											</outline>
										</outline>
									<outline text="concordInstance.op.markChanged();"/>
									<outline text="}"/>
									</outline>
								<outline text="}"/>
								</outline>
							<outline text="}"/>
							</outline>
						<outline text="});"/>
						</outline>
					<outline text="$(document).on(&quot;mouseup&quot;, function(event) {">
						<outline text="if(!concord.handleEvents){">
							<outline text="return;"/>
							<outline text="}"/>
							</outline>
						<outline text="if($(&quot;.concord-root&quot;).length==0){">
							<outline text="return;"/>
							<outline text="}"/>
							</outline>
						<outline text="if( $(event.target).is(&quot;a&quot;) || $(event.target).is(&quot;input&quot;) || $(event.target).is(&quot;textarea&quot;) || ($(event.target).parents(&quot;a:first&quot;).length==1) || $(event.target).hasClass(&quot;dropdown-menu&quot;) || ($(event.target).parents(&quot;.dropdown-menu:first&quot;).length&gt;0)){">
							<outline text="return;"/>
							<outline text="}"/>
							</outline>
						<outline text="var context = $(event.target).parents(&quot;.concord-root:first&quot;);"/>
						<outline text="if(context.length == 0) {">
							<outline text="$(&quot;.concord-root&quot;).each(function() {">
								<outline text="var concordInstance = new ConcordOutline($(this).parent());"/>
								<outline text="concordInstance.editor.hideContextMenu();"/>
								<outline text="concordInstance.editor.dragModeExit();"/>
								<outline text="});"/>
								</outline>
							<outline text="var focusRoot = concord.getFocusRoot();"/>
							<outline text="}"/>
							</outline>
						<outline text="});"/>
						</outline>
					<outline text="$(document).on(&quot;click&quot;, concord.updateFocusRootEvent);"/>
					<outline text="$(document).on(&quot;dblclick&quot;, concord.updateFocusRootEvent);"/>
					<outline text="$(document).on('show', function(e){">
						<outline text="if($(e.target).is(&quot;.modal&quot;)){">
							<outline text="if($(e.target).attr(&quot;concord-events&quot;) != &quot;true&quot;){">
								<outline text="concord.stopListening();"/>
								<outline text="}"/>
								</outline>
							<outline text="}"/>
							</outline>
						<outline text="});"/>
						</outline>
					<outline text="$(document).on('hidden', function(e){">
						<outline text="if($(e.target).is(&quot;.modal&quot;)){">
							<outline text="if($(e.target).attr(&quot;concord-events&quot;) != &quot;true&quot;){">
								<outline text="concord.resumeListening();"/>
								<outline text="}"/>
								</outline>
							<outline text="}"/>
							</outline>
						<outline text="});"/>
						</outline>
					<outline text="concord.ready=true;"/>
					<outline text="})(jQuery);"/>
					</outline>
				</outline>
			<outline text="concordstyles.css">
				<outline text=".concord{">
					<outline text="font-family: Geneva, Arial;"/>
					<outline text="font-size: 12pt;"/>
					<outline text="margin: 0;"/>
					<outline text="padding: 0;"/>
					<outline text="border: 0;"/>
					<outline text="line-height: 20px;"/>
					<outline text="list-style-type: none;"/>
					<outline text="color: #000;"/>
					<outline text="}"/>
					</outline>
				<outline text=".concord ol{">
					<outline text="list-style-type: none;"/>
					<outline text="padding: 0 0 0 16px;"/>
					<outline text="margin: 0;"/>
					<outline text="clear: both;"/>
					<outline text="}"/>
					</outline>
				<outline text=".concord .concord-node{">
					<outline text="clear:left;"/>
					<outline text="display: block;"/>
					<outline text="min-height: 20px;"/>
					<outline text="}"/>
					</outline>
				<outline text=".concord .concord-node .concord-wrapper{">
					<outline text="display: inline-block;"/>
					<outline text="/* background: url('http://static.smallpicture.com/concord-assets/wedge.png') no-repeat 3px 8px; */"/>
					<outline text="background-repeat: no-repeat;"/>
					<outline text="position: relative;"/>
					<outline text="padding-left: 20px;"/>
					<outline text="/* float: left; */"/>
					<outline text="/* margin-bottom: 3px; */"/>
					<outline text="}"/>
					</outline>
				<outline text=".concord .concord-node.concord-comment .node-icon:before{">
					<outline text="content: &quot;\f100&quot; !important;"/>
					<outline text="}"/>
					</outline>
				<outline text=".concord .concord-node &gt; .concord-wrapper.type-icon .node-icon {">
					<outline text="position: absolute;"/>
					<outline text="top: 0;"/>
					<outline text="left: 0;"/>
					<outline text="color: silver;"/>
					<outline text="cursor: default;"/>
					<outline text="}"/>
					</outline>
				<outline text=".concord .concord-node.collapsed &gt; .concord-wrapper.type-icon .node-icon {">
					<outline text="color: #000;"/>
					<outline text="}"/>
					</outline>
				<outline text=".concord .concord-node[opml-type='link'] &gt; .concord-wrapper.type-icon .node-icon {">
					<outline text="cursor: pointer;"/>
					<outline text="}"/>
					</outline>
				<outline text=".concord .concord-node.collapsed.selected &gt; .concord-wrapper.type-icon .node-icon {">
					<outline text="color: #fff;"/>
					<outline text="}"/>
					</outline>
				<outline text=".concord .concord-node.selected.collapsed &gt; .concord-wrapper.type-icon .node-icon.icon-caret-right {">
					<outline text="color: #fff;"/>
					<outline text="}"/>
					</outline>
				<outline text=".concord .concord-node.selected &gt; .concord-wrapper.type-icon .node-icon.icon-caret-right {">
					<outline text="color: silver;"/>
					<outline text="}"/>
					</outline>
				<outline text=".concord .concord-node.collapsed &gt; .concord-wrapper{">
					<outline text="/* background-image: url('http://static.smallpicture.com/concord-assets/wedgeParent.png'); */"/>
					<outline text="}"/>
					</outline>
				<outline text=".concord .concord-node.concord-comment.collapsed &gt; .concord-wrapper{">
					<outline text="/* background-image: url('http://static.smallpicture.com/concord-assets/commentParent.png') !important; */"/>
					<outline text="}"/>
					</outline>
				<outline text=".concord .concord-node.selected.collapsed &gt; .concord-wrapper{">
					<outline text="/* background-image: url('http://static.smallpicture.com/concord-assets/wedgeParentWhite.png'); */"/>
					<outline text="}"/>
					</outline>
				<outline text=".concord .concord-node.concord-comment.selected.collapsed &gt; .concord-wrapper{">
					<outline text="/* background-image: url('http://static.smallpicture.com/concord-assets/commentParentWhite.png') !important; */"/>
					<outline text="}"/>
					</outline>
				<outline text=".concord .concord-node.selected.collapsed &gt; .concord-wrapper.type-icon{">
					<outline text="background-image: none;"/>
					<outline text="}"/>
					</outline>
				<outline text=".concord .concord-node.drop-sibling &gt; .concord-wrapper .node-icon:before {">
					<outline text="content: &quot;\f063&quot; !important;"/>
					<outline text="}"/>
					</outline>
				<outline text=".concord .concord-node.drop-sibling &gt; .concord-wrapper .node-icon {">
					<outline text="color: black !important;"/>
					<outline text="}"/>
					</outline>
				<outline text=".concord .concord-node.drop-child &gt; .concord-wrapper .node-icon:before {">
					<outline text="content: &quot;\f061&quot; !important;"/>
					<outline text="}"/>
					</outline>
				<outline text=".concord .concord-node.drop-child &gt; .concord-wrapper .node-icon{">
					<outline text="color: black !important;"/>
					<outline text="transform:rotate(45deg);"/>
					<outline text="-ms-transform:rotate(45deg); /* IE 9 */"/>
					<outline text="-webkit-transform:rotate(45deg); /* Safari and Chrome */"/>
					<outline text="}"/>
					</outline>
				<outline text=".concord .concord-node .concord-wrapper .concord-text{">
					<outline text="cursor: text;"/>
					<outline text="min-height: 20px;"/>
					<outline text="line-height: 20px;"/>
					<outline text="/* float: left; */"/>
					<outline text="display: inline-block;"/>
					<outline text="outline: none !important;"/>
					<outline text="font-family: Geneva, Arial;"/>
					<outline text="font-size: 12pt;"/>
					<outline text="color: #000;"/>
					<outline text="min-width: 10px;"/>
					<outline text="white-space: pre-wrap;"/>
					<outline text="}"/>
					</outline>
				<outline text=".concord.dragging .concord-node .concord-wrapper .concord-text{">
					<outline text="cursor: pointer;"/>
					<outline text="}"/>
					</outline>
				<outline text=".concord.readonly .concord-node .concord-wrapper .concord-text{">
					<outline text="cursor: default !important;"/>
					<outline text="}"/>
					</outline>
				<outline text=".concord .concord-node.selected &gt; .concord-wrapper{">
					<outline text="background-color: #000;"/>
					<outline text="padding-right: 2px;"/>
					<outline text="}"/>
					</outline>
				<outline text=".concord .concord-node.selected &gt; .concord-wrapper .concord-text{">
					<outline text="color: #fff;"/>
					<outline text="}"/>
					</outline>
				<outline text=".concord .concord-node.collapsed &gt; ol{">
					<outline text="display: none;"/>
					<outline text="}"/>
					</outline>
				<outline text=".concord.dragging{">
					<outline text="cursor: pointer !important;"/>
					<outline text="}"/>
					<outline text="#flip form{"/>
					<outline text="display: inline;"/>
					<outline text="}"/>
					</outline>
				<outline text=".concord-text a, .concord-text a:visited{">
					<outline text="cursor: pointer;"/>
					<outline text="}"/>
					</outline>
				<outline text=".concord-node.selected &gt; .concord-wrapper .concord-text a, .concord-node.selected &gt; .concord-wrapper .concord-text a:visited{">
					<outline text="color: yellow;"/>
					<outline text="}"/>
					</outline>
				<outline text=".ui-loader-default{">
					<outline text="display: none;"/>
					<outline text="}"/>
					</outline>
				<outline text=".icon-wordpress {">
					<outline text="min-width: 20px;"/>
					<outline text="background: url('http://static.smallpicture.com/concord-assets/wordpress128.png') no-repeat;"/>
					<outline text="background-size: 100% auto;"/>
					<outline text="}"/>
					</outline>
				<outline text="/** FONT AWESOME STYLES **/">
					<outline text="li [class^=&quot;icon-&quot;], .nav li [class^=&quot;icon-&quot;], li [class*=&quot; icon-&quot;], .nav li [class*=&quot; icon-&quot;] {">
						<outline text="display: inline-block;"/>
						<outline text="width: 1.25em;"/>
						<outline text="text-align: center;"/>
						<outline text="}"/>
						</outline>
					<outline text="a [class^=&quot;icon-&quot;], a [class*=&quot; icon-&quot;] {">
						<outline text="display: inline-block;"/>
						<outline text="}"/>
						</outline>
					<outline text=""/>
					<outline text="li [class^=&quot;fa-&quot;], .nav li [class^=&quot;fa-&quot;], li [class*=&quot; fa-&quot;], .nav li [class*=&quot; fa-&quot;] {">
						<outline text="display: inline-block;"/>
						<outline text="width: 1.25em;"/>
						<outline text="text-align: center;"/>
						<outline text="}"/>
						</outline>
					<outline text="a [class^=&quot;fa-&quot;], a [class*=&quot; fa-&quot;] {">
						<outline text="display: inline-block;"/>
						<outline text="}"/>
						</outline>
					</outline>
				</outline>
			<outline text="concordutils.js">
				<outline text="// Copyright 2013, Small Picture, Inc."/>
				<outline text="var appTypeIcons = {" created="Fri, 25 Jan 2013 17:11:33 GMT" pgfnum="17654">
					<outline text="&quot;blogpost&quot;: &quot;file-text-alt&quot;," created="Fri, 25 Jan 2013 17:11:39 GMT" pgfnum="17656"/>
					<outline text="&quot;essay&quot;: &quot;file-text-alt&quot;, //2/11/13 by DW" isComment="true" created="Fri, 25 Jan 2013 17:11:39 GMT" pgfnum="17656"/>
					<outline text="&quot;code&quot;: &quot;laptop&quot;," created="Fri, 25 Jan 2013 17:11:39 GMT" pgfnum="17656"/>
					<outline text="&quot;directory&quot;: &quot;folder-open-alt&quot;," isComment="true" created="Fri, 25 Jan 2013 17:11:39 GMT" pgfnum="17656"/>
					<outline text="&quot;discusstree&quot;: &quot;comments&quot;," isComment="true" created="Fri, 25 Jan 2013 17:11:39 GMT" pgfnum="17656"/>
					<outline text="&quot;home&quot;: &quot;home&quot;," isComment="true" created="Fri, 25 Jan 2013 17:11:39 GMT" pgfnum="17656"/>
					<outline text="&quot;html&quot;: &quot;file-text-alt&quot;," created="Fri, 25 Jan 2013 17:11:39 GMT" pgfnum="17656"/>
					<outline text="&quot;icon-comment&quot;: &quot;comment-alt&quot;, //2/16/13 by DW" isComment="true" created="Sun, 17 Feb 2013 04:05:25 GMT" pgfnum="18850"/>
					<outline text="&quot;icon-star&quot;: &quot;star-empty&quot;, //2/16/13 by DW" isComment="true" created="Sun, 17 Feb 2013 04:05:25 GMT" pgfnum="18850"/>
					<outline text="&quot;icon-time&quot;: &quot;time&quot;, //2/16/13 by DW" isComment="true" created="Sun, 17 Feb 2013 04:05:25 GMT" pgfnum="18850"/>
					<outline text="&quot;icon-user&quot;: &quot;user&quot;, //2/16/13 by DW" isComment="true" created="Sun, 17 Feb 2013 04:05:25 GMT" pgfnum="18850"/>
					<outline text="&quot;include&quot;: &quot;share-alt&quot;, //5/19/13 by DW" created="Fri, 25 Jan 2013 17:11:39 GMT" pgfnum="17656"/>
					<outline text="&quot;index&quot;: &quot;file-text-alt&quot;," created="Fri, 25 Jan 2013 17:11:39 GMT" pgfnum="17656"/>
					<outline text="&quot;link&quot;: &quot;bookmark-empty&quot;," created="Fri, 25 Jan 2013 17:11:39 GMT" pgfnum="17656"/>
					<outline text="&quot;outline&quot;: &quot;file-text-alt&quot;," created="Fri, 25 Jan 2013 17:11:39 GMT" pgfnum="17656"/>
					<outline text="&quot;photo&quot;: &quot;camera&quot;," created="Fri, 25 Jan 2013 17:11:39 GMT" pgfnum="17656"/>
					<outline text="&quot;presentation&quot;: &quot;file-text-alt&quot;," created="Fri, 25 Jan 2013 17:11:39 GMT" pgfnum="17656"/>
					<outline text="&quot;redirect&quot;: &quot;refresh&quot;," created="Fri, 25 Jan 2013 17:11:39 GMT" pgfnum="17656"/>
					<outline text="&quot;river&quot;: &quot;file-text-alt&quot;," created="Fri, 25 Jan 2013 17:11:39 GMT" pgfnum="17656"/>
					<outline text="&quot;rss&quot;: &quot;rss&quot;," created="Fri, 25 Jan 2013 17:11:39 GMT" pgfnum="17656"/>
					<outline text="&quot;tabs&quot;: &quot;file-text-alt&quot;," created="Fri, 25 Jan 2013 17:11:39 GMT" pgfnum="17656"/>
					<outline text="&quot;thread&quot;: &quot;comments&quot;," created="Fri, 25 Jan 2013 17:11:39 GMT" pgfnum="17656"/>
					<outline text="&quot;thumblist&quot;: &quot;th&quot;," created="Fri, 25 Jan 2013 17:11:39 GMT" pgfnum="17656"/>
					<outline text="&quot;profile&quot;: &quot;user&quot;, //5/14/13 by DW" created="Tue, 14 May 2013 17:37:15 GMT" pgfnum="23859"/>
					<outline text="&quot;calendar&quot;: &quot;calendar&quot;, //6/3/13 by DW" created="Tue, 14 May 2013 17:37:15 GMT" pgfnum="23859"/>
					<outline text="&quot;markdown&quot;: &quot;file-text-alt&quot;, //6/3/13 by DW" created="Tue, 14 May 2013 17:37:15 GMT" pgfnum="23859"/>
					<outline text="&quot;tweet&quot;: &quot;twitter&quot;, //6/10/13 by DW" created="Mon, 10 Jun 2013 23:13:05 GMT" pgfnum="25693"/>
					<outline text="&quot;metaWeblogPost&quot;: &quot;file-text-alt&quot;" created="Fri, 25 Jan 2013 21:54:05 GMT" pgfnum="17670"/>
					<outline text="}" created="Fri, 25 Jan 2013 17:11:36 GMT" pgfnum="17655"/>
					</outline>
				<outline text="var initialOpmltext = " created="Sun, 17 Feb 2013 16:05:01 GMT" pgfnum="18855">
					<outline text="&quot;&lt;?xml version=\&quot;1.0\&quot; encoding=\&quot;ISO-8859-1\&quot;?&gt;&lt;opml version=\&quot;2.0\&quot;&gt;&lt;head&gt;&lt;title&gt;Untitled&lt;/title&gt;&lt;/head&gt;&lt;body&gt;&lt;outline text=\&quot;\&quot;/&gt;&lt;/body&gt;&lt;/opml&gt;&quot;;" created="Sun, 17 Feb 2013 16:55:11 GMT" pgfnum="18868"/>
					</outline>
				<outline text="var defaultUtilsOutliner = &quot;#outliner&quot;; " created="Sat, 02 Mar 2013 20:17:05 GMT" pgfnum="19549"/>
				<outline text="//op glue routines" created="Wed, 23 Jan 2013 15:02:31 GMT" pgfnum="17524">
					<outline text="function opUndo () {" created="Thu, 24 Jan 2013 15:32:16 GMT" pgfnum="17648">
						<outline text="return ($(defaultUtilsOutliner).concord ().op.undo ())"/>
						<outline text="}" created="Thu, 24 Jan 2013 15:32:28 GMT" pgfnum="17651"/>
						</outline>
					<outline text="function opCut () {" created="Thu, 24 Jan 2013 15:32:16 GMT" pgfnum="17648">
						<outline text="return ($(defaultUtilsOutliner).concord ().op.cut ())"/>
						<outline text="}" created="Thu, 24 Jan 2013 15:32:28 GMT" pgfnum="17651"/>
						</outline>
					<outline text="function opCopy () {" created="Thu, 24 Jan 2013 15:32:16 GMT" pgfnum="17648">
						<outline text="return ($(defaultUtilsOutliner).concord ().op.copy ())"/>
						<outline text="}" created="Thu, 24 Jan 2013 15:32:28 GMT" pgfnum="17651"/>
						</outline>
					<outline text="function opPaste () {" created="Thu, 24 Jan 2013 15:32:16 GMT" pgfnum="17648">
						<outline text="return ($(defaultUtilsOutliner).concord ().op.paste ())"/>
						<outline text="}" created="Thu, 24 Jan 2013 15:32:28 GMT" pgfnum="17651"/>
						</outline>
					<outline text="function opReorg (dir, count) {" created="Fri, 18 Jan 2013 15:14:24 GMT" pgfnum="17343">
						<outline text="return ($(defaultUtilsOutliner).concord().op.reorg (dir, count));"/>
						<outline text="}" created="Fri, 18 Jan 2013 15:14:31 GMT" pgfnum="17344"/>
						</outline>
					<outline text="function opSetFont (font, fontsize, lineheight) {">
						<outline text="$(defaultUtilsOutliner).concord().prefs({&quot;outlineFont&quot;: font, &quot;outlineFontSize&quot;: fontsize, &quot;outlineLineHeight&quot;: lineheight});"/>
						<outline text="}"/>
						</outline>
					<outline text="function opPromote () {">
						<outline text="$(defaultUtilsOutliner).concord().op.promote();"/>
						<outline text="}"/>
						</outline>
					<outline text="function opDemote () {">
						<outline text="$(defaultUtilsOutliner).concord().op.demote();"/>
						<outline text="}"/>
						</outline>
					<outline text="function opBold () {" created="Sun, 20 Jan 2013 22:40:16 GMT" pgfnum="17427">
						<outline text="return ($(defaultUtilsOutliner).concord().op.bold ());"/>
						<outline text="}" created="Sun, 20 Jan 2013 22:40:24 GMT" pgfnum="17428"/>
						</outline>
					<outline text="function opItalic () {" created="Sun, 20 Jan 2013 22:40:16 GMT" pgfnum="17427">
						<outline text="return ($(defaultUtilsOutliner).concord().op.italic ());"/>
						<outline text="}" created="Sun, 20 Jan 2013 22:40:24 GMT" pgfnum="17428"/>
						</outline>
					<outline text="function opLink (url) {" created="Sun, 20 Jan 2013 22:40:16 GMT" pgfnum="17427">
						<outline text="return ($(defaultUtilsOutliner).concord().op.link (url));"/>
						<outline text="}" created="Sun, 20 Jan 2013 22:40:24 GMT" pgfnum="17428"/>
						</outline>
					<outline text="function opSetTextMode (fltextmode) {">
						<outline text="$(defaultUtilsOutliner).concord ().op.setTextMode (fltextmode);"/>
						<outline text="}"/>
						</outline>
					<outline text="function opInTextMode () {">
						<outline text="return ($(defaultUtilsOutliner).concord ().op.inTextMode ());"/>
						<outline text="}"/>
						</outline>
					<outline text="function opGetAtts () {">
						<outline text="return $(defaultUtilsOutliner).concord().op.attributes.getAll();"/>
						<outline text="}"/>
						</outline>
					<outline text="function opGetOneAtt (name) {" created="Sun, 20 Jan 2013 22:40:16 GMT" pgfnum="17427">
						<outline text="return $(defaultUtilsOutliner).concord().op.attributes.getOne (name);"/>
						<outline text="}" created="Sun, 20 Jan 2013 22:40:24 GMT" pgfnum="17428"/>
						</outline>
					<outline text="function opHasAtt (name) {" created="Sun, 20 Jan 2013 22:40:16 GMT" pgfnum="17427">
						<outline text="return (opGetOneAtt (name) != undefined);" created="Mon, 11 Feb 2013 18:10:19 GMT" pgfnum="18538"/>
						<outline text="}" created="Sun, 20 Jan 2013 22:40:24 GMT" pgfnum="17428"/>
						</outline>
					<outline text="function opSetOneAtt (name, value) {" created="Sun, 20 Jan 2013 22:40:16 GMT" pgfnum="17427">
						<outline text="return $(defaultUtilsOutliner).concord().op.attributes.setOne (name, value);"/>
						<outline text="}" created="Sun, 20 Jan 2013 22:40:24 GMT" pgfnum="17428"/>
						</outline>
					<outline text="function opSetAtts (atts) {">
						<outline text="return $(defaultUtilsOutliner).concord().op.attributes.setGroup(atts);"/>
						<outline text="}"/>
						</outline>
					<outline text="function opAddAtts (atts) {">
						<outline text="return $(defaultUtilsOutliner).concord().op.attributes.addGroup(atts);"/>
						<outline text="}"/>
						</outline>
					<outline text="function opSetStyle (css) {">
						<outline text="return $(defaultUtilsOutliner).concord ().op.setStyle (css);"/>
						<outline text="}"/>
						</outline>
					<outline text="function opGetLineText () {" created="Wed, 09 Jan 2013 14:39:48 GMT" pgfnum="16925">
						<outline text="return ($(defaultUtilsOutliner).concord().op.getLineText());" created="Tue, 08 Jan 2013 17:33:19 GMT" pgfnum="16882"/>
						<outline text="}" created="Wed, 09 Jan 2013 14:39:55 GMT" pgfnum="16926"/>
						</outline>
					<outline text="function opExpand () {" created="Wed, 09 Jan 2013 14:39:48 GMT" pgfnum="16925">
						<outline text="return ($(defaultUtilsOutliner).concord().op.expand());" created="Tue, 08 Jan 2013 17:33:19 GMT" pgfnum="16882"/>
						<outline text="}" created="Wed, 09 Jan 2013 14:39:55 GMT" pgfnum="16926"/>
						</outline>
					<outline text="function opExpandAllLevels () {" created="Wed, 09 Jan 2013 14:39:48 GMT" pgfnum="16925">
						<outline text="return ($(defaultUtilsOutliner).concord().op.expandAllLevels());" created="Tue, 08 Jan 2013 17:33:19 GMT" pgfnum="16882"/>
						<outline text="}" created="Wed, 09 Jan 2013 14:39:55 GMT" pgfnum="16926"/>
						</outline>
					<outline text="function opExpandEverything () {" created="Wed, 09 Jan 2013 14:39:48 GMT" pgfnum="16925">
						<outline text="return ($(defaultUtilsOutliner).concord().op.fullExpand());" created="Tue, 08 Jan 2013 17:33:19 GMT" pgfnum="16882"/>
						<outline text="}" created="Wed, 09 Jan 2013 14:39:55 GMT" pgfnum="16926"/>
						</outline>
					<outline text="function opCollapse () {" created="Wed, 09 Jan 2013 14:39:48 GMT" pgfnum="16925">
						<outline text="return ($(defaultUtilsOutliner).concord().op.collapse());" created="Tue, 08 Jan 2013 17:33:19 GMT" pgfnum="16882"/>
						<outline text="}" created="Wed, 09 Jan 2013 14:39:55 GMT" pgfnum="16926"/>
						</outline>
					<outline text="function opIsComment () {" created="Wed, 09 Jan 2013 14:39:48 GMT" pgfnum="16925">
						<outline text="return ($(defaultUtilsOutliner).concord ().script.isComment ());" created="Tue, 08 Jan 2013 17:33:19 GMT" pgfnum="16882"/>
						<outline text="}" created="Wed, 09 Jan 2013 14:39:55 GMT" pgfnum="16926"/>
						</outline>
					<outline text="function opMakeComment () {" created="Wed, 09 Jan 2013 14:39:48 GMT" pgfnum="16925">
						<outline text="return ($(defaultUtilsOutliner).concord ().script.makeComment ());" created="Tue, 08 Jan 2013 17:33:19 GMT" pgfnum="16882"/>
						<outline text="}" created="Wed, 09 Jan 2013 14:39:55 GMT" pgfnum="16926"/>
						</outline>
					<outline text="function opUnComment () {" created="Wed, 09 Jan 2013 14:39:48 GMT" pgfnum="16925">
						<outline text="return ($(defaultUtilsOutliner).concord ().script.unComment ());" created="Tue, 08 Jan 2013 17:33:19 GMT" pgfnum="16882"/>
						<outline text="}" created="Wed, 09 Jan 2013 14:39:55 GMT" pgfnum="16926"/>
						</outline>
					<outline text="function opToggleComment () {" created="Fri, 01 Feb 2013 22:33:44 GMT" pgfnum="18078">
						<outline text="if (opIsComment ()) {">
							<outline text="opUnComment ();" created="Fri, 01 Feb 2013 22:36:29 GMT" pgfnum="18083"/>
							<outline text="}" created="Fri, 01 Feb 2013 22:34:57 GMT" pgfnum="18080"/>
							</outline>
						<outline text="else {" created="Fri, 01 Feb 2013 22:35:00 GMT" pgfnum="18081">
							<outline text="opMakeComment ();" created="Fri, 01 Feb 2013 22:36:29 GMT" pgfnum="18083"/>
							<outline text="}" created="Fri, 01 Feb 2013 22:35:02 GMT" pgfnum="18082"/>
							</outline>
						<outline text="}" created="Fri, 01 Feb 2013 22:33:48 GMT" pgfnum="18079"/>
						</outline>
					<outline text="function opCollapseEverything () {" created="Wed, 09 Jan 2013 14:39:48 GMT" pgfnum="16925">
						<outline text="return ($(defaultUtilsOutliner).concord().op.fullCollapse());" created="Tue, 08 Jan 2013 17:33:19 GMT" pgfnum="16882"/>
						<outline text="}" created="Wed, 09 Jan 2013 14:39:55 GMT" pgfnum="16926"/>
						</outline>
					<outline text="function opInsert (s, dir) {" created="Wed, 09 Jan 2013 14:39:48 GMT" pgfnum="16925">
						<outline text="return ($(defaultUtilsOutliner).concord().op.insert(s, dir));" created="Tue, 08 Jan 2013 17:33:19 GMT" pgfnum="16882"/>
						<outline text="}" created="Wed, 09 Jan 2013 14:39:55 GMT" pgfnum="16926"/>
						</outline>
					<outline text="function opInsertImage (url) {" created="Mon, 11 Feb 2013 22:22:59 GMT" pgfnum="18565">
						<outline text="return ($(defaultUtilsOutliner).concord ().op.insertImage (url));" created="Tue, 08 Jan 2013 17:33:19 GMT" pgfnum="16882"/>
						<outline text="}" created="Mon, 11 Feb 2013 22:23:06 GMT" pgfnum="18566"/>
						</outline>
					<outline text="function opSetLineText (s) {" created="Wed, 09 Jan 2013 14:39:48 GMT" pgfnum="16925">
						<outline text="return ($(defaultUtilsOutliner).concord().op.setLineText(s));" created="Tue, 08 Jan 2013 17:33:19 GMT" pgfnum="16882"/>
						<outline text="}" created="Wed, 09 Jan 2013 14:39:55 GMT" pgfnum="16926"/>
						</outline>
					<outline text="function opDeleteSubs () {" created="Wed, 09 Jan 2013 14:39:48 GMT" pgfnum="16925">
						<outline text="return ($(defaultUtilsOutliner).concord().op.deleteSubs());" created="Tue, 08 Jan 2013 17:33:19 GMT" pgfnum="16882"/>
						<outline text="}" created="Wed, 09 Jan 2013 14:39:55 GMT" pgfnum="16926"/>
						</outline>
					<outline text="function opCountSubs () {" created="Wed, 09 Jan 2013 14:39:48 GMT" pgfnum="16925">
						<outline text="return ($(defaultUtilsOutliner).concord().op.countSubs());" created="Tue, 08 Jan 2013 17:33:19 GMT" pgfnum="16882"/>
						<outline text="}" created="Wed, 09 Jan 2013 14:39:55 GMT" pgfnum="16926"/>
						</outline>
					<outline text="function opHasSubs () { " created="Wed, 09 Jan 2013 14:39:48 GMT" pgfnum="16925">
						<outline text="return (opCountSubs () &gt; 0);" created="Tue, 08 Jan 2013 17:33:19 GMT" pgfnum="16882"/>
						<outline text="}" created="Wed, 09 Jan 2013 14:39:55 GMT" pgfnum="16926"/>
						</outline>
					<outline text="function opSubsExpanded () {" created="Wed, 09 Jan 2013 14:39:48 GMT" pgfnum="16925">
						<outline text="return ($(defaultUtilsOutliner).concord().op.subsExpanded());" created="Tue, 08 Jan 2013 17:33:19 GMT" pgfnum="16882"/>
						<outline text="}" created="Wed, 09 Jan 2013 14:39:55 GMT" pgfnum="16926"/>
						</outline>
					<outline text="function opGo (dir, ct) {" created="Wed, 09 Jan 2013 14:39:48 GMT" pgfnum="16925">
						<outline text="return ($(defaultUtilsOutliner).concord().op.go(dir, ct));" created="Tue, 08 Jan 2013 17:33:19 GMT" pgfnum="16882"/>
						<outline text="}" created="Wed, 09 Jan 2013 14:39:55 GMT" pgfnum="16926"/>
						</outline>
					<outline text="function opFirstSummit () {" created="Wed, 30 Jan 2013 19:40:12 GMT" pgfnum="17940">
						<outline text="opGo (left, 32767);" created="Wed, 30 Jan 2013 19:40:23 GMT" pgfnum="17942"/>
						<outline text="opGo (up, 32767);" created="Wed, 30 Jan 2013 19:42:47 GMT" pgfnum="17943"/>
						<outline text="}" created="Wed, 30 Jan 2013 19:40:18 GMT" pgfnum="17941"/>
						</outline>
					<outline text="function opXmlToOutline (xmltext) {" created="Wed, 16 Jan 2013 00:07:08 GMT" pgfnum="17211">
						<outline text="return ($(defaultUtilsOutliner).concord ().op.xmlToOutline (xmltext));" created="Tue, 08 Jan 2013 17:33:19 GMT" pgfnum="16882"/>
						<outline text="}" created="Wed, 16 Jan 2013 00:07:23 GMT" pgfnum="17212"/>
						</outline>
					<outline text="function opImportXml (url) { " isComment="true" created="Wed, 16 Jan 2013 00:07:08 GMT" pgfnum="17211">
						<outline text="return ($(defaultUtilsOutliner).concord ().import (url));" created="Tue, 08 Jan 2013 17:33:19 GMT" pgfnum="16882"/>
						<outline text="}" created="Wed, 16 Jan 2013 00:07:23 GMT" pgfnum="17212"/>
						</outline>
					<outline text="function opInsertXml (xmltext, dir) { " created="Thu, 14 Feb 2013 23:03:02 GMT" pgfnum="18679">
						<outline text="return ($(defaultUtilsOutliner).concord ().op.insertXml (xmltext, dir));"/>
						<outline text="}" created="Thu, 14 Feb 2013 23:03:02 GMT" pgfnum="18680"/>
						</outline>
					<outline text="function opOutlineToXml (ownerName, ownerEmail, ownerId) {" created="Wed, 16 Jan 2013 00:07:08 GMT" pgfnum="17211">
						<outline text="return ($(defaultUtilsOutliner).concord ().op.outlineToXml (ownerName, ownerEmail, ownerId));" created="Tue, 08 Jan 2013 17:33:19 GMT" pgfnum="16882"/>
						<outline text="}" created="Wed, 16 Jan 2013 00:07:23 GMT" pgfnum="17212"/>
						</outline>
					<outline text="function opCursorToXml () {" created="Wed, 16 Jan 2013 00:07:08 GMT" pgfnum="17211">
						<outline text="return ($(defaultUtilsOutliner).concord ().op.cursorToXml ());" created="Tue, 08 Jan 2013 17:33:19 GMT" pgfnum="16882"/>
						<outline text="}" created="Wed, 16 Jan 2013 00:07:23 GMT" pgfnum="17212"/>
						</outline>
					<outline text="function opSetTitle (title) {" created="Wed, 16 Jan 2013 00:07:08 GMT" pgfnum="17211">
						<outline text="return ($(defaultUtilsOutliner).concord ().op.setTitle (title));" created="Tue, 08 Jan 2013 17:33:19 GMT" pgfnum="16882"/>
						<outline text="}" created="Wed, 16 Jan 2013 00:07:23 GMT" pgfnum="17212"/>
						</outline>
					<outline text="function opGetTitle () {" created="Wed, 16 Jan 2013 00:07:08 GMT" pgfnum="17211">
						<outline text="return ($(defaultUtilsOutliner).concord ().op.getTitle ());" created="Tue, 08 Jan 2013 17:33:19 GMT" pgfnum="16882"/>
						<outline text="}" created="Wed, 16 Jan 2013 00:07:23 GMT" pgfnum="17212"/>
						</outline>
					<outline text="function opHasChanged () {" created="Wed, 16 Jan 2013 00:07:08 GMT" pgfnum="17211">
						<outline text="return ($(defaultUtilsOutliner).concord ().op.changed ());" created="Tue, 08 Jan 2013 17:33:19 GMT" pgfnum="16882"/>
						<outline text="}" created="Wed, 16 Jan 2013 00:07:23 GMT" pgfnum="17212"/>
						</outline>
					<outline text="function opClearChanged () {" created="Wed, 16 Jan 2013 00:07:08 GMT" pgfnum="17211">
						<outline text="return ($(defaultUtilsOutliner).concord ().op.clearChanged ());" created="Tue, 08 Jan 2013 17:33:19 GMT" pgfnum="16882"/>
						<outline text="}" created="Wed, 16 Jan 2013 00:07:23 GMT" pgfnum="17212"/>
						</outline>
					<outline text="function opMarkChanged () { " created="Wed, 16 Jan 2013 00:07:08 GMT" pgfnum="17211">
						<outline text="return ($(defaultUtilsOutliner).concord ().op.markChanged ());" created="Tue, 08 Jan 2013 17:33:19 GMT" pgfnum="16882"/>
						<outline text="}" created="Wed, 16 Jan 2013 00:07:23 GMT" pgfnum="17212"/>
						</outline>
					<outline text="function opRedraw () {" created="Wed, 16 Jan 2013 00:07:08 GMT" pgfnum="17211">
						<outline text="return ($(defaultUtilsOutliner).concord ().op.redraw ());" created="Tue, 08 Jan 2013 17:33:19 GMT" pgfnum="16882"/>
						<outline text="}" created="Wed, 16 Jan 2013 00:07:23 GMT" pgfnum="17212"/>
						</outline>
					<outline text="function opVisitAll (callback) { //9/13/13 by DW" created="Fri, 13 Sep 2013 01:18:52 GMT" pgfnum="30210">
						<outline text="return ($(defaultUtilsOutliner).concord ().op.visitAll (callback));"/>
						<outline text="}" created="Fri, 13 Sep 2013 21:53:43 GMT" pgfnum="30231"/>
						</outline>
					<outline text="function opWipe () { //9/14/13 by DW" created="Fri, 13 Sep 2013 01:18:52 GMT" pgfnum="30210">
						<outline text="return ($(defaultUtilsOutliner).concord ().op.wipe ());"/>
						<outline text="}" created="Fri, 13 Sep 2013 21:53:43 GMT" pgfnum="30231"/>
						</outline>
					</outline>
				<outline text="//readText" created="Fri, 13 Sep 2013 01:17:09 GMT" pgfnum="30207">
					<outline text="var readHttpUrl = &quot;http://httpproxy.scripting.com/httpReadUrl&quot;;" created="Fri, 18 Jan 2013 16:51:46 GMT" pgfnum="17368"/>
					<outline text="" created="Fri, 13 Sep 2013 01:17:50 GMT" pgfnum="30209"/>
					<outline text="function readText (url, callback, op, flAcceptOpml) {" created="Wed, 16 Jan 2013 16:05:26 GMT" pgfnum="17240">
						<outline text="var headerval = {};" created="Tue, 14 May 2013 14:32:26 GMT" pgfnum="23844"/>
						<outline text="if ((flAcceptOpml != undefined) &amp;&amp; flAcceptOpml) { //5/14/13 by DW" created="Tue, 14 May 2013 14:32:26 GMT" pgfnum="23845">
							<outline text="headerval = {&quot;Accept&quot;: &quot;text/x-opml&quot;};" created="Tue, 14 May 2013 14:34:16 GMT" pgfnum="23849"/>
							<outline text="}" created="Tue, 14 May 2013 14:32:34 GMT" pgfnum="23848"/>
							</outline>
						<outline text="var jxhr = $.ajax ({ ">
							<outline text="url: readHttpUrl + &quot;?url=&quot; + encodeURIComponent (url) + &quot;&amp;type=&quot; + encodeURIComponent (&quot;text/plain&quot;),"/>
							<outline text="dataType: &quot;text&quot;, "/>
							<outline text="headers: headerval," created="Tue, 14 May 2013 14:35:06 GMT" pgfnum="23850"/>
							<outline text="timeout: 30000 "/>
							<outline text="}) "/>
							</outline>
						<outline text=".success (function (data, status) { ">
							<outline text="callback (data, op);" created="Wed, 16 Jan 2013 16:10:05 GMT" pgfnum="17244"/>
							<outline text="}) "/>
							</outline>
						<outline text=".error (function (status) { ">
							<outline text="httpReadStatus = status;" created="Sun, 13 Jan 2013 14:34:21 GMT" pgfnum="17098"/>
							<outline text="});"/>
							</outline>
						<outline text="}" created="Wed, 16 Jan 2013 16:05:35 GMT" pgfnum="17241"/>
						</outline>
					</outline>
				<outline text="//string routines" created="Sat, 14 Sep 2013 19:01:00 GMT" pgfnum="30291">
					<outline text="function filledString (s, ct) {" created="Wed, 24 Jul 2013 20:47:25 GMT" pgfnum="28252">
						<outline text="var theString = &quot;&quot;;" created="Fri, 01 Feb 2013 23:50:54 GMT" pgfnum="18102"/>
						<outline text="for (var i = 0; i &lt; ct; i++) {" created="Wed, 23 Jan 2013 19:07:25 GMT" pgfnum="17611">
							<outline text="theString += s;" created="Fri, 01 Feb 2013 23:51:01 GMT" pgfnum="18103"/>
							<outline text="}" created="Wed, 24 Jul 2013 20:50:47 GMT" pgfnum="28255"/>
							</outline>
						<outline text="return (theString);" created="Fri, 01 Feb 2013 23:51:24 GMT" pgfnum="18107"/>
						<outline text="}" created="Wed, 24 Jul 2013 20:47:33 GMT" pgfnum="28253"/>
						</outline>
					<outline text="function multipleReplaceAll  (s, adrTable, flCaseSensitive, startCharacters, endCharacters) {">
						<outline text="if(flCaseSensitive===undefined){">
							<outline text="flCaseSensitive = false;"/>
							<outline text="}"/>
							</outline>
						<outline text="if(startCharacters===undefined){">
							<outline text="startCharacters=&quot;&quot;;"/>
							<outline text="}"/>
							</outline>
						<outline text="if(endCharacters===undefined){">
							<outline text="endCharacters=&quot;&quot;;"/>
							<outline text="}"/>
							</outline>
						<outline text="for( var item in adrTable){">
							<outline text="var replacementValue = adrTable[item];"/>
							<outline text="var regularExpressionModifier = &quot;g&quot;;"/>
							<outline text="if(!flCaseSensitive){">
								<outline text="regularExpressionModifier = &quot;gi&quot;;"/>
								<outline text="}"/>
								</outline>
							<outline text="var regularExpressionString = (startCharacters+item+endCharacters).replace(/([.?*+^$[\]\\(){}|-])/g, &quot;\\$1&quot;); "/>
							<outline text="var regularExpression = new RegExp(regularExpressionString, regularExpressionModifier);"/>
							<outline text="s = s.replace(regularExpression, replacementValue);"/>
							<outline text="}"/>
							</outline>
						<outline text="return s;"/>
						<outline text="};"/>
						</outline>
					</outline>
				<outline text="//misc" created="Sat, 14 Sep 2013 19:01:25 GMT" pgfnum="30293">
					<outline text="function secondsSince (when) {" created="Fri, 01 Feb 2013 22:40:26 GMT" pgfnum="18084">
						<outline text="var now = new Date ();" created="Fri, 01 Feb 2013 00:33:21 GMT" pgfnum="18031"/>
						<outline text="return ((now - when) / 1000);" created="Fri, 01 Feb 2013 22:41:19 GMT" pgfnum="18089"/>
						<outline text="}" created="Thu, 12 Sep 2013 17:41:59 GMT" pgfnum="30161"/>
						</outline>
					</outline>
				</outline>
			<outline text="archive/readme2013.md" isComment="true">
				<outline text="### Outliners everywhere!" created="Mon, 16 Sep 2013 15:14:06 GMT" pgfnum="30332">
					<outline text="I've long felt that every operating system and web browser should have a great outliner baked-in.  " created="Mon, 16 Sep 2013 15:14:11 GMT" pgfnum="30333"/>
					<outline text="If you were going to try to do that today, you'd release it under the GPL written in JavaScript. " created="Mon, 16 Sep 2013 16:06:34 GMT" pgfnum="30322"/>
					<outline text="That's exactly what Concord is. " created="Mon, 16 Sep 2013 16:07:15 GMT" pgfnum="30323"/>
					<outline text="&lt;i&gt;&lt;a href=&quot;http://scripting.com/2013/09/16/concordOurGplOutliner&quot;&gt;Dave Winer&lt;/a&gt;, 9/16/13.&lt;/i&gt;" created="Mon, 16 Sep 2013 16:05:43 GMT" pgfnum="30321"/>
					</outline>
				<outline text="### Concord is an outliner" created="Sat, 14 Sep 2013 15:31:18 GMT" pgfnum="30273">
					<outline text="&lt;a href=&quot;http://docs.fargo.io/outlinerHowto&quot;&gt;An outliner&lt;/a&gt; is a text editor that organizes information in a hierarchy, allowing users to control the level of detail and to reorganize according to structure. Your notes can have full detail, yet be organized so a casual reader can get a quick overview. Outlining is a great way for teams to organize work. " created="Sat, 14 Sep 2013 15:31:22 GMT" pgfnum="30274"/>
					</outline>
				<outline text="### Written in JavaScript" created="Sat, 14 Sep 2013 15:31:46 GMT" pgfnum="30275">
					<outline text="It's a jQuery plug-in that implements a full-featured outliner that you can drop into other applications with a minimum of work. " created="Wed, 11 Sep 2013 23:43:14 GMT" pgfnum="30137"/>
					</outline>
				<outline text="### It's the core of Fargo" created="Sat, 14 Sep 2013 15:33:47 GMT" pgfnum="30276">
					<outline text="&lt;a href=&quot;http://fargo.io/&quot;&gt;Fargo&lt;/a&gt; is our browser-based outliner that hooks into Dropbox.  " created="Sat, 14 Sep 2013 15:33:52 GMT" pgfnum="30277"/>
					<outline text="Concord is the outlining engine in Fargo." created="Sat, 14 Sep 2013 15:34:39 GMT" pgfnum="30279"/>
					</outline>
				<outline text="### GPL-licensed" created="Sat, 14 Sep 2013 15:37:42 GMT" pgfnum="30283">
					<outline text="&lt;a href=&quot;https://github.com/scripting/concord&quot;&gt;Concord&lt;/a&gt; is licensed under the GPL because outliners are an incredibly useful way to edit structured information. We want Concord to be able to fill every conceivable need for outlining technology. " created="Wed, 11 Sep 2013 23:44:29 GMT" pgfnum="30139"/>
					<outline text="Ideas include file systems, mailboxes, chatrooms, databases, documents, presentations, product plans, code, libraries, laws, systems of laws, contracts, rules, guidelines, principles, docs, manifestos, journals, blogs, etc. " created="Sat, 14 Sep 2013 15:38:43 GMT" pgfnum="30286"/>
					<outline text="Here's an important 11-minute &lt;a href=&quot;http://scripting.com/2013/09/17/importantPodcastAboutConcordGpl&quot;&gt;podcast&lt;/a&gt; about Concord and the GPL.  "/>
					</outline>
				<outline text="### Example 0: The bare minimum" created="Mon, 16 Sep 2013 13:32:57 GMT" pgfnum="30317">
					<outline text="This &lt;a href=&quot;https://github.com/scripting/concord/blob/master/example0/index.html&quot;&gt;example&lt;/a&gt; has the bare minimum to add an outliner to an existing app."/>
					<outline text="This saves developers the trouble of having to factor it out of Example 1, below." created="Tue, 17 Sep 2013 12:49:40 GMT" pgfnum="30324"/>
					<outline text="You can try it out &lt;a href=&quot;http://static.smallpicture.com/concord/example0/index.html&quot;&gt;here&lt;/a&gt;. " created="Mon, 16 Sep 2013 13:35:45 GMT" pgfnum="30320"/>
					</outline>
				<outline text="### Example 1: Hello Outliner" created="Wed, 11 Sep 2013 23:45:31 GMT" pgfnum="30140">
					<outline text="This &lt;a href=&quot;https://github.com/scripting/concord/tree/master/example1/index.html&quot;&gt;example&lt;/a&gt; is a functional outliner, with most of the capabilities of the Little Outliner app and the same basic approach. You edit a single outline, saved in local storage, so it's there when you come back to it, but only on that machine." created="Mon, 16 Sep 2013 13:34:27 GMT" pgfnum="30319"/>
					<outline text="It has a simple menubar, with menus containing Outliner commands, links to OPML documents you can view and edit, and links to docs." created="Mon, 16 Sep 2013 13:44:05 GMT" pgfnum="30321"/>
					<outline text="You can try it out &lt;a href=&quot;http://static.smallpicture.com/concord/example1/index.html&quot;&gt;here&lt;/a&gt;." created="Mon, 16 Sep 2013 13:35:45 GMT" pgfnum="30320"/>
					</outline>
				<outline text="### Example 2: Small Picture Reader" created="Wed, 11 Sep 2013 23:45:31 GMT" pgfnum="30140">
					<outline text="We've released the &lt;a href=&quot;https://github.com/scripting/concord/blob/master/example2/index.html&quot;&gt;source&lt;/a&gt; for &lt;a href=&quot;http://docs.fargo.io/fargo/reader&quot;&gt;Small Picture Reader&lt;/a&gt; under the GPL as part of the Concord release." created="Wed, 18 Sep 2013 15:15:07 GMT" pgfnum="30464"/>
					<outline text="This app provides a way to read any OPML file even if you aren't using an outliner." created="Wed, 18 Sep 2013 15:05:00 GMT" pgfnum="30461"/>
					<outline text="There's a command in Fargo that creates a link between the document you're editing and a reader version." created="Wed, 18 Sep 2013 15:05:41 GMT" pgfnum="30462"/>
					<outline text="If you want to run the app, &lt;a href=&quot;http://static.smallpicture.com/concord/example2/index.html&quot;&gt;click here&lt;/a&gt;." created="Wed, 18 Sep 2013 15:06:02 GMT" pgfnum="30463"/>
					</outline>
				<outline text="### Inaugural blog post" created="Mon, 16 Sep 2013 14:51:34 GMT" pgfnum="30330">
					<outline text="&lt;a href=&quot;http://scripting.com/2013/09/16/concordOurGplOutliner&quot;&gt;Here's the post&lt;/a&gt; I ran on Scripting News when Concord was publicly announced. It includes a link to a podcast." created="Mon, 16 Sep 2013 14:51:38 GMT" pgfnum="30331"/>
					</outline>
				<outline text="### Worknotes" created="Thu, 19 Sep 2013 11:57:18 GMT" pgfnum="30465">
					<outline text="I keep a log of work I do on Concord, in an &lt;a href=&quot;https://raw.github.com/scripting/concord/master/opml/worknotes.opml&quot;&gt;outline&lt;/a&gt; of course. " created="Thu, 19 Sep 2013 11:57:21 GMT" pgfnum="30466"/>
					<outline text="There's a &lt;a href=&quot;https://github.com/scripting/concord/blob/master/worknotes.md&quot;&gt;markdown rendering&lt;/a&gt; of the worknotes file. " created="Thu, 19 Sep 2013 12:08:11 GMT" pgfnum="30471"/>
					</outline>
				<outline text="### Community" created="Mon, 16 Sep 2013 13:44:55 GMT" pgfnum="30322">
					<outline text="We have a &lt;a href=&quot;https://groups.google.com/forum/?fromgroups#!forum/smallpicture-concord&quot;&gt;Google Group mail list&lt;/a&gt; for technical support." created="Mon, 16 Sep 2013 13:44:57 GMT" pgfnum="30323"/>
					</outline>
				</outline>
			<outline text="readme.md">
				<outline text="# Concord">
					<outline text="Concord is a JavaScript outliner written by Kyle Shank in 2013, maintained by Dave Winer since, GPL-licensed.  "/>
					<outline text="The user interface is keystroke and mouse-compatible with the Living Videotext outliners, ThinkTank, Ready and MORE, and the outliner built into UserLand Frontier and Radio UserLand. "/>
					<outline text="There's a new release in February 2020, the first since 2013. "/>
					<outline text="Concord is the core component of &lt;a href=&quot;http://littleoutliner.com/&quot;&gt;Little Outliner&lt;/a&gt; and numerous other of Dave's projects. "/>
					<outline text="Concord's native file format is &lt;a href=&quot;http://dev.opml.org/&quot;&gt;OPML&lt;/a&gt;."/>
					</outline>
				<outline text="### What's new?">
					<outline text="You can see the work notes &lt;a href=&quot;https://github.com/scripting/concord/blob/master/worknotes.md&quot;&gt;here&lt;/a&gt;. "/>
					<outline text="I've been adding features carefully and slowly over the years. "/>
					<outline text="The biggest change is that Concord is now managed using the same tools I use for all my other &lt;a href=&quot;https://github.com/scripting?tab=repositories&quot;&gt;projects&lt;/a&gt;, so it will be easier to publicly release new versions. "/>
					<outline text="The examples and writing on this site are from 2013, this update is a restoration of the original site, not a rewrite. "/>
					</outline>
				<outline text="### Concord is an outliner" created="Sat, 14 Sep 2013 15:31:18 GMT" pgfnum="30273">
					<outline text="&lt;a href=&quot;http://outlinerhowto.opml.org/&quot;&gt;An outliner&lt;/a&gt; is a text editor that organizes information in a hierarchy, allowing users to control the level of detail and to reorganize according to structure. Your notes can have full detail, yet be organized so a casual reader can get a quick overview. Outlining is a great way for teams to organize work. " created="Sat, 14 Sep 2013 15:31:22 GMT" pgfnum="30274"/>
					</outline>
				<outline text="### Written in JavaScript" created="Sat, 14 Sep 2013 15:31:46 GMT" pgfnum="30275">
					<outline text="It's a jQuery plug-in that implements a full-featured outliner that you can drop into other applications with a minimum of work. " created="Wed, 11 Sep 2013 23:43:14 GMT" pgfnum="30137"/>
					</outline>
				<outline text="### GPL-licensed" created="Sat, 14 Sep 2013 15:37:42 GMT" pgfnum="30283">
					<outline text="&lt;a href=&quot;https://github.com/scripting/concord&quot;&gt;Concord&lt;/a&gt; is licensed under the GPL because outliners are an incredibly useful way to edit structured information. We want Concord to be able to fill every conceivable need for outlining technology. " created="Wed, 11 Sep 2013 23:44:29 GMT" pgfnum="30139"/>
					<outline text="Ideas include file systems, mailboxes, chatrooms, databases, documents, presentations, product plans, code, libraries, laws, systems of laws, contracts, rules, guidelines, principles, docs, manifestos, journals, blogs, etc. " created="Sat, 14 Sep 2013 15:38:43 GMT" pgfnum="30286"/>
					<outline text="Here's an important 11-minute &lt;a href=&quot;http://scripting.com/2013/09/17/importantPodcastAboutConcordGpl&quot;&gt;podcast&lt;/a&gt; about Concord and the GPL.  "/>
					</outline>
				<outline text="### Tour of the repository">
					<outline text="&lt;a href=&quot;https://github.com/scripting/concord/blob/master/concord.js&quot;&gt;concord.js&lt;/a&gt; -- the JavaScript code for the outliner."/>
					<outline text="&lt;a href=&quot;https://github.com/scripting/concord/blob/master/concordstyles.css&quot;&gt;concordstyles.css&lt;/a&gt; -- styles for Concord outlines."/>
					<outline text="&lt;a href=&quot;https://github.com/scripting/concord/blob/master/concordutils.js&quot;&gt;concordutils.js&lt;/a&gt; -- utility routines for apps that include Concord. Everything here is optional, think of it as sample code, but the kind of stuff that likely will be in every app that uses Concord. concord.js does not include this file, but the example apps do. "/>
					<outline text="&lt;a href=&quot;https://github.com/scripting/concord/tree/master/libraries&quot;&gt;libraries&lt;/a&gt; -- Concord uses jQuery, bootstrap and Font Awesome. There are copies of each in the libraries folder. concord.js does not include these files, but the example apps do. "/>
					<outline text="&lt;a href=&quot;https://github.com/scripting/concord/tree/master/opml&quot;&gt;opml&lt;/a&gt; -- contains OPML source code for concord.js and the other files. OPML is the native file format for Concord, so you can open these files in the example apps. They are menu items in example1. "/>
					<outline text="&lt;a href=&quot;https://github.com/scripting/concord/tree/master/archive&quot;&gt;archive&lt;/a&gt; -- contains the readme file from the previous version. We may archive other things there in the future."/>
					</outline>
				<outline text="### Example 0: The bare minimum" created="Mon, 16 Sep 2013 13:32:57 GMT" pgfnum="30317">
					<outline text="This &lt;a href=&quot;https://github.com/scripting/concord/blob/master/example0/index.html&quot;&gt;example&lt;/a&gt; has the bare minimum to add an outliner to an existing app."/>
					<outline text="This saves developers the trouble of having to factor it out of Example 1, below." created="Tue, 17 Sep 2013 12:49:40 GMT" pgfnum="30324"/>
					<outline text="You can try it out &lt;a href=&quot;http://scripting.com/code/concord/repo/example0/&quot;&gt;here&lt;/a&gt;. " created="Mon, 16 Sep 2013 13:35:45 GMT" pgfnum="30320"/>
					</outline>
				<outline text="### Example 1: Hello Outliner" created="Wed, 11 Sep 2013 23:45:31 GMT" pgfnum="30140">
					<outline text="This &lt;a href=&quot;https://github.com/scripting/concord/tree/master/example1/index.html&quot;&gt;example&lt;/a&gt; is a functional outliner, with most of the capabilities of the Little Outliner app and the same basic approach. You edit a single outline, saved in local storage, so it's there when you come back to it, but only on that machine." created="Mon, 16 Sep 2013 13:34:27 GMT" pgfnum="30319"/>
					<outline text="It has a simple menubar, with menus containing Outliner commands, links to OPML documents you can view and edit, and links to docs." created="Mon, 16 Sep 2013 13:44:05 GMT" pgfnum="30321"/>
					<outline text="You can try it out &lt;a href=&quot;http://scripting.com/code/concord/repo/example1/&quot;&gt;here&lt;/a&gt;." created="Mon, 16 Sep 2013 13:35:45 GMT" pgfnum="30320"/>
					</outline>
				<outline text="### Example 2: Small Picture Reader" created="Wed, 11 Sep 2013 23:45:31 GMT" pgfnum="30140">
					<outline text="We've released the &lt;a href=&quot;https://github.com/scripting/concord/blob/master/example2/index.html&quot;&gt;source&lt;/a&gt; for &lt;a href=&quot;http://docs.fargo.io/fargo/reader&quot;&gt;Small Picture Reader&lt;/a&gt; under the GPL as part of the Concord release." created="Wed, 18 Sep 2013 15:15:07 GMT" pgfnum="30464"/>
					<outline text="This app provides a way to read any OPML file even if you aren't using an outliner." created="Wed, 18 Sep 2013 15:05:00 GMT" pgfnum="30461"/>
					<outline text="There's a command in Little Outliner that creates a link between the document you're editing and a reader version." created="Wed, 18 Sep 2013 15:05:41 GMT" pgfnum="30462"/>
					<outline text="If you want to run the app, &lt;a href=&quot;http://scripting.com/code/concord/repo/example2/&quot;&gt;click here&lt;/a&gt;." created="Wed, 18 Sep 2013 15:06:02 GMT" pgfnum="30463"/>
					</outline>
				<outline text="### The previous version">
					<outline text="Here's a &lt;a href=&quot;http://scripting.com/2020/02/13/concord-master.zip&quot;&gt;snapshot&lt;/a&gt; of this repo before integrating the new stuff. "/>
					<outline text="Here's the &lt;a href=&quot;https://github.com/scripting/concord/blob/master/archive/readme2013.md&quot;&gt;previous readme&lt;/a&gt;. "/>
					</outline>
				<outline text="### Support">
					<outline text="If you have a question, comment, or bug to report, please post an &lt;a href=&quot;https://github.com/scripting/concord/issues&quot;&gt;issue&lt;/a&gt; here. "/>
					<outline text="I do not take pull requests, it's best to describe the problem or feature you want to add, as an issue, and let's talk about the best way to do it. Writing the code is never the biggest part of a change or addition. "/>
					</outline>
				</outline>
			<outline text="concordkeyboard.js" isComment="true">
				<outline text="// Copyright 2020, Dave Winer"/>
				<outline text="// Copyright 2013, Small Picture, Inc."/>
				<outline text=""/>
				<outline text="var concordKeystrokes = {">
					<outline text="&quot;backspace&quot;: &quot;backspace&quot;, "/>
					<outline text="&quot;tab&quot;: &quot;tab&quot;,"/>
					<outline text="&quot;return&quot;: &quot;return&quot;,"/>
					<outline text="&quot;delete&quot;: &quot;delete&quot;,"/>
					<outline text="&quot;uparrow&quot;: &quot;cursor-up&quot;,"/>
					<outline text="&quot;downarrow&quot;: &quot;cursor-down&quot;,"/>
					<outline text="&quot;leftarrow&quot;: &quot;cursor-left&quot;,"/>
					<outline text="&quot;rightarrow&quot;: &quot;cursor-right&quot;,"/>
					<outline text=""/>
					<outline text="&quot;meta-A&quot;: &quot;select-all&quot;,"/>
					<outline text="&quot;meta-B&quot;: &quot;bolden&quot;,"/>
					<outline text="&quot;meta-C&quot;: &quot;copy&quot;,"/>
					<outline text="&quot;meta-D&quot;: &quot;reorg-down&quot;,"/>
					<outline text="&quot;meta-F&quot;: &quot;find&quot;, //9/19/13 by DW"/>
					<outline text="&quot;meta-I&quot;: &quot;italicize&quot;,"/>
					<outline text="&quot;meta-L&quot;: &quot;reorg-left&quot;,"/>
					<outline text="&quot;meta-R&quot;: &quot;reorg-right&quot;,"/>
					<outline text="&quot;meta-U&quot;: &quot;reorg-up&quot;,"/>
					<outline text="&quot;meta-V&quot;: &quot;paste&quot;,"/>
					<outline text="&quot;meta-X&quot;: &quot;cut&quot;,"/>
					<outline text="&quot;meta-Z&quot;: &quot;undo&quot;,"/>
					<outline text=""/>
					<outline text="&quot;meta-[&quot;: &quot;promote&quot;,"/>
					<outline text="&quot;meta-]&quot;: &quot;demote&quot;,"/>
					<outline text=""/>
					<outline text="&quot;meta-\\&quot;: &quot;toggle-comment&quot;,"/>
					<outline text="&quot;meta-/&quot;: &quot;run-selection&quot;,"/>
					<outline text="&quot;meta-`&quot;: &quot;toggle-render&quot;,"/>
					<outline text="&quot;meta-,&quot;: &quot;toggle-expand&quot;"/>
					<outline text="}"/>
					</outline>
				<outline text=""/>
				<outline text="function concordMetaizeKeystroke (event) { //9/17/13 by DW">
					<outline text="Changes" isComment="true">
						<outline text="2/6/20; 2:01:26 PM by DW">
							<outline text="Add &quot;meta-&quot; if the meta key is down, in all cases. previously we'd only add them for A through Z"/>
							</outline>
						</outline>
					<outline text="var flmeta = event.metaKey || event.ctrlKey;"/>
					<outline text="function checkspecials (ch) {">
						<outline text="switch (ch) {">
							<outline text="case 8:">
								<outline text="return (&quot;backspace&quot;);"/>
								</outline>
							<outline text="case 9:">
								<outline text="return (&quot;tab&quot;);"/>
								</outline>
							<outline text="case 13:">
								<outline text="return (&quot;return&quot;);"/>
								</outline>
							<outline text="case 37:">
								<outline text="return (&quot;leftarrow&quot;);"/>
								</outline>
							<outline text="case 38:">
								<outline text="return (&quot;uparrow&quot;);"/>
								</outline>
							<outline text="case 39:">
								<outline text="return (&quot;rightarrow&quot;);"/>
								</outline>
							<outline text="case 40:">
								<outline text="return (&quot;downarrow&quot;);"/>
								</outline>
							<outline text="case 46:">
								<outline text="return (&quot;delete&quot;);"/>
								</outline>
							<outline text="case 188:">
								<outline text="if (flmeta) {">
									<outline text="return (&quot;meta-,&quot;);"/>
									<outline text="}"/>
									</outline>
								</outline>
							<outline text="case 190:">
								<outline text="if (flmeta) {">
									<outline text="return (&quot;meta-.&quot;);"/>
									<outline text="}"/>
									</outline>
								</outline>
							<outline text="case 191:">
								<outline text="if (flmeta) {">
									<outline text="return (&quot;meta-/&quot;);"/>
									<outline text="}"/>
									</outline>
								</outline>
							<outline text="case 192:">
								<outline text="if (flmeta) {">
									<outline text="return (&quot;meta-`&quot;);"/>
									<outline text="}"/>
									</outline>
								</outline>
							<outline text="case 219:">
								<outline text="if (flmeta) {">
									<outline text="return (&quot;meta-[&quot;);"/>
									<outline text="}"/>
									</outline>
								</outline>
							<outline text="case 220:">
								<outline text="if (flmeta) {">
									<outline text="return (&quot;meta-\\&quot;);"/>
									<outline text="}"/>
									</outline>
								</outline>
							<outline text="case 221:">
								<outline text="if (flmeta) {">
									<outline text="return (&quot;meta-]&quot;);"/>
									<outline text="}"/>
									</outline>
								</outline>
							<outline text="}"/>
							</outline>
						<outline text="return (ch);"/>
						<outline text="}"/>
						</outline>
					<outline text="var ch = event.which;"/>
					<outline text="if ((ch &gt;= 65) &amp;&amp; (ch &lt;= 90)) { //meta-A through meta-Z" created="Tue, 17 Sep 2013 22:10:20 GMT" pgfnum="30346">
						<outline text="if (flmeta) {" created="Tue, 17 Sep 2013 22:12:11 GMT" pgfnum="30350">
							<outline text="return (&quot;meta-&quot; + String.fromCharCode (ch));" created="Tue, 17 Sep 2013 22:12:22 GMT" pgfnum="30352"/>
							<outline text="}" created="Tue, 17 Sep 2013 22:12:18 GMT" pgfnum="30351"/>
							</outline>
						<outline text="}" created="Tue, 17 Sep 2013 22:10:45 GMT" pgfnum="30349"/>
						</outline>
					<outline text="var s = checkspecials (ch);"/>
					<outline text="if (flmeta) {">
						<outline text="return (&quot;meta-&quot; + s);"/>
						<outline text="}"/>
						</outline>
					<outline text="else {">
						<outline text="return (s);"/>
						<outline text="}"/>
						</outline>
					<outline text="}"/>
					</outline>
				<outline text="function concordGetKeystroke (event) { //9/17/13 by DW">
					<outline text="var s = concordMetaizeKeystroke (event);"/>
					<outline text="if (concordKeystrokes [s] !== undefined) {">
						<outline text="var val = concordKeystrokes [s];"/>
						<outline text="if (val.length &gt; 0) { //2/23/14 by DW">
							<outline text="return (val);"/>
							<outline text="}"/>
							</outline>
						<outline text="}"/>
						</outline>
					<outline text="return (s);"/>
					<outline text="}"/>
					</outline>
				</outline>
			</outline>
		<outline text="build script">
			<outline text="nodeEditorSuite.utilities.buildConcord ()"/>
			</outline>
		</body>
	</opml>
